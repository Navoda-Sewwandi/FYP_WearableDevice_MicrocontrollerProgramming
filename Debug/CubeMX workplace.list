
CubeMX workplace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb70  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013ac  0800ecb0  0800ecb0  0001ecb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801005c  0801005c  0002005c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010064  08010064  00020064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010068  08010068  00020068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  20000008  0801006c  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 MB_MEM2       00000883  20000094  080100f8  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  20000918  0801097b  00030918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000950  080109b0  00030950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000200c  20000964  080109c1  00030964  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002970  080109c1  00032970  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030961  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00040000  2**2
                  ALLOC
 15 .debug_info   0003927f  00000000  00000000  00030991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00007130  00000000  00000000  00069c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003048  00000000  00000000  00070d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002d48  00000000  00000000  00073d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00030f79  00000000  00000000  00076ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00037f7a  00000000  00000000  000a7a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010de39  00000000  00000000  000df9c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001ed7fc  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000d494  00000000  00000000  001ed84c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000964 	.word	0x20000964
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ec98 	.word	0x0800ec98

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000968 	.word	0x20000968
 800017c:	0800ec98 	.word	0x0800ec98

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	; 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295
 800080c:	f04f 30ff 	movne.w	r0, #4294967295
 8000810:	f000 b974 	b.w	8000afc <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9d08      	ldr	r5, [sp, #32]
 8000832:	4604      	mov	r4, r0
 8000834:	468e      	mov	lr, r1
 8000836:	2b00      	cmp	r3, #0
 8000838:	d14d      	bne.n	80008d6 <__udivmoddi4+0xaa>
 800083a:	428a      	cmp	r2, r1
 800083c:	4694      	mov	ip, r2
 800083e:	d969      	bls.n	8000914 <__udivmoddi4+0xe8>
 8000840:	fab2 f282 	clz	r2, r2
 8000844:	b152      	cbz	r2, 800085c <__udivmoddi4+0x30>
 8000846:	fa01 f302 	lsl.w	r3, r1, r2
 800084a:	f1c2 0120 	rsb	r1, r2, #32
 800084e:	fa20 f101 	lsr.w	r1, r0, r1
 8000852:	fa0c fc02 	lsl.w	ip, ip, r2
 8000856:	ea41 0e03 	orr.w	lr, r1, r3
 800085a:	4094      	lsls	r4, r2
 800085c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000860:	0c21      	lsrs	r1, r4, #16
 8000862:	fbbe f6f8 	udiv	r6, lr, r8
 8000866:	fa1f f78c 	uxth.w	r7, ip
 800086a:	fb08 e316 	mls	r3, r8, r6, lr
 800086e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000872:	fb06 f107 	mul.w	r1, r6, r7
 8000876:	4299      	cmp	r1, r3
 8000878:	d90a      	bls.n	8000890 <__udivmoddi4+0x64>
 800087a:	eb1c 0303 	adds.w	r3, ip, r3
 800087e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000882:	f080 811f 	bcs.w	8000ac4 <__udivmoddi4+0x298>
 8000886:	4299      	cmp	r1, r3
 8000888:	f240 811c 	bls.w	8000ac4 <__udivmoddi4+0x298>
 800088c:	3e02      	subs	r6, #2
 800088e:	4463      	add	r3, ip
 8000890:	1a5b      	subs	r3, r3, r1
 8000892:	b2a4      	uxth	r4, r4
 8000894:	fbb3 f0f8 	udiv	r0, r3, r8
 8000898:	fb08 3310 	mls	r3, r8, r0, r3
 800089c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008a0:	fb00 f707 	mul.w	r7, r0, r7
 80008a4:	42a7      	cmp	r7, r4
 80008a6:	d90a      	bls.n	80008be <__udivmoddi4+0x92>
 80008a8:	eb1c 0404 	adds.w	r4, ip, r4
 80008ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80008b0:	f080 810a 	bcs.w	8000ac8 <__udivmoddi4+0x29c>
 80008b4:	42a7      	cmp	r7, r4
 80008b6:	f240 8107 	bls.w	8000ac8 <__udivmoddi4+0x29c>
 80008ba:	4464      	add	r4, ip
 80008bc:	3802      	subs	r0, #2
 80008be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008c2:	1be4      	subs	r4, r4, r7
 80008c4:	2600      	movs	r6, #0
 80008c6:	b11d      	cbz	r5, 80008d0 <__udivmoddi4+0xa4>
 80008c8:	40d4      	lsrs	r4, r2
 80008ca:	2300      	movs	r3, #0
 80008cc:	e9c5 4300 	strd	r4, r3, [r5]
 80008d0:	4631      	mov	r1, r6
 80008d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d6:	428b      	cmp	r3, r1
 80008d8:	d909      	bls.n	80008ee <__udivmoddi4+0xc2>
 80008da:	2d00      	cmp	r5, #0
 80008dc:	f000 80ef 	beq.w	8000abe <__udivmoddi4+0x292>
 80008e0:	2600      	movs	r6, #0
 80008e2:	e9c5 0100 	strd	r0, r1, [r5]
 80008e6:	4630      	mov	r0, r6
 80008e8:	4631      	mov	r1, r6
 80008ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ee:	fab3 f683 	clz	r6, r3
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d14a      	bne.n	800098c <__udivmoddi4+0x160>
 80008f6:	428b      	cmp	r3, r1
 80008f8:	d302      	bcc.n	8000900 <__udivmoddi4+0xd4>
 80008fa:	4282      	cmp	r2, r0
 80008fc:	f200 80f9 	bhi.w	8000af2 <__udivmoddi4+0x2c6>
 8000900:	1a84      	subs	r4, r0, r2
 8000902:	eb61 0303 	sbc.w	r3, r1, r3
 8000906:	2001      	movs	r0, #1
 8000908:	469e      	mov	lr, r3
 800090a:	2d00      	cmp	r5, #0
 800090c:	d0e0      	beq.n	80008d0 <__udivmoddi4+0xa4>
 800090e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000912:	e7dd      	b.n	80008d0 <__udivmoddi4+0xa4>
 8000914:	b902      	cbnz	r2, 8000918 <__udivmoddi4+0xec>
 8000916:	deff      	udf	#255	; 0xff
 8000918:	fab2 f282 	clz	r2, r2
 800091c:	2a00      	cmp	r2, #0
 800091e:	f040 8092 	bne.w	8000a46 <__udivmoddi4+0x21a>
 8000922:	eba1 010c 	sub.w	r1, r1, ip
 8000926:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800092a:	fa1f fe8c 	uxth.w	lr, ip
 800092e:	2601      	movs	r6, #1
 8000930:	0c20      	lsrs	r0, r4, #16
 8000932:	fbb1 f3f7 	udiv	r3, r1, r7
 8000936:	fb07 1113 	mls	r1, r7, r3, r1
 800093a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800093e:	fb0e f003 	mul.w	r0, lr, r3
 8000942:	4288      	cmp	r0, r1
 8000944:	d908      	bls.n	8000958 <__udivmoddi4+0x12c>
 8000946:	eb1c 0101 	adds.w	r1, ip, r1
 800094a:	f103 38ff 	add.w	r8, r3, #4294967295
 800094e:	d202      	bcs.n	8000956 <__udivmoddi4+0x12a>
 8000950:	4288      	cmp	r0, r1
 8000952:	f200 80cb 	bhi.w	8000aec <__udivmoddi4+0x2c0>
 8000956:	4643      	mov	r3, r8
 8000958:	1a09      	subs	r1, r1, r0
 800095a:	b2a4      	uxth	r4, r4
 800095c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000960:	fb07 1110 	mls	r1, r7, r0, r1
 8000964:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000968:	fb0e fe00 	mul.w	lr, lr, r0
 800096c:	45a6      	cmp	lr, r4
 800096e:	d908      	bls.n	8000982 <__udivmoddi4+0x156>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f100 31ff 	add.w	r1, r0, #4294967295
 8000978:	d202      	bcs.n	8000980 <__udivmoddi4+0x154>
 800097a:	45a6      	cmp	lr, r4
 800097c:	f200 80bb 	bhi.w	8000af6 <__udivmoddi4+0x2ca>
 8000980:	4608      	mov	r0, r1
 8000982:	eba4 040e 	sub.w	r4, r4, lr
 8000986:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800098a:	e79c      	b.n	80008c6 <__udivmoddi4+0x9a>
 800098c:	f1c6 0720 	rsb	r7, r6, #32
 8000990:	40b3      	lsls	r3, r6
 8000992:	fa22 fc07 	lsr.w	ip, r2, r7
 8000996:	ea4c 0c03 	orr.w	ip, ip, r3
 800099a:	fa20 f407 	lsr.w	r4, r0, r7
 800099e:	fa01 f306 	lsl.w	r3, r1, r6
 80009a2:	431c      	orrs	r4, r3
 80009a4:	40f9      	lsrs	r1, r7
 80009a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009aa:	fa00 f306 	lsl.w	r3, r0, r6
 80009ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80009b2:	0c20      	lsrs	r0, r4, #16
 80009b4:	fa1f fe8c 	uxth.w	lr, ip
 80009b8:	fb09 1118 	mls	r1, r9, r8, r1
 80009bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009c0:	fb08 f00e 	mul.w	r0, r8, lr
 80009c4:	4288      	cmp	r0, r1
 80009c6:	fa02 f206 	lsl.w	r2, r2, r6
 80009ca:	d90b      	bls.n	80009e4 <__udivmoddi4+0x1b8>
 80009cc:	eb1c 0101 	adds.w	r1, ip, r1
 80009d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80009d4:	f080 8088 	bcs.w	8000ae8 <__udivmoddi4+0x2bc>
 80009d8:	4288      	cmp	r0, r1
 80009da:	f240 8085 	bls.w	8000ae8 <__udivmoddi4+0x2bc>
 80009de:	f1a8 0802 	sub.w	r8, r8, #2
 80009e2:	4461      	add	r1, ip
 80009e4:	1a09      	subs	r1, r1, r0
 80009e6:	b2a4      	uxth	r4, r4
 80009e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80009ec:	fb09 1110 	mls	r1, r9, r0, r1
 80009f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80009f8:	458e      	cmp	lr, r1
 80009fa:	d908      	bls.n	8000a0e <__udivmoddi4+0x1e2>
 80009fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000a00:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a04:	d26c      	bcs.n	8000ae0 <__udivmoddi4+0x2b4>
 8000a06:	458e      	cmp	lr, r1
 8000a08:	d96a      	bls.n	8000ae0 <__udivmoddi4+0x2b4>
 8000a0a:	3802      	subs	r0, #2
 8000a0c:	4461      	add	r1, ip
 8000a0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a12:	fba0 9402 	umull	r9, r4, r0, r2
 8000a16:	eba1 010e 	sub.w	r1, r1, lr
 8000a1a:	42a1      	cmp	r1, r4
 8000a1c:	46c8      	mov	r8, r9
 8000a1e:	46a6      	mov	lr, r4
 8000a20:	d356      	bcc.n	8000ad0 <__udivmoddi4+0x2a4>
 8000a22:	d053      	beq.n	8000acc <__udivmoddi4+0x2a0>
 8000a24:	b15d      	cbz	r5, 8000a3e <__udivmoddi4+0x212>
 8000a26:	ebb3 0208 	subs.w	r2, r3, r8
 8000a2a:	eb61 010e 	sbc.w	r1, r1, lr
 8000a2e:	fa01 f707 	lsl.w	r7, r1, r7
 8000a32:	fa22 f306 	lsr.w	r3, r2, r6
 8000a36:	40f1      	lsrs	r1, r6
 8000a38:	431f      	orrs	r7, r3
 8000a3a:	e9c5 7100 	strd	r7, r1, [r5]
 8000a3e:	2600      	movs	r6, #0
 8000a40:	4631      	mov	r1, r6
 8000a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a46:	f1c2 0320 	rsb	r3, r2, #32
 8000a4a:	40d8      	lsrs	r0, r3
 8000a4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a50:	fa21 f303 	lsr.w	r3, r1, r3
 8000a54:	4091      	lsls	r1, r2
 8000a56:	4301      	orrs	r1, r0
 8000a58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5c:	fa1f fe8c 	uxth.w	lr, ip
 8000a60:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a64:	fb07 3610 	mls	r6, r7, r0, r3
 8000a68:	0c0b      	lsrs	r3, r1, #16
 8000a6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a6e:	fb00 f60e 	mul.w	r6, r0, lr
 8000a72:	429e      	cmp	r6, r3
 8000a74:	fa04 f402 	lsl.w	r4, r4, r2
 8000a78:	d908      	bls.n	8000a8c <__udivmoddi4+0x260>
 8000a7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a82:	d22f      	bcs.n	8000ae4 <__udivmoddi4+0x2b8>
 8000a84:	429e      	cmp	r6, r3
 8000a86:	d92d      	bls.n	8000ae4 <__udivmoddi4+0x2b8>
 8000a88:	3802      	subs	r0, #2
 8000a8a:	4463      	add	r3, ip
 8000a8c:	1b9b      	subs	r3, r3, r6
 8000a8e:	b289      	uxth	r1, r1
 8000a90:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a94:	fb07 3316 	mls	r3, r7, r6, r3
 8000a98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a9c:	fb06 f30e 	mul.w	r3, r6, lr
 8000aa0:	428b      	cmp	r3, r1
 8000aa2:	d908      	bls.n	8000ab6 <__udivmoddi4+0x28a>
 8000aa4:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000aac:	d216      	bcs.n	8000adc <__udivmoddi4+0x2b0>
 8000aae:	428b      	cmp	r3, r1
 8000ab0:	d914      	bls.n	8000adc <__udivmoddi4+0x2b0>
 8000ab2:	3e02      	subs	r6, #2
 8000ab4:	4461      	add	r1, ip
 8000ab6:	1ac9      	subs	r1, r1, r3
 8000ab8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000abc:	e738      	b.n	8000930 <__udivmoddi4+0x104>
 8000abe:	462e      	mov	r6, r5
 8000ac0:	4628      	mov	r0, r5
 8000ac2:	e705      	b.n	80008d0 <__udivmoddi4+0xa4>
 8000ac4:	4606      	mov	r6, r0
 8000ac6:	e6e3      	b.n	8000890 <__udivmoddi4+0x64>
 8000ac8:	4618      	mov	r0, r3
 8000aca:	e6f8      	b.n	80008be <__udivmoddi4+0x92>
 8000acc:	454b      	cmp	r3, r9
 8000ace:	d2a9      	bcs.n	8000a24 <__udivmoddi4+0x1f8>
 8000ad0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ad4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ad8:	3801      	subs	r0, #1
 8000ada:	e7a3      	b.n	8000a24 <__udivmoddi4+0x1f8>
 8000adc:	4646      	mov	r6, r8
 8000ade:	e7ea      	b.n	8000ab6 <__udivmoddi4+0x28a>
 8000ae0:	4620      	mov	r0, r4
 8000ae2:	e794      	b.n	8000a0e <__udivmoddi4+0x1e2>
 8000ae4:	4640      	mov	r0, r8
 8000ae6:	e7d1      	b.n	8000a8c <__udivmoddi4+0x260>
 8000ae8:	46d0      	mov	r8, sl
 8000aea:	e77b      	b.n	80009e4 <__udivmoddi4+0x1b8>
 8000aec:	3b02      	subs	r3, #2
 8000aee:	4461      	add	r1, ip
 8000af0:	e732      	b.n	8000958 <__udivmoddi4+0x12c>
 8000af2:	4630      	mov	r0, r6
 8000af4:	e709      	b.n	800090a <__udivmoddi4+0xde>
 8000af6:	4464      	add	r4, ip
 8000af8:	3802      	subs	r0, #2
 8000afa:	e742      	b.n	8000982 <__udivmoddi4+0x156>

08000afc <__aeabi_idiv0>:
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <LL_EXTI_EnableIT_32_63+0x24>)
 8000b0a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000b0e:	4905      	ldr	r1, [pc, #20]	; (8000b24 <LL_EXTI_EnableIT_32_63+0x24>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	58000800 	.word	0x58000800

08000b28 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
}
 8000b4e:	bf00      	nop
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b085      	sub	sp, #20
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b66:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000b6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b7a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4013      	ands	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b84:	68fb      	ldr	r3, [r7, #12]
}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000b96:	f002 fc9b 	bl	80034d0 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000b9a:	f002 fc9f 	bl	80034dc <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000b9e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000ba2:	f7ff ffad 	bl	8000b00 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000ba6:	f00a ff03 	bl	800b9b0 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000baa:	f000 f821 	bl	8000bf0 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000bae:	f000 f8c3 	bl	8000d38 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000bb2:	bf00      	nop
}
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000bb8:	b5b0      	push	{r4, r5, r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <APPD_EnableCPU2+0x34>)
 8000bc0:	1d3c      	adds	r4, r7, #4
 8000bc2:	461d      	mov	r5, r3
 8000bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bcc:	c403      	stmia	r4!, {r0, r1}
 8000bce:	8022      	strh	r2, [r4, #0]
 8000bd0:	3402      	adds	r4, #2
 8000bd2:	0c13      	lsrs	r3, r2, #16
 8000bd4:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000bd6:	f00a fe27 	bl	800b828 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f00a f8c2 	bl	800ad66 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000be2:	bf00      	nop
}
 8000be4:	3720      	adds	r7, #32
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bdb0      	pop	{r4, r5, r7, pc}
 8000bea:	bf00      	nop
 8000bec:	0800ecb0 	.word	0x0800ecb0

08000bf0 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c10:	2300      	movs	r3, #0
 8000c12:	77fb      	strb	r3, [r7, #31]
 8000c14:	e038      	b.n	8000c88 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000c16:	7ffb      	ldrb	r3, [r7, #31]
 8000c18:	4a44      	ldr	r2, [pc, #272]	; (8000d2c <APPD_SetCPU2GpioConfig+0x13c>)
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	4413      	add	r3, r2
 8000c1e:	799b      	ldrb	r3, [r3, #6]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d02b      	beq.n	8000c7c <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000c24:	7ffb      	ldrb	r3, [r7, #31]
 8000c26:	4a41      	ldr	r2, [pc, #260]	; (8000d2c <APPD_SetCPU2GpioConfig+0x13c>)
 8000c28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c2c:	4a40      	ldr	r2, [pc, #256]	; (8000d30 <APPD_SetCPU2GpioConfig+0x140>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d01b      	beq.n	8000c6a <APPD_SetCPU2GpioConfig+0x7a>
 8000c32:	4a3f      	ldr	r2, [pc, #252]	; (8000d30 <APPD_SetCPU2GpioConfig+0x140>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d823      	bhi.n	8000c80 <APPD_SetCPU2GpioConfig+0x90>
 8000c38:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c3c:	d003      	beq.n	8000c46 <APPD_SetCPU2GpioConfig+0x56>
 8000c3e:	4a3d      	ldr	r2, [pc, #244]	; (8000d34 <APPD_SetCPU2GpioConfig+0x144>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d009      	beq.n	8000c58 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8000c44:	e01c      	b.n	8000c80 <APPD_SetCPU2GpioConfig+0x90>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000c46:	7ffb      	ldrb	r3, [r7, #31]
 8000c48:	4a38      	ldr	r2, [pc, #224]	; (8000d2c <APPD_SetCPU2GpioConfig+0x13c>)
 8000c4a:	00db      	lsls	r3, r3, #3
 8000c4c:	4413      	add	r3, r2
 8000c4e:	889a      	ldrh	r2, [r3, #4]
 8000c50:	8bbb      	ldrh	r3, [r7, #28]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	83bb      	strh	r3, [r7, #28]
          break;
 8000c56:	e014      	b.n	8000c82 <APPD_SetCPU2GpioConfig+0x92>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000c58:	7ffb      	ldrb	r3, [r7, #31]
 8000c5a:	4a34      	ldr	r2, [pc, #208]	; (8000d2c <APPD_SetCPU2GpioConfig+0x13c>)
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	4413      	add	r3, r2
 8000c60:	889a      	ldrh	r2, [r3, #4]
 8000c62:	8b7b      	ldrh	r3, [r7, #26]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	837b      	strh	r3, [r7, #26]
          break;
 8000c68:	e00b      	b.n	8000c82 <APPD_SetCPU2GpioConfig+0x92>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000c6a:	7ffb      	ldrb	r3, [r7, #31]
 8000c6c:	4a2f      	ldr	r2, [pc, #188]	; (8000d2c <APPD_SetCPU2GpioConfig+0x13c>)
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	4413      	add	r3, r2
 8000c72:	889a      	ldrh	r2, [r3, #4]
 8000c74:	8b3b      	ldrh	r3, [r7, #24]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	833b      	strh	r3, [r7, #24]
          break;
 8000c7a:	e002      	b.n	8000c82 <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000c7c:	bf00      	nop
 8000c7e:	e000      	b.n	8000c82 <APPD_SetCPU2GpioConfig+0x92>
          break;
 8000c80:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c82:	7ffb      	ldrb	r3, [r7, #31]
 8000c84:	3301      	adds	r3, #1
 8000c86:	77fb      	strb	r3, [r7, #31]
 8000c88:	7ffb      	ldrb	r3, [r7, #31]
 8000c8a:	2b25      	cmp	r3, #37	; 0x25
 8000c8c:	d9c3      	bls.n	8000c16 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000c9a:	8bbb      	ldrh	r3, [r7, #28]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d014      	beq.n	8000cca <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000ca0:	8bbb      	ldrh	r3, [r7, #28]
 8000ca2:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f7ff ff3f 	bl	8000b28 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff ff55 	bl	8000b5a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb8:	f004 fac2 	bl	8005240 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000cbc:	8bbb      	ldrh	r3, [r7, #28]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc6:	f004 fc2b 	bl	8005520 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000cca:	8b7b      	ldrh	r3, [r7, #26]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d012      	beq.n	8000cf6 <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000cd0:	8b7b      	ldrh	r3, [r7, #26]
 8000cd2:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd4:	2002      	movs	r0, #2
 8000cd6:	f7ff ff27 	bl	8000b28 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000cda:	2002      	movs	r0, #2
 8000cdc:	f7ff ff3d 	bl	8000b5a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4813      	ldr	r0, [pc, #76]	; (8000d34 <APPD_SetCPU2GpioConfig+0x144>)
 8000ce6:	f004 faab 	bl	8005240 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000cea:	8b7b      	ldrh	r3, [r7, #26]
 8000cec:	2200      	movs	r2, #0
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4810      	ldr	r0, [pc, #64]	; (8000d34 <APPD_SetCPU2GpioConfig+0x144>)
 8000cf2:	f004 fc15 	bl	8005520 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000cf6:	8b3b      	ldrh	r3, [r7, #24]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d013      	beq.n	8000d24 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000cfc:	8b3b      	ldrh	r3, [r7, #24]
 8000cfe:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d00:	2004      	movs	r0, #4
 8000d02:	f7ff ff11 	bl	8000b28 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000d06:	2004      	movs	r0, #4
 8000d08:	f7ff ff27 	bl	8000b5a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4807      	ldr	r0, [pc, #28]	; (8000d30 <APPD_SetCPU2GpioConfig+0x140>)
 8000d12:	f004 fa95 	bl	8005240 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000d16:	8b3b      	ldrh	r3, [r7, #24]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4804      	ldr	r0, [pc, #16]	; (8000d30 <APPD_SetCPU2GpioConfig+0x140>)
 8000d1e:	f004 fbff 	bl	8005520 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000d22:	bf00      	nop
 8000d24:	bf00      	nop
}
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	0800fd94 	.word	0x0800fd94
 8000d30:	48000800 	.word	0x48000800
 8000d34:	48000400 	.word	0x48000400

08000d38 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000d3c:	bf00      	nop
}
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000d4a:	f001 fe33 	bl	80029b4 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000d4e:	bf00      	nop
}
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b084      	sub	sp, #16
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	60f8      	str	r0, [r7, #12]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	607a      	str	r2, [r7, #4]
 8000d5e:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000d60:	897a      	ldrh	r2, [r7, #10]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	68f9      	ldr	r1, [r7, #12]
 8000d66:	2000      	movs	r0, #0
 8000d68:	f001 f9ea 	bl	8002140 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000d6c:	bf00      	nop
}
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <LL_C2_PWR_SetPowerMode+0x28>)
 8000d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d82:	f023 0207 	bic.w	r2, r3, #7
 8000d86:	4905      	ldr	r1, [pc, #20]	; (8000d9c <LL_C2_PWR_SetPowerMode+0x28>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	58000400 	.word	0x58000400

08000da0 <LL_EXTI_EnableIT_32_63>:
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <LL_EXTI_EnableIT_32_63+0x24>)
 8000daa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000dae:	4905      	ldr	r1, [pc, #20]	; (8000dc4 <LL_EXTI_EnableIT_32_63+0x24>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	58000800 	.word	0x58000800

08000dc8 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd4:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000dd6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000de2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	021b      	lsls	r3, r3, #8
 8000dea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dee:	4313      	orrs	r3, r2
 8000df0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	cafecafe 	.word	0xcafecafe

08000e04 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	608b      	str	r3, [r1, #8]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000e84:	d101      	bne.n	8000e8a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000e86:	2301      	movs	r3, #1
 8000e88:	e000      	b.n	8000e8c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000eaa:	d101      	bne.n	8000eb0 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000eac:	2301      	movs	r3, #1
 8000eae:	e000      	b.n	8000eb2 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <LL_AHB3_GRP1_EnableClock>:
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000eca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4013      	ands	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
}
 8000ee2:	bf00      	nop
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <LL_DBGMCU_GetDeviceID+0x18>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e0042000 	.word	0xe0042000

08000f0c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <LL_DBGMCU_GetRevisionID+0x18>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	0c1b      	lsrs	r3, r3, #16
 8000f16:	b29b      	uxth	r3, r3
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e0042000 	.word	0xe0042000

08000f28 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	041b      	lsls	r3, r3, #16
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	605a      	str	r2, [r3, #4]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	605a      	str	r2, [r3, #4]
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	695a      	ldr	r2, [r3, #20]
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	041b      	lsls	r3, r3, #16
 8000f80:	431a      	orrs	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	615a      	str	r2, [r3, #20]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	695a      	ldr	r2, [r3, #20]
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	615a      	str	r2, [r3, #20]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	609a      	str	r2, [r3, #8]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	619a      	str	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <LL_LPM_EnableSleep+0x1c>)
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	4a04      	ldr	r2, [pc, #16]	; (8001008 <LL_LPM_EnableSleep+0x1c>)
 8000ff6:	f023 0304 	bic.w	r3, r3, #4
 8000ffa:	6113      	str	r3, [r2, #16]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	22ff      	movs	r2, #255	; 0xff
 8001018:	625a      	str	r2, [r3, #36]	; 0x24
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	22ca      	movs	r2, #202	; 0xca
 8001032:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2253      	movs	r2, #83	; 0x53
 8001038:	625a      	str	r2, [r3, #36]	; 0x24
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
 800104e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f023 0207 	bic.w	r2, r3, #7
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	431a      	orrs	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	609a      	str	r2, [r3, #8]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <MX_APPE_Config+0x18>)
 8001072:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001076:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001078:	f000 f826 	bl	80010c8 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800107c:	f000 f866 	bl	800114c <Config_HSE>

  return;
 8001080:	bf00      	nop
}
 8001082:	bd80      	pop	{r7, pc}
 8001084:	58004000 	.word	0x58004000

08001088 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 800108c:	f000 f872 	bl	8001174 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001090:	f000 f88a 	bl	80011a8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001094:	4904      	ldr	r1, [pc, #16]	; (80010a8 <MX_APPE_Init+0x20>)
 8001096:	2000      	movs	r0, #0
 8001098:	f000 fe60 	bl	8001d5c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 800109c:	f7ff fd79 	bl	8000b92 <APPD_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80010a0:	f000 f890 	bl	80011c4 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80010a4:	bf00      	nop
}
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000b18 	.word	0x20000b18

080010ac <Init_Smps>:

void Init_Smps(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80010b0:	bf00      	nop
}
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <Init_Exti>:

void Init_Exti(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80010be:	2050      	movs	r0, #80	; 0x50
 80010c0:	f7ff fe6e 	bl	8000da0 <LL_EXTI_EnableIT_32_63>

  return;
 80010c4:	bf00      	nop
}
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80010cc:	f000 f804 	bl	80010d8 <Reset_BackupDomain>

  Reset_IPCC();
 80010d0:	f000 f81a 	bl	8001108 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80010d4:	bf00      	nop
}
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80010dc:	f7ff fec8 	bl	8000e70 <LL_RCC_IsActiveFlag_PINRST>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00d      	beq.n	8001102 <Reset_BackupDomain+0x2a>
 80010e6:	f7ff fed6 	bl	8000e96 <LL_RCC_IsActiveFlag_SFTRST>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d108      	bne.n	8001102 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80010f0:	f005 f97e 	bl	80063f0 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80010f4:	f005 f97c 	bl	80063f0 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80010f8:	f7ff fe98 	bl	8000e2c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80010fc:	f7ff fea7 	bl	8000e4e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001100:	bf00      	nop
 8001102:	bf00      	nop
}
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 800110c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001110:	f7ff fed4 	bl	8000ebc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8001114:	213f      	movs	r1, #63	; 0x3f
 8001116:	480c      	ldr	r0, [pc, #48]	; (8001148 <Reset_IPCC+0x40>)
 8001118:	f7ff ff4c 	bl	8000fb4 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 800111c:	213f      	movs	r1, #63	; 0x3f
 800111e:	480a      	ldr	r0, [pc, #40]	; (8001148 <Reset_IPCC+0x40>)
 8001120:	f7ff ff56 	bl	8000fd0 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8001124:	213f      	movs	r1, #63	; 0x3f
 8001126:	4808      	ldr	r0, [pc, #32]	; (8001148 <Reset_IPCC+0x40>)
 8001128:	f7ff fefe 	bl	8000f28 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 800112c:	213f      	movs	r1, #63	; 0x3f
 800112e:	4806      	ldr	r0, [pc, #24]	; (8001148 <Reset_IPCC+0x40>)
 8001130:	f7ff ff1d 	bl	8000f6e <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8001134:	213f      	movs	r1, #63	; 0x3f
 8001136:	4804      	ldr	r0, [pc, #16]	; (8001148 <Reset_IPCC+0x40>)
 8001138:	f7ff ff08 	bl	8000f4c <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 800113c:	213f      	movs	r1, #63	; 0x3f
 800113e:	4802      	ldr	r0, [pc, #8]	; (8001148 <Reset_IPCC+0x40>)
 8001140:	f7ff ff27 	bl	8000f92 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001144:	bf00      	nop
}
 8001146:	bd80      	pop	{r7, pc}
 8001148:	58000c00 	.word	0x58000c00

0800114c <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001152:	2000      	movs	r0, #0
 8001154:	f00a fcaa 	bl	800baac <OTP_Read>
 8001158:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d005      	beq.n	800116c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	799b      	ldrb	r3, [r3, #6]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fe2f 	bl	8000dc8 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800116a:	bf00      	nop
 800116c:	bf00      	nop
}
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <System_Init>:

static void System_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  Init_Smps();
 8001178:	f7ff ff98 	bl	80010ac <Init_Smps>

  Init_Exti();
 800117c:	f7ff ff9d 	bl	80010ba <Init_Exti>

  Init_Rtc();
 8001180:	f000 f802 	bl	8001188 <Init_Rtc>

  return;
 8001184:	bf00      	nop
}
 8001186:	bd80      	pop	{r7, pc}

08001188 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <Init_Rtc+0x1c>)
 800118e:	f7ff ff4a 	bl	8001026 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001192:	2100      	movs	r1, #0
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <Init_Rtc+0x1c>)
 8001196:	f7ff ff56 	bl	8001046 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800119a:	4802      	ldr	r0, [pc, #8]	; (80011a4 <Init_Rtc+0x1c>)
 800119c:	f7ff ff36 	bl	800100c <LL_RTC_EnableWriteProtection>

  return;
 80011a0:	bf00      	nop
}
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40002800 	.word	0x40002800

080011a8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80011ac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80011b0:	f7ff fe28 	bl	8000e04 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80011b4:	f00c fa4e 	bl	800d654 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80011b8:	2004      	movs	r0, #4
 80011ba:	f7ff fddb 	bl	8000d74 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80011be:	bf00      	nop
}
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80011ca:	f00a f977 	bl	800b4bc <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80011ce:	4a11      	ldr	r2, [pc, #68]	; (8001214 <appe_Tl_Init+0x50>)
 80011d0:	2100      	movs	r1, #0
 80011d2:	2004      	movs	r0, #4
 80011d4:	f00c fb7c 	bl	800d8d0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <appe_Tl_Init+0x54>)
 80011da:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <appe_Tl_Init+0x58>)
 80011de:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80011e0:	463b      	mov	r3, r7
 80011e2:	4619      	mov	r1, r3
 80011e4:	480e      	ldr	r0, [pc, #56]	; (8001220 <appe_Tl_Init+0x5c>)
 80011e6:	f00a f82f 	bl	800b248 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <appe_Tl_Init+0x60>)
 80011ec:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <appe_Tl_Init+0x64>)
 80011f0:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <appe_Tl_Init+0x68>)
 80011f4:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80011f6:	f240 533c 	movw	r3, #1340	; 0x53c
 80011fa:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	4618      	mov	r0, r3
 8001202:	f00a fa9d 	bl	800b740 <TL_MM_Init>

  TL_Enable();
 8001206:	f00a f953 	bl	800b4b0 <TL_Enable>

  return;
 800120a:	bf00      	nop
}
 800120c:	3720      	adds	r7, #32
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	0800b281 	.word	0x0800b281
 8001218:	200005e4 	.word	0x200005e4
 800121c:	08001231 	.word	0x08001231
 8001220:	08001249 	.word	0x08001249
 8001224:	200007fc 	.word	0x200007fc
 8001228:	200006f0 	.word	0x200006f0
 800122c:	200000a8 	.word	0x200000a8

08001230 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800123a:	bf00      	nop
}
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	330b      	adds	r3, #11
 8001256:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	881b      	ldrh	r3, [r3, #0]
 800125c:	b29b      	uxth	r3, r3
 800125e:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8001262:	2b07      	cmp	r3, #7
 8001264:	d860      	bhi.n	8001328 <APPE_SysUserEvtRx+0xe0>
 8001266:	a201      	add	r2, pc, #4	; (adr r2, 800126c <APPE_SysUserEvtRx+0x24>)
 8001268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800126c:	0800128d 	.word	0x0800128d
 8001270:	080012cf 	.word	0x080012cf
 8001274:	080012dd 	.word	0x080012dd
 8001278:	08001329 	.word	0x08001329
 800127c:	080012f9 	.word	0x080012f9
 8001280:	08001309 	.word	0x08001309
 8001284:	08001311 	.word	0x08001311
 8001288:	08001321 	.word	0x08001321
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	4618      	mov	r0, r3
 8001292:	f009 fd95 	bl	800adc0 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8001296:	7b3b      	ldrb	r3, [r7, #12]
 8001298:	4619      	mov	r1, r3
 800129a:	7b7b      	ldrb	r3, [r7, #13]
 800129c:	461a      	mov	r2, r3
 800129e:	7bbb      	ldrb	r3, [r7, #14]
 80012a0:	4824      	ldr	r0, [pc, #144]	; (8001334 <APPE_SysUserEvtRx+0xec>)
 80012a2:	f00c fc97 	bl	800dbd4 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 80012a6:	7c3b      	ldrb	r3, [r7, #16]
 80012a8:	4619      	mov	r1, r3
 80012aa:	4823      	ldr	r0, [pc, #140]	; (8001338 <APPE_SysUserEvtRx+0xf0>)
 80012ac:	f00c fc92 	bl	800dbd4 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80012b0:	7dbb      	ldrb	r3, [r7, #22]
 80012b2:	4619      	mov	r1, r3
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	461a      	mov	r2, r3
 80012b8:	7e3b      	ldrb	r3, [r7, #24]
 80012ba:	4820      	ldr	r0, [pc, #128]	; (800133c <APPE_SysUserEvtRx+0xf4>)
 80012bc:	f00c fc8a 	bl	800dbd4 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80012c0:	481f      	ldr	r0, [pc, #124]	; (8001340 <APPE_SysUserEvtRx+0xf8>)
 80012c2:	f00c fc87 	bl	800dbd4 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f000 f870 	bl	80013ac <APPE_SysEvtReadyProcessing>
    break;
 80012cc:	e02d      	b.n	800132a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80012ce:	481d      	ldr	r0, [pc, #116]	; (8001344 <APPE_SysUserEvtRx+0xfc>)
 80012d0:	f00c fc80 	bl	800dbd4 <iprintf>
    APPE_SysEvtError(pPayload);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 f843 	bl	8001360 <APPE_SysEvtError>
    break;
 80012da:	e026      	b.n	800132a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 80012dc:	481a      	ldr	r0, [pc, #104]	; (8001348 <APPE_SysUserEvtRx+0x100>)
 80012de:	f00c fd15 	bl	800dd0c <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80012e6:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	461a      	mov	r2, r3
 80012f0:	4816      	ldr	r0, [pc, #88]	; (800134c <APPE_SysUserEvtRx+0x104>)
 80012f2:	f00c fc6f 	bl	800dbd4 <iprintf>
    break;
 80012f6:	e018      	b.n	800132a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4619      	mov	r1, r3
 8001300:	4813      	ldr	r0, [pc, #76]	; (8001350 <APPE_SysUserEvtRx+0x108>)
 8001302:	f00c fc67 	bl	800dbd4 <iprintf>
    break;
 8001306:	e010      	b.n	800132a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001308:	4812      	ldr	r0, [pc, #72]	; (8001354 <APPE_SysUserEvtRx+0x10c>)
 800130a:	f00c fc63 	bl	800dbd4 <iprintf>
    break;
 800130e:	e00c      	b.n	800132a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4619      	mov	r1, r3
 8001318:	480f      	ldr	r0, [pc, #60]	; (8001358 <APPE_SysUserEvtRx+0x110>)
 800131a:	f00c fc5b 	bl	800dbd4 <iprintf>
    break;
 800131e:	e004      	b.n	800132a <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001320:	480e      	ldr	r0, [pc, #56]	; (800135c <APPE_SysUserEvtRx+0x114>)
 8001322:	f00c fc57 	bl	800dbd4 <iprintf>
    break;
 8001326:	e000      	b.n	800132a <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 8001328:	bf00      	nop
  }

  return;
 800132a:	bf00      	nop
}
 800132c:	3720      	adds	r7, #32
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	0800eccc 	.word	0x0800eccc
 8001338:	0800ecf0 	.word	0x0800ecf0
 800133c:	0800ed0c 	.word	0x0800ed0c
 8001340:	0800ed24 	.word	0x0800ed24
 8001344:	0800ed44 	.word	0x0800ed44
 8001348:	0800ed68 	.word	0x0800ed68
 800134c:	0800edb8 	.word	0x0800edb8
 8001350:	0800ede0 	.word	0x0800ede0
 8001354:	0800ee1c 	.word	0x0800ee1c
 8001358:	0800ee40 	.word	0x0800ee40
 800135c:	0800ee7c 	.word	0x0800ee7c

08001360 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	330b      	adds	r3, #11
 800136e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	3302      	adds	r3, #2
 8001374:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	4619      	mov	r1, r3
 800137c:	4808      	ldr	r0, [pc, #32]	; (80013a0 <APPE_SysEvtError+0x40>)
 800137e:	f00c fc29 	bl	800dbd4 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d103      	bne.n	8001392 <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 800138a:	4806      	ldr	r0, [pc, #24]	; (80013a4 <APPE_SysEvtError+0x44>)
 800138c:	f00c fcbe 	bl	800dd0c <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001390:	e003      	b.n	800139a <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <APPE_SysEvtError+0x48>)
 8001394:	f00c fcba 	bl	800dd0c <puts>
  return;
 8001398:	bf00      	nop
}
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	0800eea0 	.word	0x0800eea0
 80013a4:	0800eed0 	.word	0x0800eed0
 80013a8:	0800ef0c 	.word	0x0800ef0c

080013ac <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80013b4:	f107 0308 	add.w	r3, r7, #8
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	330b      	adds	r3, #11
 80013d0:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3302      	adds	r3, #2
 80013d6:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d128      	bne.n	8001432 <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80013e0:	481d      	ldr	r0, [pc, #116]	; (8001458 <APPE_SysEvtReadyProcessing+0xac>)
 80013e2:	f00c fc93 	bl	800dd0c <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80013e6:	f7ff fbe7 	bl	8000bb8 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80013ea:	230f      	movs	r3, #15
 80013ec:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80013ee:	237f      	movs	r3, #127	; 0x7f
 80013f0:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80013f2:	f7ff fd8b 	bl	8000f0c <LL_DBGMCU_GetRevisionID>
 80013f6:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 80013f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013fa:	4818      	ldr	r0, [pc, #96]	; (800145c <APPE_SysEvtReadyProcessing+0xb0>)
 80013fc:	f00c fbea 	bl	800dbd4 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001402:	b29b      	uxth	r3, r3
 8001404:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001406:	f7ff fd73 	bl	8000ef0 <LL_DBGMCU_GetDeviceID>
 800140a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 800140c:	6a39      	ldr	r1, [r7, #32]
 800140e:	4814      	ldr	r0, [pc, #80]	; (8001460 <APPE_SysEvtReadyProcessing+0xb4>)
 8001410:	f00c fbe0 	bl	800dbd4 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	b29b      	uxth	r3, r3
 8001418:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800141a:	f107 0308 	add.w	r3, r7, #8
 800141e:	4618      	mov	r0, r3
 8001420:	f009 fcb8 	bl	800ad94 <SHCI_C2_Config>

    APP_BLE_Init();
 8001424:	f00b f84e 	bl	800c4c4 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001428:	2100      	movs	r1, #0
 800142a:	2001      	movs	r0, #1
 800142c:	f00c f924 	bl	800d678 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001430:	e00e      	b.n	8001450 <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d106      	bne.n	8001448 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 800143a:	480a      	ldr	r0, [pc, #40]	; (8001464 <APPE_SysEvtReadyProcessing+0xb8>)
 800143c:	f00c fbca 	bl	800dbd4 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
  return;
 8001446:	e003      	b.n	8001450 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001448:	4807      	ldr	r0, [pc, #28]	; (8001468 <APPE_SysEvtReadyProcessing+0xbc>)
 800144a:	f00c fbc3 	bl	800dbd4 <iprintf>
  return;
 800144e:	bf00      	nop
}
 8001450:	3728      	adds	r7, #40	; 0x28
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	0800ef44 	.word	0x0800ef44
 800145c:	0800ef60 	.word	0x0800ef60
 8001460:	0800ef84 	.word	0x0800ef84
 8001464:	0800efa4 	.word	0x0800efa4
 8001468:	0800efd8 	.word	0x0800efd8

0800146c <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001474:	f002 f808 	bl	8003488 <HAL_GetTick>
 8001478:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001484:	d00a      	beq.n	800149c <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001486:	f002 f817 	bl	80034b8 <HAL_GetTickFreq>
 800148a:	4603      	mov	r3, r0
 800148c:	461a      	mov	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4413      	add	r3, r2
 8001492:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001494:	e002      	b.n	800149c <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001496:	f7ff fda9 	bl	8000fec <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 800149a:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800149c:	f001 fff4 	bl	8003488 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d8f4      	bhi.n	8001496 <HAL_Delay+0x2a>
  }
}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80014ba:	f04f 30ff 	mov.w	r0, #4294967295
 80014be:	f00c f90b 	bl	800d6d8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80014ca:	bf00      	nop
}
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80014de:	f04f 30ff 	mov.w	r0, #4294967295
 80014e2:	f00c f8f9 	bl	800d6d8 <UTIL_SEQ_Run>

  return;
 80014e6:	bf00      	nop
}
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80014f6:	2100      	movs	r1, #0
 80014f8:	2004      	movs	r0, #4
 80014fa:	f00c fa0b 	bl	800d914 <UTIL_SEQ_SetTask>
  return;
 80014fe:	bf00      	nop
}
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800150e:	2002      	movs	r0, #2
 8001510:	f00c fa6c 	bl	800d9ec <UTIL_SEQ_SetEvt>
  return;
 8001514:	bf00      	nop
}
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001524:	2002      	movs	r0, #2
 8001526:	f00c fa81 	bl	800da2c <UTIL_SEQ_WaitEvt>
  return;
 800152a:	bf00      	nop
}
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <LL_EXTI_EnableIT_0_31>:
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <LL_EXTI_EnableIT_0_31+0x24>)
 800153e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001542:	4905      	ldr	r1, [pc, #20]	; (8001558 <LL_EXTI_EnableIT_0_31+0x24>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4313      	orrs	r3, r2
 8001548:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	58000800 	.word	0x58000800

0800155c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4904      	ldr	r1, [pc, #16]	; (800157c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4313      	orrs	r3, r2
 800156e:	600b      	str	r3, [r1, #0]

}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	58000800 	.word	0x58000800

08001580 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001586:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <ReadRtcSsrValue+0x3c>)
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	b29b      	uxth	r3, r3
 800158c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <ReadRtcSsrValue+0x3c>)
 8001590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001592:	b29b      	uxth	r3, r3
 8001594:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001596:	e005      	b.n	80015a4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800159c:	4b07      	ldr	r3, [pc, #28]	; (80015bc <ReadRtcSsrValue+0x3c>)
 800159e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d1f5      	bne.n	8001598 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80015ac:	683b      	ldr	r3, [r7, #0]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40002800 	.word	0x40002800

080015c0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	460a      	mov	r2, r1
 80015ca:	71fb      	strb	r3, [r7, #7]
 80015cc:	4613      	mov	r3, r2
 80015ce:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80015d0:	79ba      	ldrb	r2, [r7, #6]
 80015d2:	491d      	ldr	r1, [pc, #116]	; (8001648 <LinkTimerAfter+0x88>)
 80015d4:	4613      	mov	r3, r2
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	4413      	add	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	440b      	add	r3, r1
 80015de:	3315      	adds	r3, #21
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	2b06      	cmp	r3, #6
 80015e8:	d009      	beq.n	80015fe <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80015ea:	7bfa      	ldrb	r2, [r7, #15]
 80015ec:	4916      	ldr	r1, [pc, #88]	; (8001648 <LinkTimerAfter+0x88>)
 80015ee:	4613      	mov	r3, r2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	4413      	add	r3, r2
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	440b      	add	r3, r1
 80015f8:	3314      	adds	r3, #20
 80015fa:	79fa      	ldrb	r2, [r7, #7]
 80015fc:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80015fe:	79fa      	ldrb	r2, [r7, #7]
 8001600:	4911      	ldr	r1, [pc, #68]	; (8001648 <LinkTimerAfter+0x88>)
 8001602:	4613      	mov	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4413      	add	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	440b      	add	r3, r1
 800160c:	3315      	adds	r3, #21
 800160e:	7bfa      	ldrb	r2, [r7, #15]
 8001610:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001612:	79fa      	ldrb	r2, [r7, #7]
 8001614:	490c      	ldr	r1, [pc, #48]	; (8001648 <LinkTimerAfter+0x88>)
 8001616:	4613      	mov	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	440b      	add	r3, r1
 8001620:	3314      	adds	r3, #20
 8001622:	79ba      	ldrb	r2, [r7, #6]
 8001624:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001626:	79ba      	ldrb	r2, [r7, #6]
 8001628:	4907      	ldr	r1, [pc, #28]	; (8001648 <LinkTimerAfter+0x88>)
 800162a:	4613      	mov	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4413      	add	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	440b      	add	r3, r1
 8001634:	3315      	adds	r3, #21
 8001636:	79fa      	ldrb	r2, [r7, #7]
 8001638:	701a      	strb	r2, [r3, #0]

  return;
 800163a:	bf00      	nop
}
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000980 	.word	0x20000980

0800164c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	460a      	mov	r2, r1
 8001656:	71fb      	strb	r3, [r7, #7]
 8001658:	4613      	mov	r3, r2
 800165a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 800165c:	4b29      	ldr	r3, [pc, #164]	; (8001704 <LinkTimerBefore+0xb8>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	79ba      	ldrb	r2, [r7, #6]
 8001664:	429a      	cmp	r2, r3
 8001666:	d032      	beq.n	80016ce <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001668:	79ba      	ldrb	r2, [r7, #6]
 800166a:	4927      	ldr	r1, [pc, #156]	; (8001708 <LinkTimerBefore+0xbc>)
 800166c:	4613      	mov	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4413      	add	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	440b      	add	r3, r1
 8001676:	3314      	adds	r3, #20
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 800167c:	7bfa      	ldrb	r2, [r7, #15]
 800167e:	4922      	ldr	r1, [pc, #136]	; (8001708 <LinkTimerBefore+0xbc>)
 8001680:	4613      	mov	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4413      	add	r3, r2
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	440b      	add	r3, r1
 800168a:	3315      	adds	r3, #21
 800168c:	79fa      	ldrb	r2, [r7, #7]
 800168e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001690:	79fa      	ldrb	r2, [r7, #7]
 8001692:	491d      	ldr	r1, [pc, #116]	; (8001708 <LinkTimerBefore+0xbc>)
 8001694:	4613      	mov	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4413      	add	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	440b      	add	r3, r1
 800169e:	3315      	adds	r3, #21
 80016a0:	79ba      	ldrb	r2, [r7, #6]
 80016a2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80016a4:	79fa      	ldrb	r2, [r7, #7]
 80016a6:	4918      	ldr	r1, [pc, #96]	; (8001708 <LinkTimerBefore+0xbc>)
 80016a8:	4613      	mov	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	440b      	add	r3, r1
 80016b2:	3314      	adds	r3, #20
 80016b4:	7bfa      	ldrb	r2, [r7, #15]
 80016b6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80016b8:	79ba      	ldrb	r2, [r7, #6]
 80016ba:	4913      	ldr	r1, [pc, #76]	; (8001708 <LinkTimerBefore+0xbc>)
 80016bc:	4613      	mov	r3, r2
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	4413      	add	r3, r2
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	440b      	add	r3, r1
 80016c6:	3314      	adds	r3, #20
 80016c8:	79fa      	ldrb	r2, [r7, #7]
 80016ca:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80016cc:	e014      	b.n	80016f8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80016ce:	79fa      	ldrb	r2, [r7, #7]
 80016d0:	490d      	ldr	r1, [pc, #52]	; (8001708 <LinkTimerBefore+0xbc>)
 80016d2:	4613      	mov	r3, r2
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	4413      	add	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	440b      	add	r3, r1
 80016dc:	3315      	adds	r3, #21
 80016de:	79ba      	ldrb	r2, [r7, #6]
 80016e0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80016e2:	79ba      	ldrb	r2, [r7, #6]
 80016e4:	4908      	ldr	r1, [pc, #32]	; (8001708 <LinkTimerBefore+0xbc>)
 80016e6:	4613      	mov	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	440b      	add	r3, r1
 80016f0:	3314      	adds	r3, #20
 80016f2:	79fa      	ldrb	r2, [r7, #7]
 80016f4:	701a      	strb	r2, [r3, #0]
  return;
 80016f6:	bf00      	nop
}
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000a10 	.word	0x20000a10
 8001708:	20000980 	.word	0x20000980

0800170c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001716:	4b4e      	ldr	r3, [pc, #312]	; (8001850 <linkTimer+0x144>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b06      	cmp	r3, #6
 800171e:	d118      	bne.n	8001752 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001720:	4b4b      	ldr	r3, [pc, #300]	; (8001850 <linkTimer+0x144>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4b4b      	ldr	r3, [pc, #300]	; (8001854 <linkTimer+0x148>)
 8001728:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800172a:	4a49      	ldr	r2, [pc, #292]	; (8001850 <linkTimer+0x144>)
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001730:	79fa      	ldrb	r2, [r7, #7]
 8001732:	4949      	ldr	r1, [pc, #292]	; (8001858 <linkTimer+0x14c>)
 8001734:	4613      	mov	r3, r2
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	4413      	add	r3, r2
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	440b      	add	r3, r1
 800173e:	3315      	adds	r3, #21
 8001740:	2206      	movs	r2, #6
 8001742:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001744:	4b45      	ldr	r3, [pc, #276]	; (800185c <linkTimer+0x150>)
 8001746:	f04f 32ff 	mov.w	r2, #4294967295
 800174a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	81fb      	strh	r3, [r7, #14]
 8001750:	e078      	b.n	8001844 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001752:	f000 f909 	bl	8001968 <ReturnTimeElapsed>
 8001756:	4603      	mov	r3, r0
 8001758:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800175a:	79fa      	ldrb	r2, [r7, #7]
 800175c:	493e      	ldr	r1, [pc, #248]	; (8001858 <linkTimer+0x14c>)
 800175e:	4613      	mov	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4413      	add	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	440b      	add	r3, r1
 8001768:	3308      	adds	r3, #8
 800176a:	6819      	ldr	r1, [r3, #0]
 800176c:	89fb      	ldrh	r3, [r7, #14]
 800176e:	79fa      	ldrb	r2, [r7, #7]
 8001770:	4419      	add	r1, r3
 8001772:	4839      	ldr	r0, [pc, #228]	; (8001858 <linkTimer+0x14c>)
 8001774:	4613      	mov	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	4403      	add	r3, r0
 800177e:	3308      	adds	r3, #8
 8001780:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001782:	79fa      	ldrb	r2, [r7, #7]
 8001784:	4934      	ldr	r1, [pc, #208]	; (8001858 <linkTimer+0x14c>)
 8001786:	4613      	mov	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4413      	add	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	440b      	add	r3, r1
 8001790:	3308      	adds	r3, #8
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001796:	4b2e      	ldr	r3, [pc, #184]	; (8001850 <linkTimer+0x144>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	4619      	mov	r1, r3
 800179e:	4a2e      	ldr	r2, [pc, #184]	; (8001858 <linkTimer+0x14c>)
 80017a0:	460b      	mov	r3, r1
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	440b      	add	r3, r1
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	4413      	add	r3, r2
 80017aa:	3308      	adds	r3, #8
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d337      	bcc.n	8001824 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80017b4:	4b26      	ldr	r3, [pc, #152]	; (8001850 <linkTimer+0x144>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80017ba:	7b7a      	ldrb	r2, [r7, #13]
 80017bc:	4926      	ldr	r1, [pc, #152]	; (8001858 <linkTimer+0x14c>)
 80017be:	4613      	mov	r3, r2
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	4413      	add	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	440b      	add	r3, r1
 80017c8:	3315      	adds	r3, #21
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80017ce:	e013      	b.n	80017f8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80017d0:	7b7a      	ldrb	r2, [r7, #13]
 80017d2:	4921      	ldr	r1, [pc, #132]	; (8001858 <linkTimer+0x14c>)
 80017d4:	4613      	mov	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4413      	add	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	440b      	add	r3, r1
 80017de:	3315      	adds	r3, #21
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80017e4:	7b7a      	ldrb	r2, [r7, #13]
 80017e6:	491c      	ldr	r1, [pc, #112]	; (8001858 <linkTimer+0x14c>)
 80017e8:	4613      	mov	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	440b      	add	r3, r1
 80017f2:	3315      	adds	r3, #21
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80017f8:	7b3b      	ldrb	r3, [r7, #12]
 80017fa:	2b06      	cmp	r3, #6
 80017fc:	d00b      	beq.n	8001816 <linkTimer+0x10a>
 80017fe:	7b3a      	ldrb	r2, [r7, #12]
 8001800:	4915      	ldr	r1, [pc, #84]	; (8001858 <linkTimer+0x14c>)
 8001802:	4613      	mov	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4413      	add	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	440b      	add	r3, r1
 800180c:	3308      	adds	r3, #8
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68ba      	ldr	r2, [r7, #8]
 8001812:	429a      	cmp	r2, r3
 8001814:	d2dc      	bcs.n	80017d0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001816:	7b7a      	ldrb	r2, [r7, #13]
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fecf 	bl	80015c0 <LinkTimerAfter>
 8001822:	e00f      	b.n	8001844 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <linkTimer+0x144>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	4611      	mov	r1, r2
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff0c 	bl	800164c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <linkTimer+0x144>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <linkTimer+0x148>)
 800183c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800183e:	4a04      	ldr	r2, [pc, #16]	; (8001850 <linkTimer+0x144>)
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001844:	89fb      	ldrh	r3, [r7, #14]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000a10 	.word	0x20000a10
 8001854:	20000a11 	.word	0x20000a11
 8001858:	20000980 	.word	0x20000980
 800185c:	20000a14 	.word	0x20000a14

08001860 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	460a      	mov	r2, r1
 800186a:	71fb      	strb	r3, [r7, #7]
 800186c:	4613      	mov	r3, r2
 800186e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001870:	4b39      	ldr	r3, [pc, #228]	; (8001958 <UnlinkTimer+0xf8>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	79fa      	ldrb	r2, [r7, #7]
 8001878:	429a      	cmp	r2, r3
 800187a:	d111      	bne.n	80018a0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 800187c:	4b36      	ldr	r3, [pc, #216]	; (8001958 <UnlinkTimer+0xf8>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4b36      	ldr	r3, [pc, #216]	; (800195c <UnlinkTimer+0xfc>)
 8001884:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001886:	79fa      	ldrb	r2, [r7, #7]
 8001888:	4935      	ldr	r1, [pc, #212]	; (8001960 <UnlinkTimer+0x100>)
 800188a:	4613      	mov	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4413      	add	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	440b      	add	r3, r1
 8001894:	3315      	adds	r3, #21
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4b2f      	ldr	r3, [pc, #188]	; (8001958 <UnlinkTimer+0xf8>)
 800189c:	701a      	strb	r2, [r3, #0]
 800189e:	e03e      	b.n	800191e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80018a0:	79fa      	ldrb	r2, [r7, #7]
 80018a2:	492f      	ldr	r1, [pc, #188]	; (8001960 <UnlinkTimer+0x100>)
 80018a4:	4613      	mov	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4413      	add	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	440b      	add	r3, r1
 80018ae:	3314      	adds	r3, #20
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80018b4:	79fa      	ldrb	r2, [r7, #7]
 80018b6:	492a      	ldr	r1, [pc, #168]	; (8001960 <UnlinkTimer+0x100>)
 80018b8:	4613      	mov	r3, r2
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	4413      	add	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	440b      	add	r3, r1
 80018c2:	3315      	adds	r3, #21
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80018c8:	79f9      	ldrb	r1, [r7, #7]
 80018ca:	7bfa      	ldrb	r2, [r7, #15]
 80018cc:	4824      	ldr	r0, [pc, #144]	; (8001960 <UnlinkTimer+0x100>)
 80018ce:	460b      	mov	r3, r1
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	440b      	add	r3, r1
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	4403      	add	r3, r0
 80018d8:	3315      	adds	r3, #21
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	b2d8      	uxtb	r0, r3
 80018de:	4920      	ldr	r1, [pc, #128]	; (8001960 <UnlinkTimer+0x100>)
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	440b      	add	r3, r1
 80018ea:	3315      	adds	r3, #21
 80018ec:	4602      	mov	r2, r0
 80018ee:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80018f0:	7bbb      	ldrb	r3, [r7, #14]
 80018f2:	2b06      	cmp	r3, #6
 80018f4:	d013      	beq.n	800191e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80018f6:	79f9      	ldrb	r1, [r7, #7]
 80018f8:	7bba      	ldrb	r2, [r7, #14]
 80018fa:	4819      	ldr	r0, [pc, #100]	; (8001960 <UnlinkTimer+0x100>)
 80018fc:	460b      	mov	r3, r1
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	440b      	add	r3, r1
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	4403      	add	r3, r0
 8001906:	3314      	adds	r3, #20
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	b2d8      	uxtb	r0, r3
 800190c:	4914      	ldr	r1, [pc, #80]	; (8001960 <UnlinkTimer+0x100>)
 800190e:	4613      	mov	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4413      	add	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	440b      	add	r3, r1
 8001918:	3314      	adds	r3, #20
 800191a:	4602      	mov	r2, r0
 800191c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800191e:	79fa      	ldrb	r2, [r7, #7]
 8001920:	490f      	ldr	r1, [pc, #60]	; (8001960 <UnlinkTimer+0x100>)
 8001922:	4613      	mov	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4413      	add	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	440b      	add	r3, r1
 800192c:	330c      	adds	r3, #12
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <UnlinkTimer+0xf8>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b06      	cmp	r3, #6
 800193a:	d107      	bne.n	800194c <UnlinkTimer+0xec>
 800193c:	79bb      	ldrb	r3, [r7, #6]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d104      	bne.n	800194c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <UnlinkTimer+0x104>)
 8001944:	f04f 32ff 	mov.w	r2, #4294967295
 8001948:	601a      	str	r2, [r3, #0]
  }

  return;
 800194a:	bf00      	nop
 800194c:	bf00      	nop
}
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	20000a10 	.word	0x20000a10
 800195c:	20000a11 	.word	0x20000a11
 8001960:	20000980 	.word	0x20000980
 8001964:	20000a14 	.word	0x20000a14

08001968 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800196e:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <ReturnTimeElapsed+0x70>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001976:	d026      	beq.n	80019c6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001978:	f7ff fe02 	bl	8001580 <ReadRtcSsrValue>
 800197c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800197e:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <ReturnTimeElapsed+0x70>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	429a      	cmp	r2, r3
 8001986:	d805      	bhi.n	8001994 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001988:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <ReturnTimeElapsed+0x70>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	e00a      	b.n	80019aa <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <ReturnTimeElapsed+0x74>)
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80019a0:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <ReturnTimeElapsed+0x70>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	4413      	add	r3, r2
 80019a8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80019aa:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <ReturnTimeElapsed+0x78>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	fb02 f303 	mul.w	r3, r2, r3
 80019b6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80019b8:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <ReturnTimeElapsed+0x7c>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	40d3      	lsrs	r3, r2
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	e001      	b.n	80019ca <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	b29b      	uxth	r3, r3
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000a14 	.word	0x20000a14
 80019dc:	20000a1c 	.word	0x20000a1c
 80019e0:	20000a1a 	.word	0x20000a1a
 80019e4:	20000a19 	.word	0x20000a19

080019e8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d108      	bne.n	8001a0a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80019f8:	f7ff fdc2 	bl	8001580 <ReadRtcSsrValue>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4a21      	ldr	r2, [pc, #132]	; (8001a84 <RestartWakeupCounter+0x9c>)
 8001a00:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001a02:	2003      	movs	r0, #3
 8001a04:	f003 f8cd 	bl	8004ba2 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001a08:	e039      	b.n	8001a7e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d803      	bhi.n	8001a18 <RestartWakeupCounter+0x30>
 8001a10:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <RestartWakeupCounter+0xa0>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d002      	beq.n	8001a1e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001a18:	88fb      	ldrh	r3, [r7, #6]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001a1e:	bf00      	nop
 8001a20:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <RestartWakeupCounter+0xa4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f8      	beq.n	8001a20 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001a2e:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <RestartWakeupCounter+0xa4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <RestartWakeupCounter+0xa4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001a3e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001a40:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <RestartWakeupCounter+0xa8>)
 8001a42:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a46:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001a48:	2003      	movs	r0, #3
 8001a4a:	f003 f8b8 	bl	8004bbe <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <RestartWakeupCounter+0xac>)
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	0c1b      	lsrs	r3, r3, #16
 8001a54:	041b      	lsls	r3, r3, #16
 8001a56:	88fa      	ldrh	r2, [r7, #6]
 8001a58:	490e      	ldr	r1, [pc, #56]	; (8001a94 <RestartWakeupCounter+0xac>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001a5e:	f7ff fd8f 	bl	8001580 <ReadRtcSsrValue>
 8001a62:	4603      	mov	r3, r0
 8001a64:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <RestartWakeupCounter+0x9c>)
 8001a66:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <RestartWakeupCounter+0xa4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <RestartWakeupCounter+0xa4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a76:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001a78:	f3af 8000 	nop.w
  return ;
 8001a7c:	bf00      	nop
}
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000a14 	.word	0x20000a14
 8001a88:	20000a19 	.word	0x20000a19
 8001a8c:	20000b18 	.word	0x20000b18
 8001a90:	58000800 	.word	0x58000800
 8001a94:	40002800 	.word	0x40002800

08001a98 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001a9e:	4b45      	ldr	r3, [pc, #276]	; (8001bb4 <RescheduleTimerList+0x11c>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aaa:	d107      	bne.n	8001abc <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001aac:	bf00      	nop
 8001aae:	4b42      	ldr	r3, [pc, #264]	; (8001bb8 <RescheduleTimerList+0x120>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f8      	bne.n	8001aae <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001abc:	4b3e      	ldr	r3, [pc, #248]	; (8001bb8 <RescheduleTimerList+0x120>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	4b3d      	ldr	r3, [pc, #244]	; (8001bb8 <RescheduleTimerList+0x120>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aca:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001acc:	4b3b      	ldr	r3, [pc, #236]	; (8001bbc <RescheduleTimerList+0x124>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001ad2:	7bfa      	ldrb	r2, [r7, #15]
 8001ad4:	493a      	ldr	r1, [pc, #232]	; (8001bc0 <RescheduleTimerList+0x128>)
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	440b      	add	r3, r1
 8001ae0:	3308      	adds	r3, #8
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001ae6:	f7ff ff3f 	bl	8001968 <ReturnTimeElapsed>
 8001aea:	4603      	mov	r3, r0
 8001aec:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001aee:	88fb      	ldrh	r3, [r7, #6]
 8001af0:	68ba      	ldr	r2, [r7, #8]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d205      	bcs.n	8001b02 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001afa:	4b32      	ldr	r3, [pc, #200]	; (8001bc4 <RescheduleTimerList+0x12c>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	701a      	strb	r2, [r3, #0]
 8001b00:	e04d      	b.n	8001b9e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	4a30      	ldr	r2, [pc, #192]	; (8001bc8 <RescheduleTimerList+0x130>)
 8001b06:	8812      	ldrh	r2, [r2, #0]
 8001b08:	b292      	uxth	r2, r2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d906      	bls.n	8001b22 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001b14:	4b2c      	ldr	r3, [pc, #176]	; (8001bc8 <RescheduleTimerList+0x130>)
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001b1a:	4b2a      	ldr	r3, [pc, #168]	; (8001bc4 <RescheduleTimerList+0x12c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
 8001b20:	e03d      	b.n	8001b9e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	88fb      	ldrh	r3, [r7, #6]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001b2c:	4b25      	ldr	r3, [pc, #148]	; (8001bc4 <RescheduleTimerList+0x12c>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b32:	e034      	b.n	8001b9e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001b34:	7bfa      	ldrb	r2, [r7, #15]
 8001b36:	4922      	ldr	r1, [pc, #136]	; (8001bc0 <RescheduleTimerList+0x128>)
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	440b      	add	r3, r1
 8001b42:	3308      	adds	r3, #8
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d20a      	bcs.n	8001b62 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001b4c:	7bfa      	ldrb	r2, [r7, #15]
 8001b4e:	491c      	ldr	r1, [pc, #112]	; (8001bc0 <RescheduleTimerList+0x128>)
 8001b50:	4613      	mov	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4413      	add	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	440b      	add	r3, r1
 8001b5a:	3308      	adds	r3, #8
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	e013      	b.n	8001b8a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001b62:	7bfa      	ldrb	r2, [r7, #15]
 8001b64:	4916      	ldr	r1, [pc, #88]	; (8001bc0 <RescheduleTimerList+0x128>)
 8001b66:	4613      	mov	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	440b      	add	r3, r1
 8001b70:	3308      	adds	r3, #8
 8001b72:	6819      	ldr	r1, [r3, #0]
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	7bfa      	ldrb	r2, [r7, #15]
 8001b78:	1ac9      	subs	r1, r1, r3
 8001b7a:	4811      	ldr	r0, [pc, #68]	; (8001bc0 <RescheduleTimerList+0x128>)
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4403      	add	r3, r0
 8001b86:	3308      	adds	r3, #8
 8001b88:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001b8a:	7bfa      	ldrb	r2, [r7, #15]
 8001b8c:	490c      	ldr	r1, [pc, #48]	; (8001bc0 <RescheduleTimerList+0x128>)
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	440b      	add	r3, r1
 8001b98:	3315      	adds	r3, #21
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	2b06      	cmp	r3, #6
 8001ba2:	d1c7      	bne.n	8001b34 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001ba4:	89bb      	ldrh	r3, [r7, #12]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff ff1e 	bl	80019e8 <RestartWakeupCounter>

  return ;
 8001bac:	bf00      	nop
}
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40002800 	.word	0x40002800
 8001bb8:	20000b18 	.word	0x20000b18
 8001bbc:	20000a10 	.word	0x20000a10
 8001bc0:	20000980 	.word	0x20000980
 8001bc4:	20000a18 	.word	0x20000a18
 8001bc8:	20000a1e 	.word	0x20000a1e

08001bcc <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	; 0x28
 8001bd0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bd2:	f3ef 8310 	mrs	r3, PRIMASK
 8001bd6:	617b      	str	r3, [r7, #20]
  return(result);
 8001bd8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001bdc:	b672      	cpsid	i
}
 8001bde:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001be0:	4b59      	ldr	r3, [pc, #356]	; (8001d48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	22ca      	movs	r2, #202	; 0xca
 8001be6:	625a      	str	r2, [r3, #36]	; 0x24
 8001be8:	4b57      	ldr	r3, [pc, #348]	; (8001d48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2253      	movs	r2, #83	; 0x53
 8001bee:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001bf0:	4b55      	ldr	r3, [pc, #340]	; (8001d48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	4b54      	ldr	r3, [pc, #336]	; (8001d48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bfe:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001c00:	4b52      	ldr	r3, [pc, #328]	; (8001d4c <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001c08:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c0c:	4950      	ldr	r1, [pc, #320]	; (8001d50 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c0e:	4613      	mov	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	440b      	add	r3, r1
 8001c18:	330c      	adds	r3, #12
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d16e      	bne.n	8001d00 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001c22:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c26:	494a      	ldr	r1, [pc, #296]	; (8001d50 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c28:	4613      	mov	r3, r2
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4413      	add	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	440b      	add	r3, r1
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001c36:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c3a:	4945      	ldr	r1, [pc, #276]	; (8001d50 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	4413      	add	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	440b      	add	r3, r1
 8001c46:	3310      	adds	r3, #16
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001c4c:	4b41      	ldr	r3, [pc, #260]	; (8001d54 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d04c      	beq.n	8001cf0 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001c56:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c5a:	493d      	ldr	r1, [pc, #244]	; (8001d50 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	440b      	add	r3, r1
 8001c66:	330d      	adds	r3, #13
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d124      	bne.n	8001cba <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001c70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c74:	2101      	movs	r1, #1
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fdf2 	bl	8001860 <UnlinkTimer>
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	f383 8810 	msr	PRIMASK, r3
}
 8001c86:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001c88:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001c8c:	4930      	ldr	r1, [pc, #192]	; (8001d50 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	440b      	add	r3, r1
 8001c98:	3304      	adds	r3, #4
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 f9b8 	bl	8002018 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001ca8:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	22ca      	movs	r2, #202	; 0xca
 8001cae:	625a      	str	r2, [r3, #36]	; 0x24
 8001cb0:	4b25      	ldr	r3, [pc, #148]	; (8001d48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2253      	movs	r2, #83	; 0x53
 8001cb6:	625a      	str	r2, [r3, #36]	; 0x24
 8001cb8:	e012      	b.n	8001ce0 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f383 8810 	msr	PRIMASK, r3
}
 8001cc4:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001cc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 f920 	bl	8001f10 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001cd0:	4b1d      	ldr	r3, [pc, #116]	; (8001d48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	22ca      	movs	r2, #202	; 0xca
 8001cd6:	625a      	str	r2, [r3, #36]	; 0x24
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2253      	movs	r2, #83	; 0x53
 8001cde:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001ce0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ce4:	69fa      	ldr	r2, [r7, #28]
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	69b8      	ldr	r0, [r7, #24]
 8001cea:	f000 fa1b 	bl	8002124 <HW_TS_RTC_Int_AppNot>
 8001cee:	e022      	b.n	8001d36 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001cf0:	f7ff fed2 	bl	8001a98 <RescheduleTimerList>
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f383 8810 	msr	PRIMASK, r3
}
 8001cfe:	e01a      	b.n	8001d36 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001d00:	bf00      	nop
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f8      	beq.n	8001d02 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001d10:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001d20:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001d22:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001d24:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f383 8810 	msr	PRIMASK, r3
}
 8001d34:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001d36:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	22ff      	movs	r2, #255	; 0xff
 8001d3c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001d3e:	bf00      	nop
}
 8001d40:	3728      	adds	r7, #40	; 0x28
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000b18 	.word	0x20000b18
 8001d4c:	20000a10 	.word	0x20000a10
 8001d50:	20000980 	.word	0x20000980
 8001d54:	20000a18 	.word	0x20000a18
 8001d58:	58000800 	.word	0x58000800

08001d5c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	6039      	str	r1, [r7, #0]
 8001d66:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001d68:	4b5e      	ldr	r3, [pc, #376]	; (8001ee4 <HW_TS_Init+0x188>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	22ca      	movs	r2, #202	; 0xca
 8001d6e:	625a      	str	r2, [r3, #36]	; 0x24
 8001d70:	4b5c      	ldr	r3, [pc, #368]	; (8001ee4 <HW_TS_Init+0x188>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2253      	movs	r2, #83	; 0x53
 8001d76:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001d78:	4b5b      	ldr	r3, [pc, #364]	; (8001ee8 <HW_TS_Init+0x18c>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	4a5a      	ldr	r2, [pc, #360]	; (8001ee8 <HW_TS_Init+0x18c>)
 8001d7e:	f043 0320 	orr.w	r3, r3, #32
 8001d82:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001d84:	4b58      	ldr	r3, [pc, #352]	; (8001ee8 <HW_TS_Init+0x18c>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	f1c3 0304 	rsb	r3, r3, #4
 8001d94:	b2da      	uxtb	r2, r3
 8001d96:	4b55      	ldr	r3, [pc, #340]	; (8001eec <HW_TS_Init+0x190>)
 8001d98:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001d9a:	4b53      	ldr	r3, [pc, #332]	; (8001ee8 <HW_TS_Init+0x18c>)
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001da2:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001da6:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	fa92 f2a2 	rbit	r2, r2
 8001dae:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	2a00      	cmp	r2, #0
 8001db8:	d101      	bne.n	8001dbe <HW_TS_Init+0x62>
  {
    return 32U;
 8001dba:	2220      	movs	r2, #32
 8001dbc:	e003      	b.n	8001dc6 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	fab2 f282 	clz	r2, r2
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	40d3      	lsrs	r3, r2
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	3301      	adds	r3, #1
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4b48      	ldr	r3, [pc, #288]	; (8001ef0 <HW_TS_Init+0x194>)
 8001dd0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001dd2:	4b45      	ldr	r3, [pc, #276]	; (8001ee8 <HW_TS_Init+0x18c>)
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	3301      	adds	r3, #1
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	4b44      	ldr	r3, [pc, #272]	; (8001ef4 <HW_TS_Init+0x198>)
 8001de4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001de6:	4b43      	ldr	r3, [pc, #268]	; (8001ef4 <HW_TS_Init+0x198>)
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	4a40      	ldr	r2, [pc, #256]	; (8001ef0 <HW_TS_Init+0x194>)
 8001dee:	7812      	ldrb	r2, [r2, #0]
 8001df0:	fb02 f303 	mul.w	r3, r2, r3
 8001df4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001df8:	4a3c      	ldr	r2, [pc, #240]	; (8001eec <HW_TS_Init+0x190>)
 8001dfa:	7812      	ldrb	r2, [r2, #0]
 8001dfc:	40d3      	lsrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d904      	bls.n	8001e14 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001e0a:	4b3b      	ldr	r3, [pc, #236]	; (8001ef8 <HW_TS_Init+0x19c>)
 8001e0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e10:	801a      	strh	r2, [r3, #0]
 8001e12:	e003      	b.n	8001e1c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	4b37      	ldr	r3, [pc, #220]	; (8001ef8 <HW_TS_Init+0x19c>)
 8001e1a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001e1c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001e20:	f7ff fb9c 	bl	800155c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001e24:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001e28:	f7ff fb84 	bl	8001534 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d13d      	bne.n	8001eae <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001e32:	4b32      	ldr	r3, [pc, #200]	; (8001efc <HW_TS_Init+0x1a0>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001e38:	4b31      	ldr	r3, [pc, #196]	; (8001f00 <HW_TS_Init+0x1a4>)
 8001e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e3e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001e40:	2300      	movs	r3, #0
 8001e42:	77fb      	strb	r3, [r7, #31]
 8001e44:	e00c      	b.n	8001e60 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001e46:	7ffa      	ldrb	r2, [r7, #31]
 8001e48:	492e      	ldr	r1, [pc, #184]	; (8001f04 <HW_TS_Init+0x1a8>)
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	4413      	add	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	440b      	add	r3, r1
 8001e54:	330c      	adds	r3, #12
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001e5a:	7ffb      	ldrb	r3, [r7, #31]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	77fb      	strb	r3, [r7, #31]
 8001e60:	7ffb      	ldrb	r3, [r7, #31]
 8001e62:	2b05      	cmp	r3, #5
 8001e64:	d9ef      	bls.n	8001e46 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001e66:	4b28      	ldr	r3, [pc, #160]	; (8001f08 <HW_TS_Init+0x1ac>)
 8001e68:	2206      	movs	r2, #6
 8001e6a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <HW_TS_Init+0x188>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <HW_TS_Init+0x188>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e7a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001e7c:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <HW_TS_Init+0x188>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <HW_TS_Init+0x188>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001e8c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001e8e:	4b1f      	ldr	r3, [pc, #124]	; (8001f0c <HW_TS_Init+0x1b0>)
 8001e90:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e94:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001e96:	2003      	movs	r0, #3
 8001e98:	f002 fe91 	bl	8004bbe <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HW_TS_Init+0x188>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <HW_TS_Init+0x188>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	e009      	b.n	8001ec2 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <HW_TS_Init+0x188>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d002      	beq.n	8001ec2 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001ebc:	2003      	movs	r0, #3
 8001ebe:	f002 fe70 	bl	8004ba2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001ec2:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <HW_TS_Init+0x188>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	22ff      	movs	r2, #255	; 0xff
 8001ec8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2103      	movs	r1, #3
 8001ece:	2003      	movs	r0, #3
 8001ed0:	f002 fe25 	bl	8004b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001ed4:	2003      	movs	r0, #3
 8001ed6:	f002 fe3c 	bl	8004b52 <HAL_NVIC_EnableIRQ>

  return;
 8001eda:	bf00      	nop
}
 8001edc:	3720      	adds	r7, #32
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000b18 	.word	0x20000b18
 8001ee8:	40002800 	.word	0x40002800
 8001eec:	20000a19 	.word	0x20000a19
 8001ef0:	20000a1a 	.word	0x20000a1a
 8001ef4:	20000a1c 	.word	0x20000a1c
 8001ef8:	20000a1e 	.word	0x20000a1e
 8001efc:	20000a18 	.word	0x20000a18
 8001f00:	20000a14 	.word	0x20000a14
 8001f04:	20000980 	.word	0x20000980
 8001f08:	20000a10 	.word	0x20000a10
 8001f0c:	58000800 	.word	0x58000800

08001f10 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f1a:	f3ef 8310 	mrs	r3, PRIMASK
 8001f1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f20:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001f22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f24:	b672      	cpsid	i
}
 8001f26:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001f28:	2003      	movs	r0, #3
 8001f2a:	f002 fe20 	bl	8004b6e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f2e:	4b34      	ldr	r3, [pc, #208]	; (8002000 <HW_TS_Stop+0xf0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	22ca      	movs	r2, #202	; 0xca
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24
 8001f36:	4b32      	ldr	r3, [pc, #200]	; (8002000 <HW_TS_Stop+0xf0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2253      	movs	r2, #83	; 0x53
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001f3e:	79fa      	ldrb	r2, [r7, #7]
 8001f40:	4930      	ldr	r1, [pc, #192]	; (8002004 <HW_TS_Stop+0xf4>)
 8001f42:	4613      	mov	r3, r2
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	4413      	add	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	440b      	add	r3, r1
 8001f4c:	330c      	adds	r3, #12
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d142      	bne.n	8001fdc <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fc80 	bl	8001860 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001f60:	4b29      	ldr	r3, [pc, #164]	; (8002008 <HW_TS_Stop+0xf8>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f66:	7cfb      	ldrb	r3, [r7, #19]
 8001f68:	2b06      	cmp	r3, #6
 8001f6a:	d12f      	bne.n	8001fcc <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001f6c:	4b27      	ldr	r3, [pc, #156]	; (800200c <HW_TS_Stop+0xfc>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f78:	d107      	bne.n	8001f8a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001f7a:	bf00      	nop
 8001f7c:	4b20      	ldr	r3, [pc, #128]	; (8002000 <HW_TS_Stop+0xf0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f8      	bne.n	8001f7c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <HW_TS_Stop+0xf0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <HW_TS_Stop+0xf0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f98:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001f9a:	bf00      	nop
 8001f9c:	4b18      	ldr	r3, [pc, #96]	; (8002000 <HW_TS_Stop+0xf0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f8      	beq.n	8001f9c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <HW_TS_Stop+0xf0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4b13      	ldr	r3, [pc, #76]	; (8002000 <HW_TS_Stop+0xf0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001fba:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001fbc:	4b14      	ldr	r3, [pc, #80]	; (8002010 <HW_TS_Stop+0x100>)
 8001fbe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001fc2:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001fc4:	2003      	movs	r0, #3
 8001fc6:	f002 fdfa 	bl	8004bbe <HAL_NVIC_ClearPendingIRQ>
 8001fca:	e007      	b.n	8001fdc <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <HW_TS_Stop+0x104>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	7cfa      	ldrb	r2, [r7, #19]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d001      	beq.n	8001fdc <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001fd8:	f7ff fd5e 	bl	8001a98 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001fdc:	4b08      	ldr	r3, [pc, #32]	; (8002000 <HW_TS_Stop+0xf0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	22ff      	movs	r2, #255	; 0xff
 8001fe2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001fe4:	2003      	movs	r0, #3
 8001fe6:	f002 fdb4 	bl	8004b52 <HAL_NVIC_EnableIRQ>
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	f383 8810 	msr	PRIMASK, r3
}
 8001ff4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001ff6:	bf00      	nop
}
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000b18 	.word	0x20000b18
 8002004:	20000980 	.word	0x20000980
 8002008:	20000a10 	.word	0x20000a10
 800200c:	40002800 	.word	0x40002800
 8002010:	58000800 	.word	0x58000800
 8002014:	20000a11 	.word	0x20000a11

08002018 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	6039      	str	r1, [r7, #0]
 8002022:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002024:	79fa      	ldrb	r2, [r7, #7]
 8002026:	493b      	ldr	r1, [pc, #236]	; (8002114 <HW_TS_Start+0xfc>)
 8002028:	4613      	mov	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	440b      	add	r3, r1
 8002032:	330c      	adds	r3, #12
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d103      	bne.n	8002044 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff ff66 	bl	8001f10 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002044:	f3ef 8310 	mrs	r3, PRIMASK
 8002048:	60fb      	str	r3, [r7, #12]
  return(result);
 800204a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800204c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800204e:	b672      	cpsid	i
}
 8002050:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002052:	2003      	movs	r0, #3
 8002054:	f002 fd8b 	bl	8004b6e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002058:	4b2f      	ldr	r3, [pc, #188]	; (8002118 <HW_TS_Start+0x100>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	22ca      	movs	r2, #202	; 0xca
 800205e:	625a      	str	r2, [r3, #36]	; 0x24
 8002060:	4b2d      	ldr	r3, [pc, #180]	; (8002118 <HW_TS_Start+0x100>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2253      	movs	r2, #83	; 0x53
 8002066:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002068:	79fa      	ldrb	r2, [r7, #7]
 800206a:	492a      	ldr	r1, [pc, #168]	; (8002114 <HW_TS_Start+0xfc>)
 800206c:	4613      	mov	r3, r2
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	4413      	add	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	440b      	add	r3, r1
 8002076:	330c      	adds	r3, #12
 8002078:	2202      	movs	r2, #2
 800207a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800207c:	79fa      	ldrb	r2, [r7, #7]
 800207e:	4925      	ldr	r1, [pc, #148]	; (8002114 <HW_TS_Start+0xfc>)
 8002080:	4613      	mov	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4413      	add	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	440b      	add	r3, r1
 800208a:	3308      	adds	r3, #8
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002090:	79fa      	ldrb	r2, [r7, #7]
 8002092:	4920      	ldr	r1, [pc, #128]	; (8002114 <HW_TS_Start+0xfc>)
 8002094:	4613      	mov	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	440b      	add	r3, r1
 800209e:	3304      	adds	r3, #4
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fb30 	bl	800170c <linkTimer>
 80020ac:	4603      	mov	r3, r0
 80020ae:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80020b0:	4b1a      	ldr	r3, [pc, #104]	; (800211c <HW_TS_Start+0x104>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80020b6:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <HW_TS_Start+0x108>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	7c7a      	ldrb	r2, [r7, #17]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d002      	beq.n	80020c8 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80020c2:	f7ff fce9 	bl	8001a98 <RescheduleTimerList>
 80020c6:	e013      	b.n	80020f0 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80020c8:	79fa      	ldrb	r2, [r7, #7]
 80020ca:	4912      	ldr	r1, [pc, #72]	; (8002114 <HW_TS_Start+0xfc>)
 80020cc:	4613      	mov	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4413      	add	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	440b      	add	r3, r1
 80020d6:	3308      	adds	r3, #8
 80020d8:	6819      	ldr	r1, [r3, #0]
 80020da:	8a7b      	ldrh	r3, [r7, #18]
 80020dc:	79fa      	ldrb	r2, [r7, #7]
 80020de:	1ac9      	subs	r1, r1, r3
 80020e0:	480c      	ldr	r0, [pc, #48]	; (8002114 <HW_TS_Start+0xfc>)
 80020e2:	4613      	mov	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4403      	add	r3, r0
 80020ec:	3308      	adds	r3, #8
 80020ee:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80020f0:	4b09      	ldr	r3, [pc, #36]	; (8002118 <HW_TS_Start+0x100>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	22ff      	movs	r2, #255	; 0xff
 80020f6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80020f8:	2003      	movs	r0, #3
 80020fa:	f002 fd2a 	bl	8004b52 <HAL_NVIC_EnableIRQ>
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	f383 8810 	msr	PRIMASK, r3
}
 8002108:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800210a:	bf00      	nop
}
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000980 	.word	0x20000980
 8002118:	20000b18 	.word	0x20000b18
 800211c:	20000a10 	.word	0x20000a10
 8002120:	20000a11 	.word	0x20000a11

08002124 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	460b      	mov	r3, r1
 800212e:	607a      	str	r2, [r7, #4]
 8002130:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4798      	blx	r3

  return;
 8002136:	bf00      	nop
}
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	4603      	mov	r3, r0
 800214c:	73fb      	strb	r3, [r7, #15]
 800214e:	4613      	mov	r3, r2
 8002150:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8002156:	2300      	movs	r3, #0
 8002158:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10e      	bne.n	800217e <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8002160:	4a17      	ldr	r2, [pc, #92]	; (80021c0 <HW_UART_Transmit_DMA+0x80>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8002166:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <HW_UART_Transmit_DMA+0x84>)
 8002168:	4a17      	ldr	r2, [pc, #92]	; (80021c8 <HW_UART_Transmit_DMA+0x88>)
 800216a:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 800216c:	89bb      	ldrh	r3, [r7, #12]
 800216e:	461a      	mov	r2, r3
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	4814      	ldr	r0, [pc, #80]	; (80021c4 <HW_UART_Transmit_DMA+0x84>)
 8002174:	f006 f94a 	bl	800840c <HAL_UART_Transmit_DMA>
 8002178:	4603      	mov	r3, r0
 800217a:	75fb      	strb	r3, [r7, #23]
            break;
 800217c:	e000      	b.n	8002180 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 800217e:	bf00      	nop
    }

    switch (hal_status)
 8002180:	7dfb      	ldrb	r3, [r7, #23]
 8002182:	2b03      	cmp	r3, #3
 8002184:	d816      	bhi.n	80021b4 <HW_UART_Transmit_DMA+0x74>
 8002186:	a201      	add	r2, pc, #4	; (adr r2, 800218c <HW_UART_Transmit_DMA+0x4c>)
 8002188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218c:	0800219d 	.word	0x0800219d
 8002190:	080021a3 	.word	0x080021a3
 8002194:	080021a9 	.word	0x080021a9
 8002198:	080021af 	.word	0x080021af
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 800219c:	2300      	movs	r3, #0
 800219e:	75bb      	strb	r3, [r7, #22]
            break;
 80021a0:	e009      	b.n	80021b6 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80021a2:	2301      	movs	r3, #1
 80021a4:	75bb      	strb	r3, [r7, #22]
            break;
 80021a6:	e006      	b.n	80021b6 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80021a8:	2302      	movs	r3, #2
 80021aa:	75bb      	strb	r3, [r7, #22]
            break;
 80021ac:	e003      	b.n	80021b6 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80021ae:	2303      	movs	r3, #3
 80021b0:	75bb      	strb	r3, [r7, #22]
            break;
 80021b2:	e000      	b.n	80021b6 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 80021b4:	bf00      	nop
    }

    return hw_status;
 80021b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000a20 	.word	0x20000a20
 80021c4:	20000b3c 	.word	0x20000b3c
 80021c8:	40013800 	.word	0x40013800

080021cc <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	461a      	mov	r2, r3
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_UART_TxCpltCallback+0x34>)
 80021dc:	429a      	cmp	r2, r3
 80021de:	d107      	bne.n	80021f0 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <HAL_UART_TxCpltCallback+0x38>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_UART_TxCpltCallback+0x38>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4798      	blx	r3
            }
            break;
 80021ee:	e001      	b.n	80021f4 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 80021f0:	bf00      	nop
 80021f2:	e000      	b.n	80021f6 <HAL_UART_TxCpltCallback+0x2a>
            break;
 80021f4:	bf00      	nop
    }

    return;
 80021f6:	bf00      	nop
}
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40013800 	.word	0x40013800
 8002204:	20000a20 	.word	0x20000a20

08002208 <LL_RCC_LSE_SetDriveCapability>:
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002218:	f023 0218 	bic.w	r2, r3, #24
 800221c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <LL_AHB1_GRP1_EnableClock>:
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800223c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002240:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002242:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4313      	orrs	r3, r2
 800224a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800224c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002250:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4013      	ands	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002258:	68fb      	ldr	r3, [r7, #12]
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <LL_AHB2_GRP1_EnableClock>:
{
 8002266:	b480      	push	{r7}
 8002268:	b085      	sub	sp, #20
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800226e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002272:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002274:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4313      	orrs	r3, r2
 800227c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800227e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002282:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4013      	ands	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800228a:	68fb      	ldr	r3, [r7, #12]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <adxl_write>:
float xg,yg,zg;
uint16_t acc_value = 0;
int16_t readAS7026GGPPG();
uint8_t readAS7026GGByte(uint8_t address);

void adxl_write (uint8_t reg, uint8_t value){
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af02      	add	r7, sp, #8
 800229e:	4603      	mov	r3, r0
 80022a0:	460a      	mov	r2, r1
 80022a2:	71fb      	strb	r3, [r7, #7]
 80022a4:	4613      	mov	r3, r2
 80022a6:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0]=reg;
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	733b      	strb	r3, [r7, #12]
	data[1]=value;
 80022ac:	79bb      	ldrb	r3, [r7, #6]
 80022ae:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c3, adxl_address, data, 2, 10);
 80022b0:	f107 020c 	add.w	r2, r7, #12
 80022b4:	230a      	movs	r3, #10
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	2302      	movs	r3, #2
 80022ba:	21a6      	movs	r1, #166	; 0xa6
 80022bc:	4803      	ldr	r0, [pc, #12]	; (80022cc <adxl_write+0x34>)
 80022be:	f003 fa15 	bl	80056ec <HAL_I2C_Master_Transmit>

}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000a88 	.word	0x20000a88

080022d0 <adxl_read>:

void adxl_read (uint8_t reg, uint8_t numberofbytes){
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af04      	add	r7, sp, #16
 80022d6:	4603      	mov	r3, r0
 80022d8:	460a      	mov	r2, r1
 80022da:	71fb      	strb	r3, [r7, #7]
 80022dc:	4613      	mov	r3, r2
 80022de:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Read(&hi2c3, adxl_address, reg, 1, data_rec, numberofbytes, 100);
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	79bb      	ldrb	r3, [r7, #6]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	2164      	movs	r1, #100	; 0x64
 80022ea:	9102      	str	r1, [sp, #8]
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	4b05      	ldr	r3, [pc, #20]	; (8002304 <adxl_read+0x34>)
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	2301      	movs	r3, #1
 80022f4:	21a6      	movs	r1, #166	; 0xa6
 80022f6:	4804      	ldr	r0, [pc, #16]	; (8002308 <adxl_read+0x38>)
 80022f8:	f003 faec 	bl	80058d4 <HAL_I2C_Mem_Read>

}
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20001770 	.word	0x20001770
 8002308:	20000a88 	.word	0x20000a88

0800230c <adxl_init>:

void adxl_init (void){
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
	adxl_read(0x00,1); //This register should holds a fixed device ID code of 0xE5
 8002310:	2101      	movs	r1, #1
 8002312:	2000      	movs	r0, #0
 8002314:	f7ff ffdc 	bl	80022d0 <adxl_read>

	adxl_write(0x2d, 0); //reset all bits
 8002318:	2100      	movs	r1, #0
 800231a:	202d      	movs	r0, #45	; 0x2d
 800231c:	f7ff ffbc 	bl	8002298 <adxl_write>
	adxl_write(0x2d, 0x08); //measure and weakeup 8hz
 8002320:	2108      	movs	r1, #8
 8002322:	202d      	movs	r0, #45	; 0x2d
 8002324:	f7ff ffb8 	bl	8002298 <adxl_write>

	adxl_write(0x31,0x01); //data format range = +-4g
 8002328:	2101      	movs	r1, #1
 800232a:	2031      	movs	r0, #49	; 0x31
 800232c:	f7ff ffb4 	bl	8002298 <adxl_write>
}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}

08002334 <ADC_Select_CH3>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ADC_Select_CH3(void){
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 800233a:	463b      	mov	r3, r7
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
 8002348:	615a      	str	r2, [r3, #20]
	sConfig.Channel = ADC_CHANNEL_3;
 800234a:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <ADC_Select_CH3+0x4c>)
 800234c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800234e:	2306      	movs	r3, #6
 8002350:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8002352:	2302      	movs	r3, #2
 8002354:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002356:	237f      	movs	r3, #127	; 0x7f
 8002358:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800235a:	2304      	movs	r3, #4
 800235c:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002362:	463b      	mov	r3, r7
 8002364:	4619      	mov	r1, r3
 8002366:	4807      	ldr	r0, [pc, #28]	; (8002384 <ADC_Select_CH3+0x50>)
 8002368:	f001 fd42 	bl	8003df0 <HAL_ADC_ConfigChannel>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <ADC_Select_CH3+0x42>
	{
	  Error_Handler();
 8002372:	f000 fc49 	bl	8002c08 <Error_Handler>
	}
}
 8002376:	bf00      	nop
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	0c900008 	.word	0x0c900008
 8002384:	20000a24 	.word	0x20000a24

08002388 <ADC_Select_CH6>:

void ADC_Select_CH6(void){
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 800238e:	463b      	mov	r3, r7
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]
 800239c:	615a      	str	r2, [r3, #20]
	sConfig.Channel = ADC_CHANNEL_6;
 800239e:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <ADC_Select_CH6+0x40>)
 80023a0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80023a2:	2306      	movs	r3, #6
 80023a4:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80023a6:	2300      	movs	r3, #0
 80023a8:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023aa:	463b      	mov	r3, r7
 80023ac:	4619      	mov	r1, r3
 80023ae:	4807      	ldr	r0, [pc, #28]	; (80023cc <ADC_Select_CH6+0x44>)
 80023b0:	f001 fd1e 	bl	8003df0 <HAL_ADC_ConfigChannel>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <ADC_Select_CH6+0x36>
	{
	  Error_Handler();
 80023ba:	f000 fc25 	bl	8002c08 <Error_Handler>
	}
}
 80023be:	bf00      	nop
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	19200040 	.word	0x19200040
 80023cc:	20000a24 	.word	0x20000a24

080023d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023d6:	f000 ffe9 	bl	80033ac <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80023da:	f7fe fe47 	bl	800106c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023de:	f000 f939 	bl	8002654 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80023e2:	f000 f9ad 	bl	8002740 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80023e6:	f000 fa95 	bl	8002914 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023ea:	f000 fb73 	bl	8002ad4 <MX_GPIO_Init>
  MX_DMA_Init();
 80023ee:	f000 fb57 	bl	8002aa0 <MX_DMA_Init>
  MX_RF_Init();
 80023f2:	f000 faa3 	bl	800293c <MX_RF_Init>
  MX_RTC_Init();
 80023f6:	f000 faa9 	bl	800294c <MX_RTC_Init>
  MX_USB_PCD_Init();
 80023fa:	f000 fb29 	bl	8002a50 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 80023fe:	f000 f9d3 	bl	80027a8 <MX_ADC1_Init>
  MX_I2C3_Init();
 8002402:	f000 fa47 	bl	8002894 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  adxl_init();
 8002406:	f7ff ff81 	bl	800230c <adxl_init>


  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800240a:	f7fe fe3d 	bl	8001088 <MX_APPE_Init>
  while (1)
  {

	  // EDA and send receive

	  connected = 1;
 800240e:	4b7b      	ldr	r3, [pc, #492]	; (80025fc <main+0x22c>)
 8002410:	2201      	movs	r2, #1
 8002412:	601a      	str	r2, [r3, #0]
	  HAL_Delay(1000);
 8002414:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002418:	f7ff f828 	bl	800146c <HAL_Delay>
	  MX_APPE_Process();
 800241c:	f7ff f84b 	bl	80014b6 <MX_APPE_Process>
	  connected = 2;
 8002420:	4b76      	ldr	r3, [pc, #472]	; (80025fc <main+0x22c>)
 8002422:	2202      	movs	r2, #2
 8002424:	601a      	str	r2, [r3, #0]
	  if(val_read==1){
 8002426:	4b76      	ldr	r3, [pc, #472]	; (8002600 <main+0x230>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b01      	cmp	r3, #1
 800242c:	f040 80dc 	bne.w	80025e8 <main+0x218>
		  for(a = 0; a<720; a++){
 8002430:	4b74      	ldr	r3, [pc, #464]	; (8002604 <main+0x234>)
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	e0c4      	b.n	80025c2 <main+0x1f2>
			  sum=0;
 8002438:	4b73      	ldr	r3, [pc, #460]	; (8002608 <main+0x238>)
 800243a:	2200      	movs	r2, #0
 800243c:	801a      	strh	r2, [r3, #0]
			  for(int n=0;n<10;n++){
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	e00f      	b.n	8002464 <main+0x94>
				  //Average the 10 measurements to remove the glitch
				  Eda();
 8002444:	f000 fbb4 	bl	8002bb0 <Eda>
				  sum+=eda_data;
 8002448:	4b6f      	ldr	r3, [pc, #444]	; (8002608 <main+0x238>)
 800244a:	881a      	ldrh	r2, [r3, #0]
 800244c:	4b6f      	ldr	r3, [pc, #444]	; (800260c <main+0x23c>)
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	4413      	add	r3, r2
 8002452:	b29a      	uxth	r2, r3
 8002454:	4b6c      	ldr	r3, [pc, #432]	; (8002608 <main+0x238>)
 8002456:	801a      	strh	r2, [r3, #0]
				  HAL_Delay(0.5);
 8002458:	2000      	movs	r0, #0
 800245a:	f7ff f807 	bl	800146c <HAL_Delay>
			  for(int n=0;n<10;n++){
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	3301      	adds	r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2b09      	cmp	r3, #9
 8002468:	ddec      	ble.n	8002444 <main+0x74>
			  }
			  EDA_average=sum/10;
 800246a:	4b67      	ldr	r3, [pc, #412]	; (8002608 <main+0x238>)
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	4a68      	ldr	r2, [pc, #416]	; (8002610 <main+0x240>)
 8002470:	fba2 2303 	umull	r2, r3, r2, r3
 8002474:	08db      	lsrs	r3, r3, #3
 8002476:	b29a      	uxth	r2, r3
 8002478:	4b66      	ldr	r3, [pc, #408]	; (8002614 <main+0x244>)
 800247a:	801a      	strh	r2, [r3, #0]
			  //EDA_transmit = EDA_average*256/65536;

			  eda_arr[a] = EDA_average;
 800247c:	4b61      	ldr	r3, [pc, #388]	; (8002604 <main+0x234>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a64      	ldr	r2, [pc, #400]	; (8002614 <main+0x244>)
 8002482:	8811      	ldrh	r1, [r2, #0]
 8002484:	4a64      	ldr	r2, [pc, #400]	; (8002618 <main+0x248>)
 8002486:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  all_data[1] = EDA_average;
 800248a:	4b62      	ldr	r3, [pc, #392]	; (8002614 <main+0x244>)
 800248c:	881a      	ldrh	r2, [r3, #0]
 800248e:	4b63      	ldr	r3, [pc, #396]	; (800261c <main+0x24c>)
 8002490:	805a      	strh	r2, [r3, #2]
			  ////human_resistance = ((4096+(2*EDA_average))*10000)/(347-EDA_average);
			  ////Custom_STM_App_Update_Char(CUSTOM_STM_MY_CHAR,&EDA_average);
		  //}

			    /////Accelerometer////////////
			    adxl_read(0x32,6); // data is stored in the registers 0x32 to 0x37.Each Register stores 8 bits of data
 8002492:	2106      	movs	r1, #6
 8002494:	2032      	movs	r0, #50	; 0x32
 8002496:	f7ff ff1b 	bl	80022d0 <adxl_read>
			    x= (data_rec[1]<<8) | data_rec[0]; //converting the DATA X0, DATA X1 into single data
 800249a:	4b61      	ldr	r3, [pc, #388]	; (8002620 <main+0x250>)
 800249c:	785b      	ldrb	r3, [r3, #1]
 800249e:	021b      	lsls	r3, r3, #8
 80024a0:	b21a      	sxth	r2, r3
 80024a2:	4b5f      	ldr	r3, [pc, #380]	; (8002620 <main+0x250>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	b21b      	sxth	r3, r3
 80024a8:	4313      	orrs	r3, r2
 80024aa:	b21b      	sxth	r3, r3
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	4b5d      	ldr	r3, [pc, #372]	; (8002624 <main+0x254>)
 80024b0:	801a      	strh	r2, [r3, #0]
			    y= (data_rec[3]<<8) | data_rec[2];
 80024b2:	4b5b      	ldr	r3, [pc, #364]	; (8002620 <main+0x250>)
 80024b4:	78db      	ldrb	r3, [r3, #3]
 80024b6:	021b      	lsls	r3, r3, #8
 80024b8:	b21a      	sxth	r2, r3
 80024ba:	4b59      	ldr	r3, [pc, #356]	; (8002620 <main+0x250>)
 80024bc:	789b      	ldrb	r3, [r3, #2]
 80024be:	b21b      	sxth	r3, r3
 80024c0:	4313      	orrs	r3, r2
 80024c2:	b21b      	sxth	r3, r3
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	4b58      	ldr	r3, [pc, #352]	; (8002628 <main+0x258>)
 80024c8:	801a      	strh	r2, [r3, #0]
			    z= (data_rec[5]<<8) | data_rec[4];
 80024ca:	4b55      	ldr	r3, [pc, #340]	; (8002620 <main+0x250>)
 80024cc:	795b      	ldrb	r3, [r3, #5]
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	b21a      	sxth	r2, r3
 80024d2:	4b53      	ldr	r3, [pc, #332]	; (8002620 <main+0x250>)
 80024d4:	791b      	ldrb	r3, [r3, #4]
 80024d6:	b21b      	sxth	r3, r3
 80024d8:	4313      	orrs	r3, r2
 80024da:	b21b      	sxth	r3, r3
 80024dc:	b29a      	uxth	r2, r3
 80024de:	4b53      	ldr	r3, [pc, #332]	; (800262c <main+0x25c>)
 80024e0:	801a      	strh	r2, [r3, #0]

			    x_diff = abs(x-x_old);
 80024e2:	4b50      	ldr	r3, [pc, #320]	; (8002624 <main+0x254>)
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	4b51      	ldr	r3, [pc, #324]	; (8002630 <main+0x260>)
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	bfb8      	it	lt
 80024f2:	425b      	neglt	r3, r3
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	4b4f      	ldr	r3, [pc, #316]	; (8002634 <main+0x264>)
 80024f8:	801a      	strh	r2, [r3, #0]
			    y_diff = abs(y-y_old);
 80024fa:	4b4b      	ldr	r3, [pc, #300]	; (8002628 <main+0x258>)
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	4b4d      	ldr	r3, [pc, #308]	; (8002638 <main+0x268>)
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b00      	cmp	r3, #0
 8002508:	bfb8      	it	lt
 800250a:	425b      	neglt	r3, r3
 800250c:	b29a      	uxth	r2, r3
 800250e:	4b4b      	ldr	r3, [pc, #300]	; (800263c <main+0x26c>)
 8002510:	801a      	strh	r2, [r3, #0]
			    z_diff = abs(z-z_old);
 8002512:	4b46      	ldr	r3, [pc, #280]	; (800262c <main+0x25c>)
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	4b49      	ldr	r3, [pc, #292]	; (8002640 <main+0x270>)
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	bfb8      	it	lt
 8002522:	425b      	neglt	r3, r3
 8002524:	b29a      	uxth	r2, r3
 8002526:	4b47      	ldr	r3, [pc, #284]	; (8002644 <main+0x274>)
 8002528:	801a      	strh	r2, [r3, #0]

			    if((x_diff>=5)||(x_diff>=5)||(x_diff>=5)){
 800252a:	4b42      	ldr	r3, [pc, #264]	; (8002634 <main+0x264>)
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	2b04      	cmp	r3, #4
 8002530:	d807      	bhi.n	8002542 <main+0x172>
 8002532:	4b40      	ldr	r3, [pc, #256]	; (8002634 <main+0x264>)
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	2b04      	cmp	r3, #4
 8002538:	d803      	bhi.n	8002542 <main+0x172>
 800253a:	4b3e      	ldr	r3, [pc, #248]	; (8002634 <main+0x264>)
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	2b04      	cmp	r3, #4
 8002540:	d903      	bls.n	800254a <main+0x17a>
			    	acc_value=1;
 8002542:	4b41      	ldr	r3, [pc, #260]	; (8002648 <main+0x278>)
 8002544:	2201      	movs	r2, #1
 8002546:	801a      	strh	r2, [r3, #0]
 8002548:	e002      	b.n	8002550 <main+0x180>

			    }else{
			    	acc_value=0;
 800254a:	4b3f      	ldr	r3, [pc, #252]	; (8002648 <main+0x278>)
 800254c:	2200      	movs	r2, #0
 800254e:	801a      	strh	r2, [r3, #0]
			    }

			    all_data[2] = acc_value;
 8002550:	4b3d      	ldr	r3, [pc, #244]	; (8002648 <main+0x278>)
 8002552:	881a      	ldrh	r2, [r3, #0]
 8002554:	4b31      	ldr	r3, [pc, #196]	; (800261c <main+0x24c>)
 8002556:	809a      	strh	r2, [r3, #4]

			    x_old = x;
 8002558:	4b32      	ldr	r3, [pc, #200]	; (8002624 <main+0x254>)
 800255a:	881a      	ldrh	r2, [r3, #0]
 800255c:	4b34      	ldr	r3, [pc, #208]	; (8002630 <main+0x260>)
 800255e:	801a      	strh	r2, [r3, #0]
			    y_old = y;
 8002560:	4b31      	ldr	r3, [pc, #196]	; (8002628 <main+0x258>)
 8002562:	881a      	ldrh	r2, [r3, #0]
 8002564:	4b34      	ldr	r3, [pc, #208]	; (8002638 <main+0x268>)
 8002566:	801a      	strh	r2, [r3, #0]
			    z_old = z;
 8002568:	4b30      	ldr	r3, [pc, #192]	; (800262c <main+0x25c>)
 800256a:	881a      	ldrh	r2, [r3, #0]
 800256c:	4b34      	ldr	r3, [pc, #208]	; (8002640 <main+0x270>)
 800256e:	801a      	strh	r2, [r3, #0]
			    ////yg=y*0.0078;
			    ////zg=z*0.0078;
			    ////Custom_STM_App_Update_Char(CUSTOM_STM_MY_CHAR_3,&acc_value);


		  for( b=0; b<16; b++){
 8002570:	4b36      	ldr	r3, [pc, #216]	; (800264c <main+0x27c>)
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	e01b      	b.n	80025b0 <main+0x1e0>

			  ReadPPG();
 8002578:	f000 fb20 	bl	8002bbc <ReadPPG>
			  //PPG_transmit = ppg_data*256/65536;
			  ////PPG_arr[b]=ppg_data;
			  ////Custom_STM_App_Update_Char(CUSTOM_STM_MY_CHAR_2,&ppg_data);

			  all_data[0] = ppg_data;
 800257c:	4b34      	ldr	r3, [pc, #208]	; (8002650 <main+0x280>)
 800257e:	881a      	ldrh	r2, [r3, #0]
 8002580:	4b26      	ldr	r3, [pc, #152]	; (800261c <main+0x24c>)
 8002582:	801a      	strh	r2, [r3, #0]
			  Custom_STM_App_Update_Char(CUSTOM_STM_MY_CHAR,&all_data);
 8002584:	4925      	ldr	r1, [pc, #148]	; (800261c <main+0x24c>)
 8002586:	2000      	movs	r0, #0
 8002588:	f00a fde2 	bl	800d150 <Custom_STM_App_Update_Char>
			  if(b!=15){
 800258c:	4b2f      	ldr	r3, [pc, #188]	; (800264c <main+0x27c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b0f      	cmp	r3, #15
 8002592:	d002      	beq.n	800259a <main+0x1ca>
				  HAL_Delay(15.625); //15.625
 8002594:	200f      	movs	r0, #15
 8002596:	f7fe ff69 	bl	800146c <HAL_Delay>
			  }
			  all_data[1] = 0;
 800259a:	4b20      	ldr	r3, [pc, #128]	; (800261c <main+0x24c>)
 800259c:	2200      	movs	r2, #0
 800259e:	805a      	strh	r2, [r3, #2]
			  all_data[2] = 3;
 80025a0:	4b1e      	ldr	r3, [pc, #120]	; (800261c <main+0x24c>)
 80025a2:	2203      	movs	r2, #3
 80025a4:	809a      	strh	r2, [r3, #4]
		  for( b=0; b<16; b++){
 80025a6:	4b29      	ldr	r3, [pc, #164]	; (800264c <main+0x27c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	3301      	adds	r3, #1
 80025ac:	4a27      	ldr	r2, [pc, #156]	; (800264c <main+0x27c>)
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b26      	ldr	r3, [pc, #152]	; (800264c <main+0x27c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b0f      	cmp	r3, #15
 80025b6:	dddf      	ble.n	8002578 <main+0x1a8>
		  for(a = 0; a<720; a++){
 80025b8:	4b12      	ldr	r3, [pc, #72]	; (8002604 <main+0x234>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	3301      	adds	r3, #1
 80025be:	4a11      	ldr	r2, [pc, #68]	; (8002604 <main+0x234>)
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <main+0x234>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 80025ca:	f6ff af35 	blt.w	8002438 <main+0x68>
		  }

		  //Custom_STM_App_Update_Char(CUSTOM_STM_MY_CHAR,&my_value);
		  //////////////////Custom_STM_App_Update_Char(CUSTOM_STM_MY_CHAR,&eda_arr);

		  all_data[0] = 1;
 80025ce:	4b13      	ldr	r3, [pc, #76]	; (800261c <main+0x24c>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	801a      	strh	r2, [r3, #0]
		  all_data[1] = 1;
 80025d4:	4b11      	ldr	r3, [pc, #68]	; (800261c <main+0x24c>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	805a      	strh	r2, [r3, #2]
		  all_data[2] = 1;
 80025da:	4b10      	ldr	r3, [pc, #64]	; (800261c <main+0x24c>)
 80025dc:	2201      	movs	r2, #1
 80025de:	809a      	strh	r2, [r3, #4]
		  Custom_STM_App_Update_Char(CUSTOM_STM_MY_CHAR,&all_data);
 80025e0:	490e      	ldr	r1, [pc, #56]	; (800261c <main+0x24c>)
 80025e2:	2000      	movs	r0, #0
 80025e4:	f00a fdb4 	bl	800d150 <Custom_STM_App_Update_Char>

	  }
	  val_read=0;
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <main+0x230>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	701a      	strb	r2, [r3, #0]
	  //val_read = Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *CUSTOM_STM_MY_CHAR_READ_EVT);
	  connected = 3;
 80025ee:	4b03      	ldr	r3, [pc, #12]	; (80025fc <main+0x22c>)
 80025f0:	2203      	movs	r2, #3
 80025f2:	601a      	str	r2, [r3, #0]
	  /////////////////////////////////////////////////////////////////////////////////////



    /* USER CODE END WHILE */
    MX_APPE_Process();
 80025f4:	f7fe ff5f 	bl	80014b6 <MX_APPE_Process>
	  connected = 1;
 80025f8:	e709      	b.n	800240e <main+0x3e>
 80025fa:	bf00      	nop
 80025fc:	20000008 	.word	0x20000008
 8002600:	20000f84 	.word	0x20000f84
 8002604:	2000176c 	.word	0x2000176c
 8002608:	20000f88 	.word	0x20000f88
 800260c:	20000f86 	.word	0x20000f86
 8002610:	cccccccd 	.word	0xcccccccd
 8002614:	20000f8a 	.word	0x20000f8a
 8002618:	20000f8c 	.word	0x20000f8c
 800261c:	20001764 	.word	0x20001764
 8002620:	20001770 	.word	0x20001770
 8002624:	20001776 	.word	0x20001776
 8002628:	20001778 	.word	0x20001778
 800262c:	2000177a 	.word	0x2000177a
 8002630:	2000177c 	.word	0x2000177c
 8002634:	20001782 	.word	0x20001782
 8002638:	2000177e 	.word	0x2000177e
 800263c:	20001784 	.word	0x20001784
 8002640:	20001780 	.word	0x20001780
 8002644:	20001786 	.word	0x20001786
 8002648:	20001788 	.word	0x20001788
 800264c:	20001760 	.word	0x20001760
 8002650:	2000175c 	.word	0x2000175c

08002654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b09a      	sub	sp, #104	; 0x68
 8002658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800265a:	f107 0320 	add.w	r3, r7, #32
 800265e:	2248      	movs	r2, #72	; 0x48
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f00b faae 	bl	800dbc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002668:	1d3b      	adds	r3, r7, #4
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	605a      	str	r2, [r3, #4]
 8002670:	609a      	str	r2, [r3, #8]
 8002672:	60da      	str	r2, [r3, #12]
 8002674:	611a      	str	r2, [r3, #16]
 8002676:	615a      	str	r2, [r3, #20]
 8002678:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 800267a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002688:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 800268a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f023 0303 	bic.w	r3, r3, #3
 8002694:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800269e:	f003 fea7 	bl	80063f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80026a2:	2000      	movs	r0, #0
 80026a4:	f7ff fdb0 	bl	8002208 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026a8:	4b24      	ldr	r3, [pc, #144]	; (800273c <SystemClock_Config+0xe8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026b0:	4a22      	ldr	r2, [pc, #136]	; (800273c <SystemClock_Config+0xe8>)
 80026b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	4b20      	ldr	r3, [pc, #128]	; (800273c <SystemClock_Config+0xe8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026c0:	603b      	str	r3, [r7, #0]
 80026c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80026c4:	2327      	movs	r3, #39	; 0x27
 80026c6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80026ce:	2301      	movs	r3, #1
 80026d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80026d8:	2301      	movs	r3, #1
 80026da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026dc:	2340      	movs	r3, #64	; 0x40
 80026de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80026e0:	2300      	movs	r3, #0
 80026e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80026e4:	2360      	movs	r3, #96	; 0x60
 80026e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80026e8:	2300      	movs	r3, #0
 80026ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ec:	f107 0320 	add.w	r3, r7, #32
 80026f0:	4618      	mov	r0, r3
 80026f2:	f004 fa11 	bl	8006b18 <HAL_RCC_OscConfig>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80026fc:	f000 fa84 	bl	8002c08 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002700:	236f      	movs	r3, #111	; 0x6f
 8002702:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002704:	2302      	movs	r3, #2
 8002706:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002708:	2300      	movs	r3, #0
 800270a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800270c:	2300      	movs	r3, #0
 800270e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002714:	2300      	movs	r3, #0
 8002716:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002718:	2300      	movs	r3, #0
 800271a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800271c:	1d3b      	adds	r3, r7, #4
 800271e:	2101      	movs	r1, #1
 8002720:	4618      	mov	r0, r3
 8002722:	f004 fd6d 	bl	8007200 <HAL_RCC_ClockConfig>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800272c:	f000 fa6c 	bl	8002c08 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002730:	f005 fb28 	bl	8007d84 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002734:	bf00      	nop
 8002736:	3768      	adds	r7, #104	; 0x68
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	58000400 	.word	0x58000400

08002740 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b094      	sub	sp, #80	; 0x50
 8002744:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002746:	463b      	mov	r3, r7
 8002748:	2250      	movs	r2, #80	; 0x50
 800274a:	2100      	movs	r1, #0
 800274c:	4618      	mov	r0, r3
 800274e:	f00b fa39 	bl	800dbc4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8002752:	f44f 5354 	mov.w	r3, #13568	; 0x3500
 8002756:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8002758:	2318      	movs	r3, #24
 800275a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800275c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002760:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002762:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002766:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002768:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800276c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 800276e:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8002772:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002774:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002778:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800277a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800277e:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002780:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002784:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002786:	2300      	movs	r3, #0
 8002788:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800278a:	2300      	movs	r3, #0
 800278c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800278e:	463b      	mov	r3, r7
 8002790:	4618      	mov	r0, r3
 8002792:	f005 f981 	bl	8007a98 <HAL_RCCEx_PeriphCLKConfig>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 800279c:	f000 fa34 	bl	8002c08 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80027a0:	bf00      	nop
 80027a2:	3750      	adds	r7, #80	; 0x50
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80027ae:	463b      	mov	r3, r7
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
 80027bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80027be:	4b31      	ldr	r3, [pc, #196]	; (8002884 <MX_ADC1_Init+0xdc>)
 80027c0:	4a31      	ldr	r2, [pc, #196]	; (8002888 <MX_ADC1_Init+0xe0>)
 80027c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80027c4:	4b2f      	ldr	r3, [pc, #188]	; (8002884 <MX_ADC1_Init+0xdc>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80027ca:	4b2e      	ldr	r3, [pc, #184]	; (8002884 <MX_ADC1_Init+0xdc>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027d0:	4b2c      	ldr	r3, [pc, #176]	; (8002884 <MX_ADC1_Init+0xdc>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80027d6:	4b2b      	ldr	r3, [pc, #172]	; (8002884 <MX_ADC1_Init+0xdc>)
 80027d8:	2201      	movs	r2, #1
 80027da:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027dc:	4b29      	ldr	r3, [pc, #164]	; (8002884 <MX_ADC1_Init+0xdc>)
 80027de:	2204      	movs	r2, #4
 80027e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80027e2:	4b28      	ldr	r3, [pc, #160]	; (8002884 <MX_ADC1_Init+0xdc>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80027e8:	4b26      	ldr	r3, [pc, #152]	; (8002884 <MX_ADC1_Init+0xdc>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80027ee:	4b25      	ldr	r3, [pc, #148]	; (8002884 <MX_ADC1_Init+0xdc>)
 80027f0:	2202      	movs	r2, #2
 80027f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027f4:	4b23      	ldr	r3, [pc, #140]	; (8002884 <MX_ADC1_Init+0xdc>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027fc:	4b21      	ldr	r3, [pc, #132]	; (8002884 <MX_ADC1_Init+0xdc>)
 80027fe:	2200      	movs	r2, #0
 8002800:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002802:	4b20      	ldr	r3, [pc, #128]	; (8002884 <MX_ADC1_Init+0xdc>)
 8002804:	2200      	movs	r2, #0
 8002806:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002808:	4b1e      	ldr	r3, [pc, #120]	; (8002884 <MX_ADC1_Init+0xdc>)
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002810:	4b1c      	ldr	r3, [pc, #112]	; (8002884 <MX_ADC1_Init+0xdc>)
 8002812:	2200      	movs	r2, #0
 8002814:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002816:	4b1b      	ldr	r3, [pc, #108]	; (8002884 <MX_ADC1_Init+0xdc>)
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800281e:	4819      	ldr	r0, [pc, #100]	; (8002884 <MX_ADC1_Init+0xdc>)
 8002820:	f001 f878 	bl	8003914 <HAL_ADC_Init>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800282a:	f000 f9ed 	bl	8002c08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800282e:	4b17      	ldr	r3, [pc, #92]	; (800288c <MX_ADC1_Init+0xe4>)
 8002830:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002832:	2306      	movs	r3, #6
 8002834:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8002836:	2302      	movs	r3, #2
 8002838:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800283a:	237f      	movs	r3, #127	; 0x7f
 800283c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800283e:	2304      	movs	r3, #4
 8002840:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002846:	463b      	mov	r3, r7
 8002848:	4619      	mov	r1, r3
 800284a:	480e      	ldr	r0, [pc, #56]	; (8002884 <MX_ADC1_Init+0xdc>)
 800284c:	f001 fad0 	bl	8003df0 <HAL_ADC_ConfigChannel>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002856:	f000 f9d7 	bl	8002c08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800285a:	4b0d      	ldr	r3, [pc, #52]	; (8002890 <MX_ADC1_Init+0xe8>)
 800285c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800285e:	230c      	movs	r3, #12
 8002860:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002862:	2300      	movs	r3, #0
 8002864:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002866:	463b      	mov	r3, r7
 8002868:	4619      	mov	r1, r3
 800286a:	4806      	ldr	r0, [pc, #24]	; (8002884 <MX_ADC1_Init+0xdc>)
 800286c:	f001 fac0 	bl	8003df0 <HAL_ADC_ConfigChannel>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8002876:	f000 f9c7 	bl	8002c08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800287a:	bf00      	nop
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000a24 	.word	0x20000a24
 8002888:	50040000 	.word	0x50040000
 800288c:	0c900008 	.word	0x0c900008
 8002890:	19200040 	.word	0x19200040

08002894 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002898:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <MX_I2C3_Init+0x74>)
 800289a:	4a1c      	ldr	r2, [pc, #112]	; (800290c <MX_I2C3_Init+0x78>)
 800289c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00300F38;
 800289e:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <MX_I2C3_Init+0x74>)
 80028a0:	4a1b      	ldr	r2, [pc, #108]	; (8002910 <MX_I2C3_Init+0x7c>)
 80028a2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80028a4:	4b18      	ldr	r3, [pc, #96]	; (8002908 <MX_I2C3_Init+0x74>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028aa:	4b17      	ldr	r3, [pc, #92]	; (8002908 <MX_I2C3_Init+0x74>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028b0:	4b15      	ldr	r3, [pc, #84]	; (8002908 <MX_I2C3_Init+0x74>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80028b6:	4b14      	ldr	r3, [pc, #80]	; (8002908 <MX_I2C3_Init+0x74>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028bc:	4b12      	ldr	r3, [pc, #72]	; (8002908 <MX_I2C3_Init+0x74>)
 80028be:	2200      	movs	r2, #0
 80028c0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028c2:	4b11      	ldr	r3, [pc, #68]	; (8002908 <MX_I2C3_Init+0x74>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028c8:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <MX_I2C3_Init+0x74>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80028ce:	480e      	ldr	r0, [pc, #56]	; (8002908 <MX_I2C3_Init+0x74>)
 80028d0:	f002 fe7c 	bl	80055cc <HAL_I2C_Init>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80028da:	f000 f995 	bl	8002c08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80028de:	2100      	movs	r1, #0
 80028e0:	4809      	ldr	r0, [pc, #36]	; (8002908 <MX_I2C3_Init+0x74>)
 80028e2:	f003 fb63 	bl	8005fac <HAL_I2CEx_ConfigAnalogFilter>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80028ec:	f000 f98c 	bl	8002c08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80028f0:	2100      	movs	r1, #0
 80028f2:	4805      	ldr	r0, [pc, #20]	; (8002908 <MX_I2C3_Init+0x74>)
 80028f4:	f003 fba5 	bl	8006042 <HAL_I2CEx_ConfigDigitalFilter>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80028fe:	f000 f983 	bl	8002c08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000a88 	.word	0x20000a88
 800290c:	40005c00 	.word	0x40005c00
 8002910:	00300f38 	.word	0x00300f38

08002914 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <MX_IPCC_Init+0x20>)
 800291a:	4a07      	ldr	r2, [pc, #28]	; (8002938 <MX_IPCC_Init+0x24>)
 800291c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800291e:	4805      	ldr	r0, [pc, #20]	; (8002934 <MX_IPCC_Init+0x20>)
 8002920:	f003 fbdc 	bl	80060dc <HAL_IPCC_Init>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800292a:	f000 f96d 	bl	8002c08 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000adc 	.word	0x20000adc
 8002938:	58000c00 	.word	0x58000c00

0800293c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002950:	4b16      	ldr	r3, [pc, #88]	; (80029ac <MX_RTC_Init+0x60>)
 8002952:	4a17      	ldr	r2, [pc, #92]	; (80029b0 <MX_RTC_Init+0x64>)
 8002954:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002956:	4b15      	ldr	r3, [pc, #84]	; (80029ac <MX_RTC_Init+0x60>)
 8002958:	2200      	movs	r2, #0
 800295a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800295c:	4b13      	ldr	r3, [pc, #76]	; (80029ac <MX_RTC_Init+0x60>)
 800295e:	220f      	movs	r2, #15
 8002960:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002962:	4b12      	ldr	r3, [pc, #72]	; (80029ac <MX_RTC_Init+0x60>)
 8002964:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002968:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800296a:	4b10      	ldr	r3, [pc, #64]	; (80029ac <MX_RTC_Init+0x60>)
 800296c:	2200      	movs	r2, #0
 800296e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002970:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <MX_RTC_Init+0x60>)
 8002972:	2200      	movs	r2, #0
 8002974:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002976:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <MX_RTC_Init+0x60>)
 8002978:	2200      	movs	r2, #0
 800297a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800297c:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <MX_RTC_Init+0x60>)
 800297e:	2200      	movs	r2, #0
 8002980:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002982:	480a      	ldr	r0, [pc, #40]	; (80029ac <MX_RTC_Init+0x60>)
 8002984:	f005 fb16 	bl	8007fb4 <HAL_RTC_Init>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800298e:	f000 f93b 	bl	8002c08 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002992:	2200      	movs	r2, #0
 8002994:	2100      	movs	r1, #0
 8002996:	4805      	ldr	r0, [pc, #20]	; (80029ac <MX_RTC_Init+0x60>)
 8002998:	f005 fc0c 	bl	80081b4 <HAL_RTCEx_SetWakeUpTimer_IT>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80029a2:	f000 f931 	bl	8002c08 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000b18 	.word	0x20000b18
 80029b0:	40002800 	.word	0x40002800

080029b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029b8:	4b23      	ldr	r3, [pc, #140]	; (8002a48 <MX_USART1_UART_Init+0x94>)
 80029ba:	4a24      	ldr	r2, [pc, #144]	; (8002a4c <MX_USART1_UART_Init+0x98>)
 80029bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80029be:	4b22      	ldr	r3, [pc, #136]	; (8002a48 <MX_USART1_UART_Init+0x94>)
 80029c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029c6:	4b20      	ldr	r3, [pc, #128]	; (8002a48 <MX_USART1_UART_Init+0x94>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029cc:	4b1e      	ldr	r3, [pc, #120]	; (8002a48 <MX_USART1_UART_Init+0x94>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029d2:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <MX_USART1_UART_Init+0x94>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029d8:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <MX_USART1_UART_Init+0x94>)
 80029da:	220c      	movs	r2, #12
 80029dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029de:	4b1a      	ldr	r3, [pc, #104]	; (8002a48 <MX_USART1_UART_Init+0x94>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80029e4:	4b18      	ldr	r3, [pc, #96]	; (8002a48 <MX_USART1_UART_Init+0x94>)
 80029e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80029ea:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029ec:	4b16      	ldr	r3, [pc, #88]	; (8002a48 <MX_USART1_UART_Init+0x94>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029f2:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <MX_USART1_UART_Init+0x94>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029f8:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <MX_USART1_UART_Init+0x94>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029fe:	4812      	ldr	r0, [pc, #72]	; (8002a48 <MX_USART1_UART_Init+0x94>)
 8002a00:	f005 fcb4 	bl	800836c <HAL_UART_Init>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002a0a:	f000 f8fd 	bl	8002c08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a0e:	2100      	movs	r1, #0
 8002a10:	480d      	ldr	r0, [pc, #52]	; (8002a48 <MX_USART1_UART_Init+0x94>)
 8002a12:	f006 fe79 	bl	8009708 <HAL_UARTEx_SetTxFifoThreshold>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002a1c:	f000 f8f4 	bl	8002c08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a20:	2100      	movs	r1, #0
 8002a22:	4809      	ldr	r0, [pc, #36]	; (8002a48 <MX_USART1_UART_Init+0x94>)
 8002a24:	f006 feae 	bl	8009784 <HAL_UARTEx_SetRxFifoThreshold>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002a2e:	f000 f8eb 	bl	8002c08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002a32:	4805      	ldr	r0, [pc, #20]	; (8002a48 <MX_USART1_UART_Init+0x94>)
 8002a34:	f006 fe2f 	bl	8009696 <HAL_UARTEx_DisableFifoMode>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002a3e:	f000 f8e3 	bl	8002c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a42:	bf00      	nop
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	20000b3c 	.word	0x20000b3c
 8002a4c:	40013800 	.word	0x40013800

08002a50 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002a54:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <MX_USB_PCD_Init+0x48>)
 8002a56:	4a11      	ldr	r2, [pc, #68]	; (8002a9c <MX_USB_PCD_Init+0x4c>)
 8002a58:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002a5a:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <MX_USB_PCD_Init+0x48>)
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002a60:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <MX_USB_PCD_Init+0x48>)
 8002a62:	2202      	movs	r2, #2
 8002a64:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002a66:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <MX_USB_PCD_Init+0x48>)
 8002a68:	2202      	movs	r2, #2
 8002a6a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <MX_USB_PCD_Init+0x48>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <MX_USB_PCD_Init+0x48>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002a78:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <MX_USB_PCD_Init+0x48>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <MX_USB_PCD_Init+0x48>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002a84:	4804      	ldr	r0, [pc, #16]	; (8002a98 <MX_USB_PCD_Init+0x48>)
 8002a86:	f003 fbaf 	bl	80061e8 <HAL_PCD_Init>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002a90:	f000 f8ba 	bl	8002c08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002a94:	bf00      	nop
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	20000c90 	.word	0x20000c90
 8002a9c:	40006800 	.word	0x40006800

08002aa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002aa4:	2004      	movs	r0, #4
 8002aa6:	f7ff fbc5 	bl	8002234 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002aaa:	2001      	movs	r0, #1
 8002aac:	f7ff fbc2 	bl	8002234 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	200b      	movs	r0, #11
 8002ab6:	f002 f832 	bl	8004b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002aba:	200b      	movs	r0, #11
 8002abc:	f002 f849 	bl	8004b52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	200c      	movs	r0, #12
 8002ac6:	f002 f82a 	bl	8004b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002aca:	200c      	movs	r0, #12
 8002acc:	f002 f841 	bl	8004b52 <HAL_NVIC_EnableIRQ>

}
 8002ad0:	bf00      	nop
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ada:	1d3b      	adds	r3, r7, #4
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ae8:	2004      	movs	r0, #4
 8002aea:	f7ff fbbc 	bl	8002266 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aee:	2001      	movs	r0, #1
 8002af0:	f7ff fbb9 	bl	8002266 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af4:	2002      	movs	r0, #2
 8002af6:	f7ff fbb6 	bl	8002266 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002afa:	2008      	movs	r0, #8
 8002afc:	f7ff fbb3 	bl	8002266 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8002b00:	2200      	movs	r2, #0
 8002b02:	2123      	movs	r1, #35	; 0x23
 8002b04:	4814      	ldr	r0, [pc, #80]	; (8002b58 <MX_GPIO_Init+0x84>)
 8002b06:	f002 fd0b 	bl	8005520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b0a:	2310      	movs	r3, #16
 8002b0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b16:	1d3b      	adds	r3, r7, #4
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4810      	ldr	r0, [pc, #64]	; (8002b5c <MX_GPIO_Init+0x88>)
 8002b1c:	f002 fb90 	bl	8005240 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8002b20:	2323      	movs	r3, #35	; 0x23
 8002b22:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b24:	2301      	movs	r3, #1
 8002b26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b30:	1d3b      	adds	r3, r7, #4
 8002b32:	4619      	mov	r1, r3
 8002b34:	4808      	ldr	r0, [pc, #32]	; (8002b58 <MX_GPIO_Init+0x84>)
 8002b36:	f002 fb83 	bl	8005240 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b46:	1d3b      	adds	r3, r7, #4
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4805      	ldr	r0, [pc, #20]	; (8002b60 <MX_GPIO_Init+0x8c>)
 8002b4c:	f002 fb78 	bl	8005240 <HAL_GPIO_Init>

}
 8002b50:	bf00      	nop
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	48000400 	.word	0x48000400
 8002b5c:	48000800 	.word	0x48000800
 8002b60:	48000c00 	.word	0x48000c00

08002b64 <ReadEda>:

/* USER CODE BEGIN 4 */

void ReadEda(){
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0

	ADC_Select_CH6();
 8002b68:	f7ff fc0e 	bl	8002388 <ADC_Select_CH6>

	// Start ADC conversion
	//HAL_ADC_Start(&hadc1);
	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8002b6c:	480e      	ldr	r0, [pc, #56]	; (8002ba8 <ReadEda+0x44>)
 8002b6e:	f001 f81d 	bl	8003bac <HAL_ADC_Start>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <ReadEda+0x18>
	{
		Error_Handler();
 8002b78:	f000 f846 	bl	8002c08 <Error_Handler>
	}
	// Wait for ADC conversion to complete
	//HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK)
 8002b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b80:	4809      	ldr	r0, [pc, #36]	; (8002ba8 <ReadEda+0x44>)
 8002b82:	f001 f89a 	bl	8003cba <HAL_ADC_PollForConversion>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <ReadEda+0x2c>
	{
		Error_Handler();
 8002b8c:	f000 f83c 	bl	8002c08 <Error_Handler>
	}
	// Read ADC value
	eda_data= HAL_ADC_GetValue(&hadc1);
 8002b90:	4805      	ldr	r0, [pc, #20]	; (8002ba8 <ReadEda+0x44>)
 8002b92:	f001 f91f 	bl	8003dd4 <HAL_ADC_GetValue>
 8002b96:	4603      	mov	r3, r0
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	4b04      	ldr	r3, [pc, #16]	; (8002bac <ReadEda+0x48>)
 8002b9c:	801a      	strh	r2, [r3, #0]
//	ADC_VAL[0]= HAL_ADC_GetValue(&hadc1);
	HAL_ADC_Stop(&hadc1);
 8002b9e:	4802      	ldr	r0, [pc, #8]	; (8002ba8 <ReadEda+0x44>)
 8002ba0:	f001 f858 	bl	8003c54 <HAL_ADC_Stop>
}
 8002ba4:	bf00      	nop
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000a24 	.word	0x20000a24
 8002bac:	20000f86 	.word	0x20000f86

08002bb0 <Eda>:

void Eda(){
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0

	//ADC_EDA();
	ReadEda();
 8002bb4:	f7ff ffd6 	bl	8002b64 <ReadEda>
	//HAL_ADC_DeInit(&hadc1);

}
 8002bb8:	bf00      	nop
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <ReadPPG>:

void ReadPPG(){
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0

	ADC_Select_CH3();
 8002bc0:	f7ff fbb8 	bl	8002334 <ADC_Select_CH3>
	// Start ADC conversion
	//HAL_ADC_Start(&hadc1);
	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8002bc4:	480e      	ldr	r0, [pc, #56]	; (8002c00 <ReadPPG+0x44>)
 8002bc6:	f000 fff1 	bl	8003bac <HAL_ADC_Start>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <ReadPPG+0x18>
	{
		Error_Handler();
 8002bd0:	f000 f81a 	bl	8002c08 <Error_Handler>
	}
	// Wait for ADC conversion to complete
	//HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK)
 8002bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd8:	4809      	ldr	r0, [pc, #36]	; (8002c00 <ReadPPG+0x44>)
 8002bda:	f001 f86e 	bl	8003cba <HAL_ADC_PollForConversion>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <ReadPPG+0x2c>
	{
		Error_Handler();
 8002be4:	f000 f810 	bl	8002c08 <Error_Handler>
	}
	// Read ADC value
	ppg_data= HAL_ADC_GetValue(&hadc1);
 8002be8:	4805      	ldr	r0, [pc, #20]	; (8002c00 <ReadPPG+0x44>)
 8002bea:	f001 f8f3 	bl	8003dd4 <HAL_ADC_GetValue>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <ReadPPG+0x48>)
 8002bf4:	801a      	strh	r2, [r3, #0]
//	ADC_VAL[1]= HAL_ADC_GetValue(&hadc1);
	HAL_ADC_Stop(&hadc1);
 8002bf6:	4802      	ldr	r0, [pc, #8]	; (8002c00 <ReadPPG+0x44>)
 8002bf8:	f001 f82c 	bl	8003c54 <HAL_ADC_Stop>
}
 8002bfc:	bf00      	nop
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	20000a24 	.word	0x20000a24
 8002c04:	2000175c 	.word	0x2000175c

08002c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002c0c:	b672      	cpsid	i
}
 8002c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c10:	e7fe      	b.n	8002c10 <Error_Handler+0x8>

08002c12 <LL_RCC_EnableRTC>:
{
 8002c12:	b480      	push	{r7}
 8002c14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c2a:	bf00      	nop
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <LL_AHB2_GRP1_EnableClock>:
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4013      	ands	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c58:	68fb      	ldr	r3, [r7, #12]
}
 8002c5a:	bf00      	nop
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <LL_AHB3_GRP1_EnableClock>:
{
 8002c66:	b480      	push	{r7}
 8002c68:	b085      	sub	sp, #20
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4013      	ands	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
}
 8002c8c:	bf00      	nop
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <LL_APB1_GRP1_EnableClock>:
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ca6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
}
 8002cbe:	bf00      	nop
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <LL_APB2_GRP1_EnableClock>:
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b085      	sub	sp, #20
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4013      	ands	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002cee:	68fb      	ldr	r3, [r7, #12]
}
 8002cf0:	bf00      	nop
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002d00:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002d04:	f7ff ffaf 	bl	8002c66 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	202e      	movs	r0, #46	; 0x2e
 8002d0e:	f001 ff06 	bl	8004b1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002d12:	202e      	movs	r0, #46	; 0x2e
 8002d14:	f001 ff1d 	bl	8004b52 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d18:	bf00      	nop
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d24:	f107 030c 	add.w	r3, r7, #12
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	605a      	str	r2, [r3, #4]
 8002d2e:	609a      	str	r2, [r3, #8]
 8002d30:	60da      	str	r2, [r3, #12]
 8002d32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a14      	ldr	r2, [pc, #80]	; (8002d8c <HAL_ADC_MspInit+0x70>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d122      	bne.n	8002d84 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002d3e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d42:	f7ff ff77 	bl	8002c34 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d46:	2004      	movs	r0, #4
 8002d48:	f7ff ff74 	bl	8002c34 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	f7ff ff71 	bl	8002c34 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = PPG_Pin;
 8002d52:	2304      	movs	r3, #4
 8002d54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d56:	2303      	movs	r3, #3
 8002d58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(PPG_GPIO_Port, &GPIO_InitStruct);
 8002d5e:	f107 030c 	add.w	r3, r7, #12
 8002d62:	4619      	mov	r1, r3
 8002d64:	480a      	ldr	r0, [pc, #40]	; (8002d90 <HAL_ADC_MspInit+0x74>)
 8002d66:	f002 fa6b 	bl	8005240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = EDA_Pin;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(EDA_GPIO_Port, &GPIO_InitStruct);
 8002d76:	f107 030c 	add.w	r3, r7, #12
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d80:	f002 fa5e 	bl	8005240 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d84:	bf00      	nop
 8002d86:	3720      	adds	r7, #32
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	50040000 	.word	0x50040000
 8002d90:	48000800 	.word	0x48000800

08002d94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b09c      	sub	sp, #112	; 0x70
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dac:	f107 030c 	add.w	r3, r7, #12
 8002db0:	2250      	movs	r2, #80	; 0x50
 8002db2:	2100      	movs	r1, #0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f00a ff05 	bl	800dbc4 <memset>
  if(hi2c->Instance==I2C3)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a17      	ldr	r2, [pc, #92]	; (8002e1c <HAL_I2C_MspInit+0x88>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d126      	bne.n	8002e12 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002dc4:	2308      	movs	r3, #8
 8002dc6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002dc8:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8002dcc:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dce:	f107 030c 	add.w	r3, r7, #12
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f004 fe60 	bl	8007a98 <HAL_RCCEx_PeriphCLKConfig>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002dde:	f7ff ff13 	bl	8002c08 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de2:	2002      	movs	r0, #2
 8002de4:	f7ff ff26 	bl	8002c34 <LL_AHB2_GRP1_EnableClock>
    /**I2C3 GPIO Configuration
    PB13     ------> I2C3_SCL
    PB14     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002de8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002dec:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dee:	2312      	movs	r3, #18
 8002df0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df6:	2300      	movs	r3, #0
 8002df8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002dfa:	2304      	movs	r3, #4
 8002dfc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dfe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e02:	4619      	mov	r1, r3
 8002e04:	4806      	ldr	r0, [pc, #24]	; (8002e20 <HAL_I2C_MspInit+0x8c>)
 8002e06:	f002 fa1b 	bl	8005240 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002e0a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002e0e:	f7ff ff43 	bl	8002c98 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002e12:	bf00      	nop
 8002e14:	3770      	adds	r7, #112	; 0x70
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40005c00 	.word	0x40005c00
 8002e20:	48000400 	.word	0x48000400

08002e24 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a0d      	ldr	r2, [pc, #52]	; (8002e68 <HAL_IPCC_MspInit+0x44>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d113      	bne.n	8002e5e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002e36:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002e3a:	f7ff ff14 	bl	8002c66 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2100      	movs	r1, #0
 8002e42:	202c      	movs	r0, #44	; 0x2c
 8002e44:	f001 fe6b 	bl	8004b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002e48:	202c      	movs	r0, #44	; 0x2c
 8002e4a:	f001 fe82 	bl	8004b52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2100      	movs	r1, #0
 8002e52:	202d      	movs	r0, #45	; 0x2d
 8002e54:	f001 fe63 	bl	8004b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002e58:	202d      	movs	r0, #45	; 0x2d
 8002e5a:	f001 fe7a 	bl	8004b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	58000c00 	.word	0x58000c00

08002e6c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b096      	sub	sp, #88	; 0x58
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e74:	f107 0308 	add.w	r3, r7, #8
 8002e78:	2250      	movs	r2, #80	; 0x50
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f00a fea1 	bl	800dbc4 <memset>
  if(hrtc->Instance==RTC)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a12      	ldr	r2, [pc, #72]	; (8002ed0 <HAL_RTC_MspInit+0x64>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d11d      	bne.n	8002ec8 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002e8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e90:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002e92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e96:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e98:	f107 0308 	add.w	r3, r7, #8
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f004 fdfb 	bl	8007a98 <HAL_RCCEx_PeriphCLKConfig>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002ea8:	f7ff feae 	bl	8002c08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002eac:	f7ff feb1 	bl	8002c12 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002eb0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002eb4:	f7ff fef0 	bl	8002c98 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2100      	movs	r1, #0
 8002ebc:	2003      	movs	r0, #3
 8002ebe:	f001 fe2e 	bl	8004b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002ec2:	2003      	movs	r0, #3
 8002ec4:	f001 fe45 	bl	8004b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ec8:	bf00      	nop
 8002eca:	3758      	adds	r7, #88	; 0x58
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40002800 	.word	0x40002800

08002ed4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b09c      	sub	sp, #112	; 0x70
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002edc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	605a      	str	r2, [r3, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	60da      	str	r2, [r3, #12]
 8002eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002eec:	f107 030c 	add.w	r3, r7, #12
 8002ef0:	2250      	movs	r2, #80	; 0x50
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f00a fe65 	bl	800dbc4 <memset>
  if(huart->Instance==USART1)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a43      	ldr	r2, [pc, #268]	; (800300c <HAL_UART_MspInit+0x138>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d17f      	bne.n	8003004 <HAL_UART_MspInit+0x130>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f04:	2301      	movs	r3, #1
 8002f06:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f0c:	f107 030c 	add.w	r3, r7, #12
 8002f10:	4618      	mov	r0, r3
 8002f12:	f004 fdc1 	bl	8007a98 <HAL_RCCEx_PeriphCLKConfig>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f1c:	f7ff fe74 	bl	8002c08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f20:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002f24:	f7ff fed1 	bl	8002cca <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f28:	2002      	movs	r0, #2
 8002f2a:	f7ff fe83 	bl	8002c34 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002f2e:	23c0      	movs	r3, #192	; 0xc0
 8002f30:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f32:	2302      	movs	r3, #2
 8002f34:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f36:	2301      	movs	r3, #1
 8002f38:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f3e:	2307      	movs	r3, #7
 8002f40:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f42:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f46:	4619      	mov	r1, r3
 8002f48:	4831      	ldr	r0, [pc, #196]	; (8003010 <HAL_UART_MspInit+0x13c>)
 8002f4a:	f002 f979 	bl	8005240 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8002f4e:	4b31      	ldr	r3, [pc, #196]	; (8003014 <HAL_UART_MspInit+0x140>)
 8002f50:	4a31      	ldr	r2, [pc, #196]	; (8003018 <HAL_UART_MspInit+0x144>)
 8002f52:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002f54:	4b2f      	ldr	r3, [pc, #188]	; (8003014 <HAL_UART_MspInit+0x140>)
 8002f56:	220e      	movs	r2, #14
 8002f58:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f5a:	4b2e      	ldr	r3, [pc, #184]	; (8003014 <HAL_UART_MspInit+0x140>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f60:	4b2c      	ldr	r3, [pc, #176]	; (8003014 <HAL_UART_MspInit+0x140>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f66:	4b2b      	ldr	r3, [pc, #172]	; (8003014 <HAL_UART_MspInit+0x140>)
 8002f68:	2280      	movs	r2, #128	; 0x80
 8002f6a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f6c:	4b29      	ldr	r3, [pc, #164]	; (8003014 <HAL_UART_MspInit+0x140>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f72:	4b28      	ldr	r3, [pc, #160]	; (8003014 <HAL_UART_MspInit+0x140>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002f78:	4b26      	ldr	r3, [pc, #152]	; (8003014 <HAL_UART_MspInit+0x140>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f7e:	4b25      	ldr	r3, [pc, #148]	; (8003014 <HAL_UART_MspInit+0x140>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002f84:	4823      	ldr	r0, [pc, #140]	; (8003014 <HAL_UART_MspInit+0x140>)
 8002f86:	f001 fe29 	bl	8004bdc <HAL_DMA_Init>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002f90:	f7ff fe3a 	bl	8002c08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a1f      	ldr	r2, [pc, #124]	; (8003014 <HAL_UART_MspInit+0x140>)
 8002f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002f9c:	4a1d      	ldr	r2, [pc, #116]	; (8003014 <HAL_UART_MspInit+0x140>)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8002fa2:	4b1e      	ldr	r3, [pc, #120]	; (800301c <HAL_UART_MspInit+0x148>)
 8002fa4:	4a1e      	ldr	r2, [pc, #120]	; (8003020 <HAL_UART_MspInit+0x14c>)
 8002fa6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002fa8:	4b1c      	ldr	r3, [pc, #112]	; (800301c <HAL_UART_MspInit+0x148>)
 8002faa:	220f      	movs	r2, #15
 8002fac:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fae:	4b1b      	ldr	r3, [pc, #108]	; (800301c <HAL_UART_MspInit+0x148>)
 8002fb0:	2210      	movs	r2, #16
 8002fb2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fb4:	4b19      	ldr	r3, [pc, #100]	; (800301c <HAL_UART_MspInit+0x148>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fba:	4b18      	ldr	r3, [pc, #96]	; (800301c <HAL_UART_MspInit+0x148>)
 8002fbc:	2280      	movs	r2, #128	; 0x80
 8002fbe:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fc0:	4b16      	ldr	r3, [pc, #88]	; (800301c <HAL_UART_MspInit+0x148>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fc6:	4b15      	ldr	r3, [pc, #84]	; (800301c <HAL_UART_MspInit+0x148>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002fcc:	4b13      	ldr	r3, [pc, #76]	; (800301c <HAL_UART_MspInit+0x148>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002fd2:	4b12      	ldr	r3, [pc, #72]	; (800301c <HAL_UART_MspInit+0x148>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002fd8:	4810      	ldr	r0, [pc, #64]	; (800301c <HAL_UART_MspInit+0x148>)
 8002fda:	f001 fdff 	bl	8004bdc <HAL_DMA_Init>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <HAL_UART_MspInit+0x114>
    {
      Error_Handler();
 8002fe4:	f7ff fe10 	bl	8002c08 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a0c      	ldr	r2, [pc, #48]	; (800301c <HAL_UART_MspInit+0x148>)
 8002fec:	67da      	str	r2, [r3, #124]	; 0x7c
 8002fee:	4a0b      	ldr	r2, [pc, #44]	; (800301c <HAL_UART_MspInit+0x148>)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	2024      	movs	r0, #36	; 0x24
 8002ffa:	f001 fd90 	bl	8004b1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ffe:	2024      	movs	r0, #36	; 0x24
 8003000:	f001 fda7 	bl	8004b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003004:	bf00      	nop
 8003006:	3770      	adds	r7, #112	; 0x70
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40013800 	.word	0x40013800
 8003010:	48000400 	.word	0x48000400
 8003014:	20000bd0 	.word	0x20000bd0
 8003018:	40020008 	.word	0x40020008
 800301c:	20000c30 	.word	0x20000c30
 8003020:	4002001c 	.word	0x4002001c

08003024 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800302c:	f107 030c 	add.w	r3, r7, #12
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	60da      	str	r2, [r3, #12]
 800303a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a0f      	ldr	r2, [pc, #60]	; (8003080 <HAL_PCD_MspInit+0x5c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d118      	bne.n	8003078 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003046:	2001      	movs	r0, #1
 8003048:	f7ff fdf4 	bl	8002c34 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800304c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003050:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003052:	2302      	movs	r3, #2
 8003054:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305a:	2300      	movs	r3, #0
 800305c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800305e:	230a      	movs	r3, #10
 8003060:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003062:	f107 030c 	add.w	r3, r7, #12
 8003066:	4619      	mov	r1, r3
 8003068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800306c:	f002 f8e8 	bl	8005240 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003070:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003074:	f7ff fe10 	bl	8002c98 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8003078:	bf00      	nop
 800307a:	3720      	adds	r7, #32
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40006800 	.word	0x40006800

08003084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003088:	e7fe      	b.n	8003088 <NMI_Handler+0x4>

0800308a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800308a:	b480      	push	{r7}
 800308c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800308e:	e7fe      	b.n	800308e <HardFault_Handler+0x4>

08003090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003094:	e7fe      	b.n	8003094 <MemManage_Handler+0x4>

08003096 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003096:	b480      	push	{r7}
 8003098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800309a:	e7fe      	b.n	800309a <BusFault_Handler+0x4>

0800309c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030a0:	e7fe      	b.n	80030a0 <UsageFault_Handler+0x4>

080030a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030a2:	b480      	push	{r7}
 80030a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030a6:	bf00      	nop
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030be:	b480      	push	{r7}
 80030c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030d0:	f000 f9c6 	bl	8003460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030d4:	bf00      	nop
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80030dc:	f7fe fd76 	bl	8001bcc <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80030e0:	bf00      	nop
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80030e8:	4802      	ldr	r0, [pc, #8]	; (80030f4 <DMA1_Channel1_IRQHandler+0x10>)
 80030ea:	f001 ff58 	bl	8004f9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20000bd0 	.word	0x20000bd0

080030f8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80030fc:	4802      	ldr	r0, [pc, #8]	; (8003108 <DMA1_Channel2_IRQHandler+0x10>)
 80030fe:	f001 ff4e 	bl	8004f9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000c30 	.word	0x20000c30

0800310c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003110:	4802      	ldr	r0, [pc, #8]	; (800311c <USART1_IRQHandler+0x10>)
 8003112:	f005 f9fb 	bl	800850c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000b3c 	.word	0x20000b3c

08003120 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003124:	f00a f952 	bl	800d3cc <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003128:	bf00      	nop
 800312a:	bd80      	pop	{r7, pc}

0800312c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003130:	f00a f984 	bl	800d43c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003134:	bf00      	nop
 8003136:	bd80      	pop	{r7, pc}

08003138 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800313c:	f002 fa22 	bl	8005584 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003140:	bf00      	nop
 8003142:	bd80      	pop	{r7, pc}

08003144 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	e00a      	b.n	800316c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003156:	f3af 8000 	nop.w
 800315a:	4601      	mov	r1, r0
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	60ba      	str	r2, [r7, #8]
 8003162:	b2ca      	uxtb	r2, r1
 8003164:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	3301      	adds	r3, #1
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	429a      	cmp	r2, r3
 8003172:	dbf0      	blt.n	8003156 <_read+0x12>
  }

  return len;
 8003174:	687b      	ldr	r3, [r7, #4]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <_close>:
  }
  return len;
}

int _close(int file)
{
 800317e:	b480      	push	{r7}
 8003180:	b083      	sub	sp, #12
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003186:	f04f 33ff 	mov.w	r3, #4294967295
}
 800318a:	4618      	mov	r0, r3
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031a6:	605a      	str	r2, [r3, #4]
  return 0;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <_isatty>:

int _isatty(int file)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031be:	2301      	movs	r3, #1
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031f0:	4a14      	ldr	r2, [pc, #80]	; (8003244 <_sbrk+0x5c>)
 80031f2:	4b15      	ldr	r3, [pc, #84]	; (8003248 <_sbrk+0x60>)
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031fc:	4b13      	ldr	r3, [pc, #76]	; (800324c <_sbrk+0x64>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d102      	bne.n	800320a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003204:	4b11      	ldr	r3, [pc, #68]	; (800324c <_sbrk+0x64>)
 8003206:	4a12      	ldr	r2, [pc, #72]	; (8003250 <_sbrk+0x68>)
 8003208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800320a:	4b10      	ldr	r3, [pc, #64]	; (800324c <_sbrk+0x64>)
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4413      	add	r3, r2
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	429a      	cmp	r2, r3
 8003216:	d207      	bcs.n	8003228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003218:	f00a fc9c 	bl	800db54 <__errno>
 800321c:	4603      	mov	r3, r0
 800321e:	220c      	movs	r2, #12
 8003220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003222:	f04f 33ff 	mov.w	r3, #4294967295
 8003226:	e009      	b.n	800323c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003228:	4b08      	ldr	r3, [pc, #32]	; (800324c <_sbrk+0x64>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800322e:	4b07      	ldr	r3, [pc, #28]	; (800324c <_sbrk+0x64>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4413      	add	r3, r2
 8003236:	4a05      	ldr	r2, [pc, #20]	; (800324c <_sbrk+0x64>)
 8003238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800323a:	68fb      	ldr	r3, [r7, #12]
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	20030000 	.word	0x20030000
 8003248:	00000400 	.word	0x00000400
 800324c:	2000178c 	.word	0x2000178c
 8003250:	20002970 	.word	0x20002970

08003254 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003258:	4b24      	ldr	r3, [pc, #144]	; (80032ec <SystemInit+0x98>)
 800325a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325e:	4a23      	ldr	r2, [pc, #140]	; (80032ec <SystemInit+0x98>)
 8003260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800327c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003280:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800328c:	4b18      	ldr	r3, [pc, #96]	; (80032f0 <SystemInit+0x9c>)
 800328e:	4013      	ands	r3, r2
 8003290:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800329a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800329e:	f023 0305 	bic.w	r3, r3, #5
 80032a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80032a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032b2:	f023 0301 	bic.w	r3, r3, #1
 80032b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80032ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032be:	4a0d      	ldr	r2, [pc, #52]	; (80032f4 <SystemInit+0xa0>)
 80032c0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80032c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c6:	4a0b      	ldr	r2, [pc, #44]	; (80032f4 <SystemInit+0xa0>)
 80032c8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80032ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032d8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80032da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032de:	2200      	movs	r2, #0
 80032e0:	619a      	str	r2, [r3, #24]
}
 80032e2:	bf00      	nop
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	e000ed00 	.word	0xe000ed00
 80032f0:	faf6fefb 	.word	0xfaf6fefb
 80032f4:	22041000 	.word	0x22041000

080032f8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80032f8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032fa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032fc:	3304      	adds	r3, #4

080032fe <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032fe:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003300:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003302:	d3f9      	bcc.n	80032f8 <CopyDataInit>
  bx lr
 8003304:	4770      	bx	lr

08003306 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003306:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003308:	3004      	adds	r0, #4

0800330a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800330a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800330c:	d3fb      	bcc.n	8003306 <FillZerobss>
  bx lr
 800330e:	4770      	bx	lr

08003310 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003310:	480c      	ldr	r0, [pc, #48]	; (8003344 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003312:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003314:	f7ff ff9e 	bl	8003254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003318:	480b      	ldr	r0, [pc, #44]	; (8003348 <LoopForever+0x6>)
 800331a:	490c      	ldr	r1, [pc, #48]	; (800334c <LoopForever+0xa>)
 800331c:	4a0c      	ldr	r2, [pc, #48]	; (8003350 <LoopForever+0xe>)
 800331e:	2300      	movs	r3, #0
 8003320:	f7ff ffed 	bl	80032fe <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003324:	480b      	ldr	r0, [pc, #44]	; (8003354 <LoopForever+0x12>)
 8003326:	490c      	ldr	r1, [pc, #48]	; (8003358 <LoopForever+0x16>)
 8003328:	4a0c      	ldr	r2, [pc, #48]	; (800335c <LoopForever+0x1a>)
 800332a:	2300      	movs	r3, #0
 800332c:	f7ff ffe7 	bl	80032fe <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003330:	480b      	ldr	r0, [pc, #44]	; (8003360 <LoopForever+0x1e>)
 8003332:	490c      	ldr	r1, [pc, #48]	; (8003364 <LoopForever+0x22>)
 8003334:	2300      	movs	r3, #0
 8003336:	f7ff ffe8 	bl	800330a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800333a:	f00a fc11 	bl	800db60 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800333e:	f7ff f847 	bl	80023d0 <main>

08003342 <LoopForever>:

LoopForever:
  b LoopForever
 8003342:	e7fe      	b.n	8003342 <LoopForever>
  ldr   r0, =_estack
 8003344:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003348:	20000008 	.word	0x20000008
 800334c:	20000094 	.word	0x20000094
 8003350:	0801006c 	.word	0x0801006c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003354:	200301e3 	.word	0x200301e3
 8003358:	200301e3 	.word	0x200301e3
 800335c:	080109c1 	.word	0x080109c1
  INIT_BSS _sbss, _ebss
 8003360:	20000964 	.word	0x20000964
 8003364:	20002970 	.word	0x20002970

08003368 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003368:	e7fe      	b.n	8003368 <ADC1_IRQHandler>
	...

0800336c <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003370:	4b05      	ldr	r3, [pc, #20]	; (8003388 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	4a04      	ldr	r2, [pc, #16]	; (8003388 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003376:	f043 0301 	orr.w	r3, r3, #1
 800337a:	6053      	str	r3, [r2, #4]
}
 800337c:	bf00      	nop
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	e0042000 	.word	0xe0042000

0800338c <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003390:	4b05      	ldr	r3, [pc, #20]	; (80033a8 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	4a04      	ldr	r2, [pc, #16]	; (80033a8 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003396:	f043 0302 	orr.w	r3, r3, #2
 800339a:	6053      	str	r3, [r2, #4]
}
 800339c:	bf00      	nop
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	e0042000 	.word	0xe0042000

080033ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033b6:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <HAL_Init+0x3c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a0b      	ldr	r2, [pc, #44]	; (80033e8 <HAL_Init+0x3c>)
 80033bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033c2:	2003      	movs	r0, #3
 80033c4:	f001 fba0 	bl	8004b08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033c8:	2000      	movs	r0, #0
 80033ca:	f000 f80f 	bl	80033ec <HAL_InitTick>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d002      	beq.n	80033da <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	71fb      	strb	r3, [r7, #7]
 80033d8:	e001      	b.n	80033de <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033da:	f7ff fc8f 	bl	8002cfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033de:	79fb      	ldrb	r3, [r7, #7]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	58004000 	.word	0x58004000

080033ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80033f8:	4b17      	ldr	r3, [pc, #92]	; (8003458 <HAL_InitTick+0x6c>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d024      	beq.n	800344a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003400:	f004 f8aa 	bl	8007558 <HAL_RCC_GetHCLKFreq>
 8003404:	4602      	mov	r2, r0
 8003406:	4b14      	ldr	r3, [pc, #80]	; (8003458 <HAL_InitTick+0x6c>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	4619      	mov	r1, r3
 800340c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003410:	fbb3 f3f1 	udiv	r3, r3, r1
 8003414:	fbb2 f3f3 	udiv	r3, r2, r3
 8003418:	4618      	mov	r0, r3
 800341a:	f001 fbb6 	bl	8004b8a <HAL_SYSTICK_Config>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10f      	bne.n	8003444 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b0f      	cmp	r3, #15
 8003428:	d809      	bhi.n	800343e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800342a:	2200      	movs	r2, #0
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	f04f 30ff 	mov.w	r0, #4294967295
 8003432:	f001 fb74 	bl	8004b1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003436:	4a09      	ldr	r2, [pc, #36]	; (800345c <HAL_InitTick+0x70>)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	e007      	b.n	800344e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	73fb      	strb	r3, [r7, #15]
 8003442:	e004      	b.n	800344e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	73fb      	strb	r3, [r7, #15]
 8003448:	e001      	b.n	800344e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800344e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	20000014 	.word	0x20000014
 800345c:	20000010 	.word	0x20000010

08003460 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003464:	4b06      	ldr	r3, [pc, #24]	; (8003480 <HAL_IncTick+0x20>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	461a      	mov	r2, r3
 800346a:	4b06      	ldr	r3, [pc, #24]	; (8003484 <HAL_IncTick+0x24>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4413      	add	r3, r2
 8003470:	4a04      	ldr	r2, [pc, #16]	; (8003484 <HAL_IncTick+0x24>)
 8003472:	6013      	str	r3, [r2, #0]
}
 8003474:	bf00      	nop
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	20000014 	.word	0x20000014
 8003484:	20001790 	.word	0x20001790

08003488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  return uwTick;
 800348c:	4b03      	ldr	r3, [pc, #12]	; (800349c <HAL_GetTick+0x14>)
 800348e:	681b      	ldr	r3, [r3, #0]
}
 8003490:	4618      	mov	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20001790 	.word	0x20001790

080034a0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80034a4:	4b03      	ldr	r3, [pc, #12]	; (80034b4 <HAL_GetTickPrio+0x14>)
 80034a6:	681b      	ldr	r3, [r3, #0]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	20000010 	.word	0x20000010

080034b8 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80034bc:	4b03      	ldr	r3, [pc, #12]	; (80034cc <HAL_GetTickFreq+0x14>)
 80034be:	781b      	ldrb	r3, [r3, #0]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	20000014 	.word	0x20000014

080034d0 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80034d4:	f7ff ff4a 	bl	800336c <LL_DBGMCU_EnableDBGSleepMode>
}
 80034d8:	bf00      	nop
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80034e0:	f7ff ff54 	bl	800338c <LL_DBGMCU_EnableDBGStopMode>
}
 80034e4:	bf00      	nop
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	609a      	str	r2, [r3, #8]
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003544:	4618      	mov	r0, r3
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	3360      	adds	r3, #96	; 0x60
 8003562:	461a      	mov	r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	4b08      	ldr	r3, [pc, #32]	; (8003594 <LL_ADC_SetOffset+0x44>)
 8003572:	4013      	ands	r3, r2
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	4313      	orrs	r3, r2
 8003580:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003588:	bf00      	nop
 800358a:	371c      	adds	r7, #28
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	03fff000 	.word	0x03fff000

08003598 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3360      	adds	r3, #96	; 0x60
 80035a6:	461a      	mov	r2, r3
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	3360      	adds	r3, #96	; 0x60
 80035d4:	461a      	mov	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	431a      	orrs	r2, r3
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80035ee:	bf00      	nop
 80035f0:	371c      	adds	r7, #28
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003612:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8003614:	4618      	mov	r0, r3
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	3330      	adds	r3, #48	; 0x30
 8003630:	461a      	mov	r2, r3
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	0a1b      	lsrs	r3, r3, #8
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	f003 030c 	and.w	r3, r3, #12
 800363c:	4413      	add	r3, r2
 800363e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f003 031f 	and.w	r3, r3, #31
 800364a:	211f      	movs	r1, #31
 800364c:	fa01 f303 	lsl.w	r3, r1, r3
 8003650:	43db      	mvns	r3, r3
 8003652:	401a      	ands	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	0e9b      	lsrs	r3, r3, #26
 8003658:	f003 011f 	and.w	r1, r3, #31
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f003 031f 	and.w	r3, r3, #31
 8003662:	fa01 f303 	lsl.w	r3, r1, r3
 8003666:	431a      	orrs	r2, r3
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800366c:	bf00      	nop
 800366e:	371c      	adds	r7, #28
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	3314      	adds	r3, #20
 8003688:	461a      	mov	r2, r3
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	0e5b      	lsrs	r3, r3, #25
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	4413      	add	r3, r2
 8003696:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	0d1b      	lsrs	r3, r3, #20
 80036a0:	f003 031f 	and.w	r3, r3, #31
 80036a4:	2107      	movs	r1, #7
 80036a6:	fa01 f303 	lsl.w	r3, r1, r3
 80036aa:	43db      	mvns	r3, r3
 80036ac:	401a      	ands	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	0d1b      	lsrs	r3, r3, #20
 80036b2:	f003 031f 	and.w	r3, r3, #31
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	fa01 f303 	lsl.w	r3, r1, r3
 80036bc:	431a      	orrs	r2, r3
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80036c2:	bf00      	nop
 80036c4:	371c      	adds	r7, #28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
	...

080036d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e8:	43db      	mvns	r3, r3
 80036ea:	401a      	ands	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f003 0318 	and.w	r3, r3, #24
 80036f2:	4908      	ldr	r1, [pc, #32]	; (8003714 <LL_ADC_SetChannelSingleDiff+0x44>)
 80036f4:	40d9      	lsrs	r1, r3
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	400b      	ands	r3, r1
 80036fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036fe:	431a      	orrs	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003706:	bf00      	nop
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	0007ffff 	.word	0x0007ffff

08003718 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003728:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6093      	str	r3, [r2, #8]
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800374c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003750:	d101      	bne.n	8003756 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003774:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003778:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800379c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037a0:	d101      	bne.n	80037a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037c8:	f043 0201 	orr.w	r2, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037f0:	f043 0202 	orr.w	r2, r3, #2
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <LL_ADC_IsEnabled+0x18>
 8003818:	2301      	movs	r3, #1
 800381a:	e000      	b.n	800381e <LL_ADC_IsEnabled+0x1a>
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b02      	cmp	r3, #2
 800383c:	d101      	bne.n	8003842 <LL_ADC_IsDisableOngoing+0x18>
 800383e:	2301      	movs	r3, #1
 8003840:	e000      	b.n	8003844 <LL_ADC_IsDisableOngoing+0x1a>
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003860:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003864:	f043 0204 	orr.w	r2, r3, #4
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003888:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800388c:	f043 0210 	orr.w	r2, r3, #16
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d101      	bne.n	80038b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80038b4:	2301      	movs	r3, #1
 80038b6:	e000      	b.n	80038ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038da:	f043 0220 	orr.w	r2, r3, #32
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d101      	bne.n	8003906 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8003920:	2300      	movs	r3, #0
 8003922:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003924:	2300      	movs	r3, #0
 8003926:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e12e      	b.n	8003b90 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	2b00      	cmp	r3, #0
 800393e:	d109      	bne.n	8003954 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff f9eb 	bl	8002d1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff feef 	bl	800373c <LL_ADC_IsDeepPowerDownEnabled>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d004      	beq.n	800396e <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f7ff fed5 	bl	8003718 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff ff0a 	bl	800378c <LL_ADC_IsInternalRegulatorEnabled>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d115      	bne.n	80039aa <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff feee 	bl	8003764 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003988:	4b83      	ldr	r3, [pc, #524]	; (8003b98 <HAL_ADC_Init+0x284>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	099b      	lsrs	r3, r3, #6
 800398e:	4a83      	ldr	r2, [pc, #524]	; (8003b9c <HAL_ADC_Init+0x288>)
 8003990:	fba2 2303 	umull	r2, r3, r2, r3
 8003994:	099b      	lsrs	r3, r3, #6
 8003996:	3301      	adds	r3, #1
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800399c:	e002      	b.n	80039a4 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	3b01      	subs	r3, #1
 80039a2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f9      	bne.n	800399e <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff feec 	bl	800378c <LL_ADC_IsInternalRegulatorEnabled>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10d      	bne.n	80039d6 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039be:	f043 0210 	orr.w	r2, r3, #16
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ca:	f043 0201 	orr.w	r2, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff ff60 	bl	80038a0 <LL_ADC_REG_IsConversionOngoing>
 80039e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e6:	f003 0310 	and.w	r3, r3, #16
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f040 80c7 	bne.w	8003b7e <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f040 80c3 	bne.w	8003b7e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003a00:	f043 0202 	orr.w	r2, r3, #2
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff fef9 	bl	8003804 <LL_ADC_IsEnabled>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10b      	bne.n	8003a30 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a18:	4861      	ldr	r0, [pc, #388]	; (8003ba0 <HAL_ADC_Init+0x28c>)
 8003a1a:	f7ff fef3 	bl	8003804 <LL_ADC_IsEnabled>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d105      	bne.n	8003a30 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	4619      	mov	r1, r3
 8003a2a:	485e      	ldr	r0, [pc, #376]	; (8003ba4 <HAL_ADC_Init+0x290>)
 8003a2c:	f7ff fd5c 	bl	80034e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	7e5b      	ldrb	r3, [r3, #25]
 8003a34:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a3a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003a40:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003a46:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a4e:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8003a50:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d106      	bne.n	8003a70 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	3b01      	subs	r3, #1
 8003a68:	045b      	lsls	r3, r3, #17
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d009      	beq.n	8003a8c <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	4b45      	ldr	r3, [pc, #276]	; (8003ba8 <HAL_ADC_Init+0x294>)
 8003a94:	4013      	ands	r3, r2
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6812      	ldr	r2, [r2, #0]
 8003a9a:	69b9      	ldr	r1, [r7, #24]
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff fefb 	bl	80038a0 <LL_ADC_REG_IsConversionOngoing>
 8003aaa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff ff1c 	bl	80038ee <LL_ADC_INJ_IsConversionOngoing>
 8003ab6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d13d      	bne.n	8003b3a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d13a      	bne.n	8003b3a <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ac8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ad0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ae0:	f023 0302 	bic.w	r3, r3, #2
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6812      	ldr	r2, [r2, #0]
 8003ae8:	69b9      	ldr	r1, [r7, #24]
 8003aea:	430b      	orrs	r3, r1
 8003aec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d118      	bne.n	8003b2a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003b02:	f023 0304 	bic.w	r3, r3, #4
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b0e:	4311      	orrs	r1, r2
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003b14:	4311      	orrs	r1, r2
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f042 0201 	orr.w	r2, r2, #1
 8003b26:	611a      	str	r2, [r3, #16]
 8003b28:	e007      	b.n	8003b3a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0201 	bic.w	r2, r2, #1
 8003b38:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d10c      	bne.n	8003b5c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b48:	f023 010f 	bic.w	r1, r3, #15
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	1e5a      	subs	r2, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	631a      	str	r2, [r3, #48]	; 0x30
 8003b5a:	e007      	b.n	8003b6c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 020f 	bic.w	r2, r2, #15
 8003b6a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b70:	f023 0303 	bic.w	r3, r3, #3
 8003b74:	f043 0201 	orr.w	r2, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	655a      	str	r2, [r3, #84]	; 0x54
 8003b7c:	e007      	b.n	8003b8e <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b82:	f043 0210 	orr.w	r2, r3, #16
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3720      	adds	r7, #32
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	2000000c 	.word	0x2000000c
 8003b9c:	053e2d63 	.word	0x053e2d63
 8003ba0:	50040000 	.word	0x50040000
 8003ba4:	50040300 	.word	0x50040300
 8003ba8:	fff0c007 	.word	0xfff0c007

08003bac <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff fe71 	bl	80038a0 <LL_ADC_REG_IsConversionOngoing>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d140      	bne.n	8003c46 <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_ADC_Start+0x26>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e03c      	b.n	8003c4c <HAL_ADC_Start+0xa0>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fd8a 	bl	80046f4 <ADC_Enable>
 8003be0:	4603      	mov	r3, r0
 8003be2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d128      	bne.n	8003c3c <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003bf2:	f023 0301 	bic.w	r3, r3, #1
 8003bf6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c0a:	d106      	bne.n	8003c1a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c10:	f023 0206 	bic.w	r2, r3, #6
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	659a      	str	r2, [r3, #88]	; 0x58
 8003c18:	e002      	b.n	8003c20 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	221c      	movs	r2, #28
 8003c26:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff fe0b 	bl	8003850 <LL_ADC_REG_StartConversion>
 8003c3a:	e006      	b.n	8003c4a <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003c44:	e001      	b.n	8003c4a <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c46:	2302      	movs	r3, #2
 8003c48:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_ADC_Stop+0x16>
 8003c66:	2302      	movs	r3, #2
 8003c68:	e023      	b.n	8003cb2 <HAL_ADC_Stop+0x5e>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003c72:	2103      	movs	r1, #3
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 fc81 	bl	800457c <ADC_ConversionStop>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d111      	bne.n	8003ca8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 fdaf 	bl	80047e8 <ADC_Disable>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d109      	bne.n	8003ca8 <HAL_ADC_Stop+0x54>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c98:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c9c:	f023 0301 	bic.w	r3, r3, #1
 8003ca0:	f043 0201 	orr.w	r2, r3, #1
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	655a      	str	r2, [r3, #84]	; 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b084      	sub	sp, #16
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d102      	bne.n	8003cd2 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003ccc:	2308      	movs	r3, #8
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	e010      	b.n	8003cf4 <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d007      	beq.n	8003cf0 <HAL_ADC_PollForConversion+0x36>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce4:	f043 0220 	orr.w	r2, r3, #32
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	655a      	str	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e06d      	b.n	8003dcc <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003cf0:	2304      	movs	r3, #4
 8003cf2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003cf4:	f7ff fbc8 	bl	8003488 <HAL_GetTick>
 8003cf8:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003cfa:	e021      	b.n	8003d40 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d02:	d01d      	beq.n	8003d40 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003d04:	f7ff fbc0 	bl	8003488 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d302      	bcc.n	8003d1a <HAL_ADC_PollForConversion+0x60>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d112      	bne.n	8003d40 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4013      	ands	r3, r2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10b      	bne.n	8003d40 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2c:	f043 0204 	orr.w	r2, r3, #4
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e045      	b.n	8003dcc <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0d6      	beq.n	8003cfc <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff fc4b 	bl	80035fa <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d01c      	beq.n	8003da4 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	7e5b      	ldrb	r3, [r3, #25]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d118      	bne.n	8003da4 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d111      	bne.n	8003da4 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d105      	bne.n	8003da4 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9c:	f043 0201 	orr.w	r2, r3, #1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d104      	bne.n	8003db4 <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2208      	movs	r2, #8
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	e00a      	b.n	8003dca <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d103      	bne.n	8003dca <HAL_ADC_PollForConversion+0x110>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	220c      	movs	r2, #12
 8003dc8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
	...

08003df0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b0b6      	sub	sp, #216	; 0xd8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_ADC_ConfigChannel+0x22>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e39f      	b.n	8004552 <HAL_ADC_ConfigChannel+0x762>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7ff fd3e 	bl	80038a0 <LL_ADC_REG_IsConversionOngoing>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f040 8384 	bne.w	8004534 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6818      	ldr	r0, [r3, #0]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	6859      	ldr	r1, [r3, #4]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	f7ff fbf1 	bl	8003620 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff fd2c 	bl	80038a0 <LL_ADC_REG_IsConversionOngoing>
 8003e48:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff fd4c 	bl	80038ee <LL_ADC_INJ_IsConversionOngoing>
 8003e56:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f040 81a6 	bne.w	80041b0 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f040 81a1 	bne.w	80041b0 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6818      	ldr	r0, [r3, #0]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	6819      	ldr	r1, [r3, #0]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f7ff fbfc 	bl	8003678 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	695a      	ldr	r2, [r3, #20]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	08db      	lsrs	r3, r3, #3
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6818      	ldr	r0, [r3, #0]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	6919      	ldr	r1, [r3, #16]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003eb2:	f7ff fb4d 	bl	8003550 <LL_ADC_SetOffset>
 8003eb6:	e17b      	b.n	80041b0 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff fb6a 	bl	8003598 <LL_ADC_GetOffsetChannel>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10a      	bne.n	8003ee4 <HAL_ADC_ConfigChannel+0xf4>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff fb5f 	bl	8003598 <LL_ADC_GetOffsetChannel>
 8003eda:	4603      	mov	r3, r0
 8003edc:	0e9b      	lsrs	r3, r3, #26
 8003ede:	f003 021f 	and.w	r2, r3, #31
 8003ee2:	e01e      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x132>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2100      	movs	r1, #0
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff fb54 	bl	8003598 <LL_ADC_GetOffsetChannel>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003efa:	fa93 f3a3 	rbit	r3, r3
 8003efe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8003f02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8003f0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8003f12:	2320      	movs	r3, #32
 8003f14:	e004      	b.n	8003f20 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8003f16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f1a:	fab3 f383 	clz	r3, r3
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	461a      	mov	r2, r3
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d105      	bne.n	8003f3a <HAL_ADC_ConfigChannel+0x14a>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	0e9b      	lsrs	r3, r3, #26
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	e018      	b.n	8003f6c <HAL_ADC_ConfigChannel+0x17c>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f46:	fa93 f3a3 	rbit	r3, r3
 8003f4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003f4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003f56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8003f5e:	2320      	movs	r3, #32
 8003f60:	e004      	b.n	8003f6c <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8003f62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f66:	fab3 f383 	clz	r3, r3
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d106      	bne.n	8003f7e <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2200      	movs	r2, #0
 8003f76:	2100      	movs	r1, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff fb23 	bl	80035c4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2101      	movs	r1, #1
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff fb07 	bl	8003598 <LL_ADC_GetOffsetChannel>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10a      	bne.n	8003faa <HAL_ADC_ConfigChannel+0x1ba>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2101      	movs	r1, #1
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff fafc 	bl	8003598 <LL_ADC_GetOffsetChannel>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	0e9b      	lsrs	r3, r3, #26
 8003fa4:	f003 021f 	and.w	r2, r3, #31
 8003fa8:	e01e      	b.n	8003fe8 <HAL_ADC_ConfigChannel+0x1f8>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2101      	movs	r1, #1
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff faf1 	bl	8003598 <LL_ADC_GetOffsetChannel>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003fc0:	fa93 f3a3 	rbit	r3, r3
 8003fc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003fc8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003fd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8003fd8:	2320      	movs	r3, #32
 8003fda:	e004      	b.n	8003fe6 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8003fdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003fe0:	fab3 f383 	clz	r3, r3
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d105      	bne.n	8004000 <HAL_ADC_ConfigChannel+0x210>
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	0e9b      	lsrs	r3, r3, #26
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	e018      	b.n	8004032 <HAL_ADC_ConfigChannel+0x242>
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004008:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800400c:	fa93 f3a3 	rbit	r3, r3
 8004010:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004014:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004018:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800401c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8004024:	2320      	movs	r3, #32
 8004026:	e004      	b.n	8004032 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8004028:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800402c:	fab3 f383 	clz	r3, r3
 8004030:	b2db      	uxtb	r3, r3
 8004032:	429a      	cmp	r2, r3
 8004034:	d106      	bne.n	8004044 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2200      	movs	r2, #0
 800403c:	2101      	movs	r1, #1
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff fac0 	bl	80035c4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2102      	movs	r1, #2
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff faa4 	bl	8003598 <LL_ADC_GetOffsetChannel>
 8004050:	4603      	mov	r3, r0
 8004052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10a      	bne.n	8004070 <HAL_ADC_ConfigChannel+0x280>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2102      	movs	r1, #2
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff fa99 	bl	8003598 <LL_ADC_GetOffsetChannel>
 8004066:	4603      	mov	r3, r0
 8004068:	0e9b      	lsrs	r3, r3, #26
 800406a:	f003 021f 	and.w	r2, r3, #31
 800406e:	e01e      	b.n	80040ae <HAL_ADC_ConfigChannel+0x2be>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2102      	movs	r1, #2
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff fa8e 	bl	8003598 <LL_ADC_GetOffsetChannel>
 800407c:	4603      	mov	r3, r0
 800407e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004082:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004086:	fa93 f3a3 	rbit	r3, r3
 800408a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800408e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004092:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004096:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800409e:	2320      	movs	r3, #32
 80040a0:	e004      	b.n	80040ac <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80040a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80040a6:	fab3 f383 	clz	r3, r3
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	461a      	mov	r2, r3
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d105      	bne.n	80040c6 <HAL_ADC_ConfigChannel+0x2d6>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	0e9b      	lsrs	r3, r3, #26
 80040c0:	f003 031f 	and.w	r3, r3, #31
 80040c4:	e016      	b.n	80040f4 <HAL_ADC_ConfigChannel+0x304>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040d2:	fa93 f3a3 	rbit	r3, r3
 80040d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80040d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80040de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 80040e6:	2320      	movs	r3, #32
 80040e8:	e004      	b.n	80040f4 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 80040ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040ee:	fab3 f383 	clz	r3, r3
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d106      	bne.n	8004106 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2200      	movs	r2, #0
 80040fe:	2102      	movs	r1, #2
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff fa5f 	bl	80035c4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2103      	movs	r1, #3
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff fa43 	bl	8003598 <LL_ADC_GetOffsetChannel>
 8004112:	4603      	mov	r3, r0
 8004114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10a      	bne.n	8004132 <HAL_ADC_ConfigChannel+0x342>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2103      	movs	r1, #3
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff fa38 	bl	8003598 <LL_ADC_GetOffsetChannel>
 8004128:	4603      	mov	r3, r0
 800412a:	0e9b      	lsrs	r3, r3, #26
 800412c:	f003 021f 	and.w	r2, r3, #31
 8004130:	e017      	b.n	8004162 <HAL_ADC_ConfigChannel+0x372>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2103      	movs	r1, #3
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff fa2d 	bl	8003598 <LL_ADC_GetOffsetChannel>
 800413e:	4603      	mov	r3, r0
 8004140:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004142:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004144:	fa93 f3a3 	rbit	r3, r3
 8004148:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800414a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800414c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800414e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8004154:	2320      	movs	r3, #32
 8004156:	e003      	b.n	8004160 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8004158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800415a:	fab3 f383 	clz	r3, r3
 800415e:	b2db      	uxtb	r3, r3
 8004160:	461a      	mov	r2, r3
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800416a:	2b00      	cmp	r3, #0
 800416c:	d105      	bne.n	800417a <HAL_ADC_ConfigChannel+0x38a>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	0e9b      	lsrs	r3, r3, #26
 8004174:	f003 031f 	and.w	r3, r3, #31
 8004178:	e011      	b.n	800419e <HAL_ADC_ConfigChannel+0x3ae>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004180:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004182:	fa93 f3a3 	rbit	r3, r3
 8004186:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004188:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800418a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800418c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8004192:	2320      	movs	r3, #32
 8004194:	e003      	b.n	800419e <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8004196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004198:	fab3 f383 	clz	r3, r3
 800419c:	b2db      	uxtb	r3, r3
 800419e:	429a      	cmp	r2, r3
 80041a0:	d106      	bne.n	80041b0 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2200      	movs	r2, #0
 80041a8:	2103      	movs	r1, #3
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff fa0a 	bl	80035c4 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff fb25 	bl	8003804 <LL_ADC_IsEnabled>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f040 81c2 	bne.w	8004546 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6818      	ldr	r0, [r3, #0]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	6819      	ldr	r1, [r3, #0]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	461a      	mov	r2, r3
 80041d0:	f7ff fa7e 	bl	80036d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	4a8e      	ldr	r2, [pc, #568]	; (8004414 <HAL_ADC_ConfigChannel+0x624>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	f040 8130 	bne.w	8004440 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10b      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x418>
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	0e9b      	lsrs	r3, r3, #26
 80041f6:	3301      	adds	r3, #1
 80041f8:	f003 031f 	and.w	r3, r3, #31
 80041fc:	2b09      	cmp	r3, #9
 80041fe:	bf94      	ite	ls
 8004200:	2301      	movls	r3, #1
 8004202:	2300      	movhi	r3, #0
 8004204:	b2db      	uxtb	r3, r3
 8004206:	e019      	b.n	800423c <HAL_ADC_ConfigChannel+0x44c>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004210:	fa93 f3a3 	rbit	r3, r3
 8004214:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004216:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004218:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800421a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8004220:	2320      	movs	r3, #32
 8004222:	e003      	b.n	800422c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8004224:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004226:	fab3 f383 	clz	r3, r3
 800422a:	b2db      	uxtb	r3, r3
 800422c:	3301      	adds	r3, #1
 800422e:	f003 031f 	and.w	r3, r3, #31
 8004232:	2b09      	cmp	r3, #9
 8004234:	bf94      	ite	ls
 8004236:	2301      	movls	r3, #1
 8004238:	2300      	movhi	r3, #0
 800423a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800423c:	2b00      	cmp	r3, #0
 800423e:	d079      	beq.n	8004334 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004248:	2b00      	cmp	r3, #0
 800424a:	d107      	bne.n	800425c <HAL_ADC_ConfigChannel+0x46c>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	0e9b      	lsrs	r3, r3, #26
 8004252:	3301      	adds	r3, #1
 8004254:	069b      	lsls	r3, r3, #26
 8004256:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800425a:	e015      	b.n	8004288 <HAL_ADC_ConfigChannel+0x498>
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004264:	fa93 f3a3 	rbit	r3, r3
 8004268:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800426a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800426c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800426e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004274:	2320      	movs	r3, #32
 8004276:	e003      	b.n	8004280 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800427a:	fab3 f383 	clz	r3, r3
 800427e:	b2db      	uxtb	r3, r3
 8004280:	3301      	adds	r3, #1
 8004282:	069b      	lsls	r3, r3, #26
 8004284:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004290:	2b00      	cmp	r3, #0
 8004292:	d109      	bne.n	80042a8 <HAL_ADC_ConfigChannel+0x4b8>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	0e9b      	lsrs	r3, r3, #26
 800429a:	3301      	adds	r3, #1
 800429c:	f003 031f 	and.w	r3, r3, #31
 80042a0:	2101      	movs	r1, #1
 80042a2:	fa01 f303 	lsl.w	r3, r1, r3
 80042a6:	e017      	b.n	80042d8 <HAL_ADC_ConfigChannel+0x4e8>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042b0:	fa93 f3a3 	rbit	r3, r3
 80042b4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80042b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80042ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 80042c0:	2320      	movs	r3, #32
 80042c2:	e003      	b.n	80042cc <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 80042c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042c6:	fab3 f383 	clz	r3, r3
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	3301      	adds	r3, #1
 80042ce:	f003 031f 	and.w	r3, r3, #31
 80042d2:	2101      	movs	r1, #1
 80042d4:	fa01 f303 	lsl.w	r3, r1, r3
 80042d8:	ea42 0103 	orr.w	r1, r2, r3
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10a      	bne.n	80042fe <HAL_ADC_ConfigChannel+0x50e>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	0e9b      	lsrs	r3, r3, #26
 80042ee:	3301      	adds	r3, #1
 80042f0:	f003 021f 	and.w	r2, r3, #31
 80042f4:	4613      	mov	r3, r2
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	4413      	add	r3, r2
 80042fa:	051b      	lsls	r3, r3, #20
 80042fc:	e018      	b.n	8004330 <HAL_ADC_ConfigChannel+0x540>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004306:	fa93 f3a3 	rbit	r3, r3
 800430a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800430c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004316:	2320      	movs	r3, #32
 8004318:	e003      	b.n	8004322 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800431a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800431c:	fab3 f383 	clz	r3, r3
 8004320:	b2db      	uxtb	r3, r3
 8004322:	3301      	adds	r3, #1
 8004324:	f003 021f 	and.w	r2, r3, #31
 8004328:	4613      	mov	r3, r2
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	4413      	add	r3, r2
 800432e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004330:	430b      	orrs	r3, r1
 8004332:	e080      	b.n	8004436 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800433c:	2b00      	cmp	r3, #0
 800433e:	d107      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x560>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	0e9b      	lsrs	r3, r3, #26
 8004346:	3301      	adds	r3, #1
 8004348:	069b      	lsls	r3, r3, #26
 800434a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800434e:	e015      	b.n	800437c <HAL_ADC_ConfigChannel+0x58c>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004358:	fa93 f3a3 	rbit	r3, r3
 800435c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004360:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8004368:	2320      	movs	r3, #32
 800436a:	e003      	b.n	8004374 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 800436c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436e:	fab3 f383 	clz	r3, r3
 8004372:	b2db      	uxtb	r3, r3
 8004374:	3301      	adds	r3, #1
 8004376:	069b      	lsls	r3, r3, #26
 8004378:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004384:	2b00      	cmp	r3, #0
 8004386:	d109      	bne.n	800439c <HAL_ADC_ConfigChannel+0x5ac>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	0e9b      	lsrs	r3, r3, #26
 800438e:	3301      	adds	r3, #1
 8004390:	f003 031f 	and.w	r3, r3, #31
 8004394:	2101      	movs	r1, #1
 8004396:	fa01 f303 	lsl.w	r3, r1, r3
 800439a:	e017      	b.n	80043cc <HAL_ADC_ConfigChannel+0x5dc>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	fa93 f3a3 	rbit	r3, r3
 80043a8:	61fb      	str	r3, [r7, #28]
  return result;
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 80043b4:	2320      	movs	r3, #32
 80043b6:	e003      	b.n	80043c0 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	fab3 f383 	clz	r3, r3
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	3301      	adds	r3, #1
 80043c2:	f003 031f 	and.w	r3, r3, #31
 80043c6:	2101      	movs	r1, #1
 80043c8:	fa01 f303 	lsl.w	r3, r1, r3
 80043cc:	ea42 0103 	orr.w	r1, r2, r3
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10d      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x608>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	0e9b      	lsrs	r3, r3, #26
 80043e2:	3301      	adds	r3, #1
 80043e4:	f003 021f 	and.w	r2, r3, #31
 80043e8:	4613      	mov	r3, r2
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	4413      	add	r3, r2
 80043ee:	3b1e      	subs	r3, #30
 80043f0:	051b      	lsls	r3, r3, #20
 80043f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043f6:	e01d      	b.n	8004434 <HAL_ADC_ConfigChannel+0x644>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	fa93 f3a3 	rbit	r3, r3
 8004404:	613b      	str	r3, [r7, #16]
  return result;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d103      	bne.n	8004418 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8004410:	2320      	movs	r3, #32
 8004412:	e005      	b.n	8004420 <HAL_ADC_ConfigChannel+0x630>
 8004414:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	fab3 f383 	clz	r3, r3
 800441e:	b2db      	uxtb	r3, r3
 8004420:	3301      	adds	r3, #1
 8004422:	f003 021f 	and.w	r2, r3, #31
 8004426:	4613      	mov	r3, r2
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	4413      	add	r3, r2
 800442c:	3b1e      	subs	r3, #30
 800442e:	051b      	lsls	r3, r3, #20
 8004430:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004434:	430b      	orrs	r3, r1
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	6892      	ldr	r2, [r2, #8]
 800443a:	4619      	mov	r1, r3
 800443c:	f7ff f91c 	bl	8003678 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	4b45      	ldr	r3, [pc, #276]	; (800455c <HAL_ADC_ConfigChannel+0x76c>)
 8004446:	4013      	ands	r3, r2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d07c      	beq.n	8004546 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800444c:	4844      	ldr	r0, [pc, #272]	; (8004560 <HAL_ADC_ConfigChannel+0x770>)
 800444e:	f7ff f871 	bl	8003534 <LL_ADC_GetCommonPathInternalCh>
 8004452:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004456:	4843      	ldr	r0, [pc, #268]	; (8004564 <HAL_ADC_ConfigChannel+0x774>)
 8004458:	f7ff f9d4 	bl	8003804 <LL_ADC_IsEnabled>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d15e      	bne.n	8004520 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a40      	ldr	r2, [pc, #256]	; (8004568 <HAL_ADC_ConfigChannel+0x778>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d127      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x6cc>
 800446c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004470:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d121      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a39      	ldr	r2, [pc, #228]	; (8004564 <HAL_ADC_ConfigChannel+0x774>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d161      	bne.n	8004546 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004482:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004486:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800448a:	4619      	mov	r1, r3
 800448c:	4834      	ldr	r0, [pc, #208]	; (8004560 <HAL_ADC_ConfigChannel+0x770>)
 800448e:	f7ff f83e 	bl	800350e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004492:	4b36      	ldr	r3, [pc, #216]	; (800456c <HAL_ADC_ConfigChannel+0x77c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	099b      	lsrs	r3, r3, #6
 8004498:	4a35      	ldr	r2, [pc, #212]	; (8004570 <HAL_ADC_ConfigChannel+0x780>)
 800449a:	fba2 2303 	umull	r2, r3, r2, r3
 800449e:	099b      	lsrs	r3, r3, #6
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	4613      	mov	r3, r2
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	4413      	add	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80044ac:	e002      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f9      	bne.n	80044ae <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044ba:	e044      	b.n	8004546 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a2c      	ldr	r2, [pc, #176]	; (8004574 <HAL_ADC_ConfigChannel+0x784>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d113      	bne.n	80044ee <HAL_ADC_ConfigChannel+0x6fe>
 80044c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10d      	bne.n	80044ee <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a23      	ldr	r2, [pc, #140]	; (8004564 <HAL_ADC_ConfigChannel+0x774>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d134      	bne.n	8004546 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80044dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044e4:	4619      	mov	r1, r3
 80044e6:	481e      	ldr	r0, [pc, #120]	; (8004560 <HAL_ADC_ConfigChannel+0x770>)
 80044e8:	f7ff f811 	bl	800350e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044ec:	e02b      	b.n	8004546 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a21      	ldr	r2, [pc, #132]	; (8004578 <HAL_ADC_ConfigChannel+0x788>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d126      	bne.n	8004546 <HAL_ADC_ConfigChannel+0x756>
 80044f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d120      	bne.n	8004546 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a16      	ldr	r2, [pc, #88]	; (8004564 <HAL_ADC_ConfigChannel+0x774>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d11b      	bne.n	8004546 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800450e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004512:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004516:	4619      	mov	r1, r3
 8004518:	4811      	ldr	r0, [pc, #68]	; (8004560 <HAL_ADC_ConfigChannel+0x770>)
 800451a:	f7fe fff8 	bl	800350e <LL_ADC_SetCommonPathInternalCh>
 800451e:	e012      	b.n	8004546 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004524:	f043 0220 	orr.w	r2, r3, #32
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004532:	e008      	b.n	8004546 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004538:	f043 0220 	orr.w	r2, r3, #32
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800454e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004552:	4618      	mov	r0, r3
 8004554:	37d8      	adds	r7, #216	; 0xd8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	80080000 	.word	0x80080000
 8004560:	50040300 	.word	0x50040300
 8004564:	50040000 	.word	0x50040000
 8004568:	c7520000 	.word	0xc7520000
 800456c:	2000000c 	.word	0x2000000c
 8004570:	053e2d63 	.word	0x053e2d63
 8004574:	cb840000 	.word	0xcb840000
 8004578:	80000001 	.word	0x80000001

0800457c <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b088      	sub	sp, #32
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004586:	2300      	movs	r3, #0
 8004588:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff f984 	bl	80038a0 <LL_ADC_REG_IsConversionOngoing>
 8004598:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4618      	mov	r0, r3
 80045a0:	f7ff f9a5 	bl	80038ee <LL_ADC_INJ_IsConversionOngoing>
 80045a4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d103      	bne.n	80045b4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f000 8098 	beq.w	80046e4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d02a      	beq.n	8004618 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	7e5b      	ldrb	r3, [r3, #25]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d126      	bne.n	8004618 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	7e1b      	ldrb	r3, [r3, #24]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d122      	bne.n	8004618 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80045d2:	2301      	movs	r3, #1
 80045d4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80045d6:	e014      	b.n	8004602 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	4a45      	ldr	r2, [pc, #276]	; (80046f0 <ADC_ConversionStop+0x174>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d90d      	bls.n	80045fc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e4:	f043 0210 	orr.w	r2, r3, #16
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f0:	f043 0201 	orr.w	r2, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e074      	b.n	80046e6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	3301      	adds	r3, #1
 8004600:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800460c:	2b40      	cmp	r3, #64	; 0x40
 800460e:	d1e3      	bne.n	80045d8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2240      	movs	r2, #64	; 0x40
 8004616:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d014      	beq.n	8004648 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f7ff f93c 	bl	80038a0 <LL_ADC_REG_IsConversionOngoing>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00c      	beq.n	8004648 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff f8f9 	bl	800382a <LL_ADC_IsDisableOngoing>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d104      	bne.n	8004648 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff f918 	bl	8003878 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d014      	beq.n	8004678 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff f94b 	bl	80038ee <LL_ADC_INJ_IsConversionOngoing>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00c      	beq.n	8004678 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff f8e1 	bl	800382a <LL_ADC_IsDisableOngoing>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d104      	bne.n	8004678 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff f927 	bl	80038c6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	2b02      	cmp	r3, #2
 800467c:	d005      	beq.n	800468a <ADC_ConversionStop+0x10e>
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	2b03      	cmp	r3, #3
 8004682:	d105      	bne.n	8004690 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004684:	230c      	movs	r3, #12
 8004686:	617b      	str	r3, [r7, #20]
        break;
 8004688:	e005      	b.n	8004696 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800468a:	2308      	movs	r3, #8
 800468c:	617b      	str	r3, [r7, #20]
        break;
 800468e:	e002      	b.n	8004696 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004690:	2304      	movs	r3, #4
 8004692:	617b      	str	r3, [r7, #20]
        break;
 8004694:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004696:	f7fe fef7 	bl	8003488 <HAL_GetTick>
 800469a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800469c:	e01b      	b.n	80046d6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800469e:	f7fe fef3 	bl	8003488 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b05      	cmp	r3, #5
 80046aa:	d914      	bls.n	80046d6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689a      	ldr	r2, [r3, #8]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	4013      	ands	r3, r2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00d      	beq.n	80046d6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046be:	f043 0210 	orr.w	r2, r3, #16
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ca:	f043 0201 	orr.w	r2, r3, #1
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e007      	b.n	80046e6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	4013      	ands	r3, r2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1dc      	bne.n	800469e <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3720      	adds	r7, #32
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	a33fffff 	.word	0xa33fffff

080046f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80046fc:	2300      	movs	r3, #0
 80046fe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff f87d 	bl	8003804 <LL_ADC_IsEnabled>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d15e      	bne.n	80047ce <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	4b30      	ldr	r3, [pc, #192]	; (80047d8 <ADC_Enable+0xe4>)
 8004718:	4013      	ands	r3, r2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00d      	beq.n	800473a <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004722:	f043 0210 	orr.w	r2, r3, #16
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472e:	f043 0201 	orr.w	r2, r3, #1
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e04a      	b.n	80047d0 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff f838 	bl	80037b4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004744:	4825      	ldr	r0, [pc, #148]	; (80047dc <ADC_Enable+0xe8>)
 8004746:	f7fe fef5 	bl	8003534 <LL_ADC_GetCommonPathInternalCh>
 800474a:	4603      	mov	r3, r0
 800474c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00f      	beq.n	8004774 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004754:	4b22      	ldr	r3, [pc, #136]	; (80047e0 <ADC_Enable+0xec>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	099b      	lsrs	r3, r3, #6
 800475a:	4a22      	ldr	r2, [pc, #136]	; (80047e4 <ADC_Enable+0xf0>)
 800475c:	fba2 2303 	umull	r2, r3, r2, r3
 8004760:	099b      	lsrs	r3, r3, #6
 8004762:	3301      	adds	r3, #1
 8004764:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8004766:	e002      	b.n	800476e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	3b01      	subs	r3, #1
 800476c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1f9      	bne.n	8004768 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004774:	f7fe fe88 	bl	8003488 <HAL_GetTick>
 8004778:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800477a:	e021      	b.n	80047c0 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff f83f 	bl	8003804 <LL_ADC_IsEnabled>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d104      	bne.n	8004796 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4618      	mov	r0, r3
 8004792:	f7ff f80f 	bl	80037b4 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004796:	f7fe fe77 	bl	8003488 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d90d      	bls.n	80047c0 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a8:	f043 0210 	orr.w	r2, r3, #16
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b4:	f043 0201 	orr.w	r2, r3, #1
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e007      	b.n	80047d0 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d1d6      	bne.n	800477c <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	8000003f 	.word	0x8000003f
 80047dc:	50040300 	.word	0x50040300
 80047e0:	2000000c 	.word	0x2000000c
 80047e4:	053e2d63 	.word	0x053e2d63

080047e8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff f818 	bl	800382a <LL_ADC_IsDisableOngoing>
 80047fa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4618      	mov	r0, r3
 8004802:	f7fe ffff 	bl	8003804 <LL_ADC_IsEnabled>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d047      	beq.n	800489c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d144      	bne.n	800489c <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 030d 	and.w	r3, r3, #13
 800481c:	2b01      	cmp	r3, #1
 800481e:	d10c      	bne.n	800483a <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4618      	mov	r0, r3
 8004826:	f7fe ffd9 	bl	80037dc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2203      	movs	r2, #3
 8004830:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004832:	f7fe fe29 	bl	8003488 <HAL_GetTick>
 8004836:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004838:	e029      	b.n	800488e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483e:	f043 0210 	orr.w	r2, r3, #16
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484a:	f043 0201 	orr.w	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e023      	b.n	800489e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004856:	f7fe fe17 	bl	8003488 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d914      	bls.n	800488e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00d      	beq.n	800488e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004876:	f043 0210 	orr.w	r2, r3, #16
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004882:	f043 0201 	orr.w	r2, r3, #1
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e007      	b.n	800489e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1dc      	bne.n	8004856 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
	...

080048a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048b8:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <__NVIC_SetPriorityGrouping+0x44>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048c4:	4013      	ands	r3, r2
 80048c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80048d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048da:	4a04      	ldr	r2, [pc, #16]	; (80048ec <__NVIC_SetPriorityGrouping+0x44>)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	60d3      	str	r3, [r2, #12]
}
 80048e0:	bf00      	nop
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	e000ed00 	.word	0xe000ed00

080048f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048f4:	4b04      	ldr	r3, [pc, #16]	; (8004908 <__NVIC_GetPriorityGrouping+0x18>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	0a1b      	lsrs	r3, r3, #8
 80048fa:	f003 0307 	and.w	r3, r3, #7
}
 80048fe:	4618      	mov	r0, r3
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	e000ed00 	.word	0xe000ed00

0800490c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	4603      	mov	r3, r0
 8004914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800491a:	2b00      	cmp	r3, #0
 800491c:	db0b      	blt.n	8004936 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800491e:	79fb      	ldrb	r3, [r7, #7]
 8004920:	f003 021f 	and.w	r2, r3, #31
 8004924:	4907      	ldr	r1, [pc, #28]	; (8004944 <__NVIC_EnableIRQ+0x38>)
 8004926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	2001      	movs	r0, #1
 800492e:	fa00 f202 	lsl.w	r2, r0, r2
 8004932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	e000e100 	.word	0xe000e100

08004948 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	4603      	mov	r3, r0
 8004950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004956:	2b00      	cmp	r3, #0
 8004958:	db12      	blt.n	8004980 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800495a:	79fb      	ldrb	r3, [r7, #7]
 800495c:	f003 021f 	and.w	r2, r3, #31
 8004960:	490a      	ldr	r1, [pc, #40]	; (800498c <__NVIC_DisableIRQ+0x44>)
 8004962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	2001      	movs	r0, #1
 800496a:	fa00 f202 	lsl.w	r2, r0, r2
 800496e:	3320      	adds	r3, #32
 8004970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004974:	f3bf 8f4f 	dsb	sy
}
 8004978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800497a:	f3bf 8f6f 	isb	sy
}
 800497e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	e000e100 	.word	0xe000e100

08004990 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	4603      	mov	r3, r0
 8004998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800499a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	db0c      	blt.n	80049bc <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049a2:	79fb      	ldrb	r3, [r7, #7]
 80049a4:	f003 021f 	and.w	r2, r3, #31
 80049a8:	4907      	ldr	r1, [pc, #28]	; (80049c8 <__NVIC_SetPendingIRQ+0x38>)
 80049aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	2001      	movs	r0, #1
 80049b2:	fa00 f202 	lsl.w	r2, r0, r2
 80049b6:	3340      	adds	r3, #64	; 0x40
 80049b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	e000e100 	.word	0xe000e100

080049cc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	4603      	mov	r3, r0
 80049d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	db0c      	blt.n	80049f8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049de:	79fb      	ldrb	r3, [r7, #7]
 80049e0:	f003 021f 	and.w	r2, r3, #31
 80049e4:	4907      	ldr	r1, [pc, #28]	; (8004a04 <__NVIC_ClearPendingIRQ+0x38>)
 80049e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ea:	095b      	lsrs	r3, r3, #5
 80049ec:	2001      	movs	r0, #1
 80049ee:	fa00 f202 	lsl.w	r2, r0, r2
 80049f2:	3360      	adds	r3, #96	; 0x60
 80049f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	e000e100 	.word	0xe000e100

08004a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	4603      	mov	r3, r0
 8004a10:	6039      	str	r1, [r7, #0]
 8004a12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	db0a      	blt.n	8004a32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	490c      	ldr	r1, [pc, #48]	; (8004a54 <__NVIC_SetPriority+0x4c>)
 8004a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a26:	0112      	lsls	r2, r2, #4
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a30:	e00a      	b.n	8004a48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	4908      	ldr	r1, [pc, #32]	; (8004a58 <__NVIC_SetPriority+0x50>)
 8004a38:	79fb      	ldrb	r3, [r7, #7]
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	3b04      	subs	r3, #4
 8004a40:	0112      	lsls	r2, r2, #4
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	440b      	add	r3, r1
 8004a46:	761a      	strb	r2, [r3, #24]
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	e000e100 	.word	0xe000e100
 8004a58:	e000ed00 	.word	0xe000ed00

08004a5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b089      	sub	sp, #36	; 0x24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	f1c3 0307 	rsb	r3, r3, #7
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	bf28      	it	cs
 8004a7a:	2304      	movcs	r3, #4
 8004a7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	3304      	adds	r3, #4
 8004a82:	2b06      	cmp	r3, #6
 8004a84:	d902      	bls.n	8004a8c <NVIC_EncodePriority+0x30>
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	3b03      	subs	r3, #3
 8004a8a:	e000      	b.n	8004a8e <NVIC_EncodePriority+0x32>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a90:	f04f 32ff 	mov.w	r2, #4294967295
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	43da      	mvns	r2, r3
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	401a      	ands	r2, r3
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8004aae:	43d9      	mvns	r1, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ab4:	4313      	orrs	r3, r2
         );
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3724      	adds	r7, #36	; 0x24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
	...

08004ac4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ad4:	d301      	bcc.n	8004ada <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e00f      	b.n	8004afa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ada:	4a0a      	ldr	r2, [pc, #40]	; (8004b04 <SysTick_Config+0x40>)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ae2:	210f      	movs	r1, #15
 8004ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae8:	f7ff ff8e 	bl	8004a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004aec:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <SysTick_Config+0x40>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004af2:	4b04      	ldr	r3, [pc, #16]	; (8004b04 <SysTick_Config+0x40>)
 8004af4:	2207      	movs	r2, #7
 8004af6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	e000e010 	.word	0xe000e010

08004b08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff fec9 	bl	80048a8 <__NVIC_SetPriorityGrouping>
}
 8004b16:	bf00      	nop
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b086      	sub	sp, #24
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	4603      	mov	r3, r0
 8004b26:	60b9      	str	r1, [r7, #8]
 8004b28:	607a      	str	r2, [r7, #4]
 8004b2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b2c:	f7ff fee0 	bl	80048f0 <__NVIC_GetPriorityGrouping>
 8004b30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	68b9      	ldr	r1, [r7, #8]
 8004b36:	6978      	ldr	r0, [r7, #20]
 8004b38:	f7ff ff90 	bl	8004a5c <NVIC_EncodePriority>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b42:	4611      	mov	r1, r2
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff ff5f 	bl	8004a08 <__NVIC_SetPriority>
}
 8004b4a:	bf00      	nop
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b082      	sub	sp, #8
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	4603      	mov	r3, r0
 8004b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff fed3 	bl	800490c <__NVIC_EnableIRQ>
}
 8004b66:	bf00      	nop
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b082      	sub	sp, #8
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	4603      	mov	r3, r0
 8004b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff fee3 	bl	8004948 <__NVIC_DisableIRQ>
}
 8004b82:	bf00      	nop
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b082      	sub	sp, #8
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff ff96 	bl	8004ac4 <SysTick_Config>
 8004b98:	4603      	mov	r3, r0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b082      	sub	sp, #8
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	4603      	mov	r3, r0
 8004baa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7ff feed 	bl	8004990 <__NVIC_SetPendingIRQ>
}
 8004bb6:	bf00      	nop
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b082      	sub	sp, #8
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7ff fefd 	bl	80049cc <__NVIC_ClearPendingIRQ>
}
 8004bd2:	bf00      	nop
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e08e      	b.n	8004d0c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	4b47      	ldr	r3, [pc, #284]	; (8004d14 <HAL_DMA_Init+0x138>)
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d80f      	bhi.n	8004c1a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	4b45      	ldr	r3, [pc, #276]	; (8004d18 <HAL_DMA_Init+0x13c>)
 8004c02:	4413      	add	r3, r2
 8004c04:	4a45      	ldr	r2, [pc, #276]	; (8004d1c <HAL_DMA_Init+0x140>)
 8004c06:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0a:	091b      	lsrs	r3, r3, #4
 8004c0c:	009a      	lsls	r2, r3, #2
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a42      	ldr	r2, [pc, #264]	; (8004d20 <HAL_DMA_Init+0x144>)
 8004c16:	641a      	str	r2, [r3, #64]	; 0x40
 8004c18:	e00e      	b.n	8004c38 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	4b40      	ldr	r3, [pc, #256]	; (8004d24 <HAL_DMA_Init+0x148>)
 8004c22:	4413      	add	r3, r2
 8004c24:	4a3d      	ldr	r2, [pc, #244]	; (8004d1c <HAL_DMA_Init+0x140>)
 8004c26:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2a:	091b      	lsrs	r3, r3, #4
 8004c2c:	009a      	lsls	r2, r3, #2
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a3c      	ldr	r2, [pc, #240]	; (8004d28 <HAL_DMA_Init+0x14c>)
 8004c36:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004c5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fa74 	bl	8005178 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c98:	d102      	bne.n	8004ca0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ca8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004cac:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004cb6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d010      	beq.n	8004ce2 <HAL_DMA_Init+0x106>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d80c      	bhi.n	8004ce2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 fa93 	bl	80051f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004cde:	605a      	str	r2, [r3, #4]
 8004ce0:	e008      	b.n	8004cf4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40020407 	.word	0x40020407
 8004d18:	bffdfff8 	.word	0xbffdfff8
 8004d1c:	cccccccd 	.word	0xcccccccd
 8004d20:	40020000 	.word	0x40020000
 8004d24:	bffdfbf8 	.word	0xbffdfbf8
 8004d28:	40020400 	.word	0x40020400

08004d2c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
 8004d38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_DMA_Start_IT+0x20>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e066      	b.n	8004e1a <HAL_DMA_Start_IT+0xee>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d155      	bne.n	8004e0c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0201 	bic.w	r2, r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	68b9      	ldr	r1, [r7, #8]
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 f9b9 	bl	80050fc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d008      	beq.n	8004da4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 020e 	orr.w	r2, r2, #14
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	e00f      	b.n	8004dc4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0204 	bic.w	r2, r2, #4
 8004db2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f042 020a 	orr.w	r2, r2, #10
 8004dc2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d007      	beq.n	8004de2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004de0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d007      	beq.n	8004dfa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004df8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 0201 	orr.w	r2, r2, #1
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	e005      	b.n	8004e18 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004e14:	2302      	movs	r3, #2
 8004e16:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3718      	adds	r7, #24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e04f      	b.n	8004ed4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d008      	beq.n	8004e52 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2204      	movs	r2, #4
 8004e44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e040      	b.n	8004ed4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 020e 	bic.w	r2, r2, #14
 8004e60:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0201 	bic.w	r2, r2, #1
 8004e80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e86:	f003 021c 	and.w	r2, r3, #28
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	2101      	movs	r1, #1
 8004e90:	fa01 f202 	lsl.w	r2, r1, r2
 8004e94:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004e9e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00c      	beq.n	8004ec2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004eb6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004ec0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d005      	beq.n	8004f04 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2204      	movs	r2, #4
 8004efc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	73fb      	strb	r3, [r7, #15]
 8004f02:	e047      	b.n	8004f94 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 020e 	bic.w	r2, r2, #14
 8004f12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0201 	bic.w	r2, r2, #1
 8004f22:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f38:	f003 021c 	and.w	r2, r3, #28
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f40:	2101      	movs	r1, #1
 8004f42:	fa01 f202 	lsl.w	r2, r1, r2
 8004f46:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004f50:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00c      	beq.n	8004f74 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f68:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004f72:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d003      	beq.n	8004f94 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	4798      	blx	r3
    }
  }
  return status;
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b084      	sub	sp, #16
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fba:	f003 031c 	and.w	r3, r3, #28
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	409a      	lsls	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d026      	beq.n	8005018 <HAL_DMA_IRQHandler+0x7a>
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d021      	beq.n	8005018 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0320 	and.w	r3, r3, #32
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d107      	bne.n	8004ff2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0204 	bic.w	r2, r2, #4
 8004ff0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff6:	f003 021c 	and.w	r2, r3, #28
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	2104      	movs	r1, #4
 8005000:	fa01 f202 	lsl.w	r2, r1, r2
 8005004:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500a:	2b00      	cmp	r3, #0
 800500c:	d071      	beq.n	80050f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005016:	e06c      	b.n	80050f2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501c:	f003 031c 	and.w	r3, r3, #28
 8005020:	2202      	movs	r2, #2
 8005022:	409a      	lsls	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4013      	ands	r3, r2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d02e      	beq.n	800508a <HAL_DMA_IRQHandler+0xec>
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d029      	beq.n	800508a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0320 	and.w	r3, r3, #32
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10b      	bne.n	800505c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 020a 	bic.w	r2, r2, #10
 8005052:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005060:	f003 021c 	and.w	r2, r3, #28
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	2102      	movs	r1, #2
 800506a:	fa01 f202 	lsl.w	r2, r1, r2
 800506e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507c:	2b00      	cmp	r3, #0
 800507e:	d038      	beq.n	80050f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005088:	e033      	b.n	80050f2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508e:	f003 031c 	and.w	r3, r3, #28
 8005092:	2208      	movs	r2, #8
 8005094:	409a      	lsls	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	4013      	ands	r3, r2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d02a      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x156>
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	f003 0308 	and.w	r3, r3, #8
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d025      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 020e 	bic.w	r2, r2, #14
 80050b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050bc:	f003 021c 	and.w	r2, r3, #28
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	2101      	movs	r1, #1
 80050c6:	fa01 f202 	lsl.w	r2, r1, r2
 80050ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d004      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80050f2:	bf00      	nop
 80050f4:	bf00      	nop
}
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
 8005108:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005112:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005118:	2b00      	cmp	r3, #0
 800511a:	d004      	beq.n	8005126 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005124:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512a:	f003 021c 	and.w	r2, r3, #28
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	2101      	movs	r1, #1
 8005134:	fa01 f202 	lsl.w	r2, r1, r2
 8005138:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	2b10      	cmp	r3, #16
 8005148:	d108      	bne.n	800515c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800515a:	e007      	b.n	800516c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	60da      	str	r2, [r3, #12]
}
 800516c:	bf00      	nop
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	461a      	mov	r2, r3
 8005186:	4b17      	ldr	r3, [pc, #92]	; (80051e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005188:	429a      	cmp	r2, r3
 800518a:	d80a      	bhi.n	80051a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005190:	089b      	lsrs	r3, r3, #2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005198:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6493      	str	r3, [r2, #72]	; 0x48
 80051a0:	e007      	b.n	80051b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a6:	089b      	lsrs	r3, r3, #2
 80051a8:	009a      	lsls	r2, r3, #2
 80051aa:	4b0f      	ldr	r3, [pc, #60]	; (80051e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80051ac:	4413      	add	r3, r2
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	3b08      	subs	r3, #8
 80051ba:	4a0c      	ldr	r2, [pc, #48]	; (80051ec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80051bc:	fba2 2303 	umull	r2, r3, r2, r3
 80051c0:	091b      	lsrs	r3, r3, #4
 80051c2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a0a      	ldr	r2, [pc, #40]	; (80051f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80051c8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f003 031f 	and.w	r3, r3, #31
 80051d0:	2201      	movs	r2, #1
 80051d2:	409a      	lsls	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051d8:	bf00      	nop
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	40020407 	.word	0x40020407
 80051e8:	4002081c 	.word	0x4002081c
 80051ec:	cccccccd 	.word	0xcccccccd
 80051f0:	40020880 	.word	0x40020880

080051f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005204:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4b0b      	ldr	r3, [pc, #44]	; (8005238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800520a:	4413      	add	r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	461a      	mov	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a09      	ldr	r2, [pc, #36]	; (800523c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8005218:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	3b01      	subs	r3, #1
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	2201      	movs	r2, #1
 8005224:	409a      	lsls	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800522a:	bf00      	nop
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	1000823f 	.word	0x1000823f
 800523c:	40020940 	.word	0x40020940

08005240 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800524a:	2300      	movs	r3, #0
 800524c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800524e:	e14c      	b.n	80054ea <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	2101      	movs	r1, #1
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	fa01 f303 	lsl.w	r3, r1, r3
 800525c:	4013      	ands	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 813e 	beq.w	80054e4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f003 0303 	and.w	r3, r3, #3
 8005270:	2b01      	cmp	r3, #1
 8005272:	d005      	beq.n	8005280 <HAL_GPIO_Init+0x40>
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f003 0303 	and.w	r3, r3, #3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d130      	bne.n	80052e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	2203      	movs	r2, #3
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	43db      	mvns	r3, r3
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4013      	ands	r3, r2
 8005296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	68da      	ldr	r2, [r3, #12]
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	fa02 f303 	lsl.w	r3, r2, r3
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80052b6:	2201      	movs	r2, #1
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	fa02 f303 	lsl.w	r3, r2, r3
 80052be:	43db      	mvns	r3, r3
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	4013      	ands	r3, r2
 80052c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	091b      	lsrs	r3, r3, #4
 80052cc:	f003 0201 	and.w	r2, r3, #1
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	fa02 f303 	lsl.w	r3, r2, r3
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d017      	beq.n	800531e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	2203      	movs	r2, #3
 80052fa:	fa02 f303 	lsl.w	r3, r2, r3
 80052fe:	43db      	mvns	r3, r3
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	4013      	ands	r3, r2
 8005304:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	689a      	ldr	r2, [r3, #8]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	fa02 f303 	lsl.w	r3, r2, r3
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	4313      	orrs	r3, r2
 8005316:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d123      	bne.n	8005372 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	08da      	lsrs	r2, r3, #3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3208      	adds	r2, #8
 8005332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005336:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	220f      	movs	r2, #15
 8005342:	fa02 f303 	lsl.w	r3, r2, r3
 8005346:	43db      	mvns	r3, r3
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	4013      	ands	r3, r2
 800534c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	691a      	ldr	r2, [r3, #16]
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f003 0307 	and.w	r3, r3, #7
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	fa02 f303 	lsl.w	r3, r2, r3
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	4313      	orrs	r3, r2
 8005362:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	08da      	lsrs	r2, r3, #3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	3208      	adds	r2, #8
 800536c:	6939      	ldr	r1, [r7, #16]
 800536e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	2203      	movs	r2, #3
 800537e:	fa02 f303 	lsl.w	r3, r2, r3
 8005382:	43db      	mvns	r3, r3
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	4013      	ands	r3, r2
 8005388:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f003 0203 	and.w	r2, r3, #3
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	fa02 f303 	lsl.w	r3, r2, r3
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	4313      	orrs	r3, r2
 800539e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f000 8098 	beq.w	80054e4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80053b4:	4a54      	ldr	r2, [pc, #336]	; (8005508 <HAL_GPIO_Init+0x2c8>)
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	089b      	lsrs	r3, r3, #2
 80053ba:	3302      	adds	r3, #2
 80053bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f003 0303 	and.w	r3, r3, #3
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	220f      	movs	r2, #15
 80053cc:	fa02 f303 	lsl.w	r3, r2, r3
 80053d0:	43db      	mvns	r3, r3
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4013      	ands	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80053de:	d019      	beq.n	8005414 <HAL_GPIO_Init+0x1d4>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a4a      	ldr	r2, [pc, #296]	; (800550c <HAL_GPIO_Init+0x2cc>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d013      	beq.n	8005410 <HAL_GPIO_Init+0x1d0>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a49      	ldr	r2, [pc, #292]	; (8005510 <HAL_GPIO_Init+0x2d0>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00d      	beq.n	800540c <HAL_GPIO_Init+0x1cc>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a48      	ldr	r2, [pc, #288]	; (8005514 <HAL_GPIO_Init+0x2d4>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d007      	beq.n	8005408 <HAL_GPIO_Init+0x1c8>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a47      	ldr	r2, [pc, #284]	; (8005518 <HAL_GPIO_Init+0x2d8>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d101      	bne.n	8005404 <HAL_GPIO_Init+0x1c4>
 8005400:	2304      	movs	r3, #4
 8005402:	e008      	b.n	8005416 <HAL_GPIO_Init+0x1d6>
 8005404:	2307      	movs	r3, #7
 8005406:	e006      	b.n	8005416 <HAL_GPIO_Init+0x1d6>
 8005408:	2303      	movs	r3, #3
 800540a:	e004      	b.n	8005416 <HAL_GPIO_Init+0x1d6>
 800540c:	2302      	movs	r3, #2
 800540e:	e002      	b.n	8005416 <HAL_GPIO_Init+0x1d6>
 8005410:	2301      	movs	r3, #1
 8005412:	e000      	b.n	8005416 <HAL_GPIO_Init+0x1d6>
 8005414:	2300      	movs	r3, #0
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	f002 0203 	and.w	r2, r2, #3
 800541c:	0092      	lsls	r2, r2, #2
 800541e:	4093      	lsls	r3, r2
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005426:	4938      	ldr	r1, [pc, #224]	; (8005508 <HAL_GPIO_Init+0x2c8>)
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	089b      	lsrs	r3, r3, #2
 800542c:	3302      	adds	r3, #2
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005434:	4b39      	ldr	r3, [pc, #228]	; (800551c <HAL_GPIO_Init+0x2dc>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	43db      	mvns	r3, r3
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4013      	ands	r3, r2
 8005442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4313      	orrs	r3, r2
 8005456:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005458:	4a30      	ldr	r2, [pc, #192]	; (800551c <HAL_GPIO_Init+0x2dc>)
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800545e:	4b2f      	ldr	r3, [pc, #188]	; (800551c <HAL_GPIO_Init+0x2dc>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	43db      	mvns	r3, r3
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	4013      	ands	r3, r2
 800546c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005482:	4a26      	ldr	r2, [pc, #152]	; (800551c <HAL_GPIO_Init+0x2dc>)
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005488:	4b24      	ldr	r3, [pc, #144]	; (800551c <HAL_GPIO_Init+0x2dc>)
 800548a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800548e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	43db      	mvns	r3, r3
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	4013      	ands	r3, r2
 8005498:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80054ae:	4a1b      	ldr	r2, [pc, #108]	; (800551c <HAL_GPIO_Init+0x2dc>)
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80054b6:	4b19      	ldr	r3, [pc, #100]	; (800551c <HAL_GPIO_Init+0x2dc>)
 80054b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	43db      	mvns	r3, r3
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	4013      	ands	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d003      	beq.n	80054dc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	4313      	orrs	r3, r2
 80054da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80054dc:	4a0f      	ldr	r2, [pc, #60]	; (800551c <HAL_GPIO_Init+0x2dc>)
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	3301      	adds	r3, #1
 80054e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	fa22 f303 	lsr.w	r3, r2, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f47f aeab 	bne.w	8005250 <HAL_GPIO_Init+0x10>
  }
}
 80054fa:	bf00      	nop
 80054fc:	bf00      	nop
 80054fe:	371c      	adds	r7, #28
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	40010000 	.word	0x40010000
 800550c:	48000400 	.word	0x48000400
 8005510:	48000800 	.word	0x48000800
 8005514:	48000c00 	.word	0x48000c00
 8005518:	48001000 	.word	0x48001000
 800551c:	58000800 	.word	0x58000800

08005520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	460b      	mov	r3, r1
 800552a:	807b      	strh	r3, [r7, #2]
 800552c:	4613      	mov	r3, r2
 800552e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005530:	787b      	ldrb	r3, [r7, #1]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005536:	887a      	ldrh	r2, [r7, #2]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800553c:	e002      	b.n	8005544 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800553e:	887a      	ldrh	r2, [r7, #2]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	460b      	mov	r3, r1
 800555a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005562:	887a      	ldrh	r2, [r7, #2]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4013      	ands	r3, r2
 8005568:	041a      	lsls	r2, r3, #16
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	43d9      	mvns	r1, r3
 800556e:	887b      	ldrh	r3, [r7, #2]
 8005570:	400b      	ands	r3, r1
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	619a      	str	r2, [r3, #24]
}
 8005578:	bf00      	nop
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800558a:	4b0a      	ldr	r3, [pc, #40]	; (80055b4 <HAL_HSEM_IRQHandler+0x30>)
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005590:	4b08      	ldr	r3, [pc, #32]	; (80055b4 <HAL_HSEM_IRQHandler+0x30>)
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	43db      	mvns	r3, r3
 8005598:	4906      	ldr	r1, [pc, #24]	; (80055b4 <HAL_HSEM_IRQHandler+0x30>)
 800559a:	4013      	ands	r3, r2
 800559c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800559e:	4a05      	ldr	r2, [pc, #20]	; (80055b4 <HAL_HSEM_IRQHandler+0x30>)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f807 	bl	80055b8 <HAL_HSEM_FreeCallback>
}
 80055aa:	bf00      	nop
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	58001500 	.word	0x58001500

080055b8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e081      	b.n	80056e2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d106      	bne.n	80055f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7fd fbce 	bl	8002d94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2224      	movs	r2, #36	; 0x24
 80055fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0201 	bic.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800561c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689a      	ldr	r2, [r3, #8]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800562c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d107      	bne.n	8005646 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005642:	609a      	str	r2, [r3, #8]
 8005644:	e006      	b.n	8005654 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689a      	ldr	r2, [r3, #8]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005652:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	2b02      	cmp	r3, #2
 800565a:	d104      	bne.n	8005666 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005664:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6812      	ldr	r2, [r2, #0]
 8005670:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005674:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005678:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68da      	ldr	r2, [r3, #12]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005688:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691a      	ldr	r2, [r3, #16]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	69d9      	ldr	r1, [r3, #28]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a1a      	ldr	r2, [r3, #32]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0201 	orr.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2220      	movs	r2, #32
 80056ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
	...

080056ec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b088      	sub	sp, #32
 80056f0:	af02      	add	r7, sp, #8
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	607a      	str	r2, [r7, #4]
 80056f6:	461a      	mov	r2, r3
 80056f8:	460b      	mov	r3, r1
 80056fa:	817b      	strh	r3, [r7, #10]
 80056fc:	4613      	mov	r3, r2
 80056fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b20      	cmp	r3, #32
 800570a:	f040 80da 	bne.w	80058c2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005714:	2b01      	cmp	r3, #1
 8005716:	d101      	bne.n	800571c <HAL_I2C_Master_Transmit+0x30>
 8005718:	2302      	movs	r3, #2
 800571a:	e0d3      	b.n	80058c4 <HAL_I2C_Master_Transmit+0x1d8>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005724:	f7fd feb0 	bl	8003488 <HAL_GetTick>
 8005728:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	2319      	movs	r3, #25
 8005730:	2201      	movs	r2, #1
 8005732:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 fa5e 	bl	8005bf8 <I2C_WaitOnFlagUntilTimeout>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e0be      	b.n	80058c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2221      	movs	r2, #33	; 0x21
 800574a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2210      	movs	r2, #16
 8005752:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	893a      	ldrh	r2, [r7, #8]
 8005766:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005772:	b29b      	uxth	r3, r3
 8005774:	2bff      	cmp	r3, #255	; 0xff
 8005776:	d90e      	bls.n	8005796 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	22ff      	movs	r2, #255	; 0xff
 800577c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005782:	b2da      	uxtb	r2, r3
 8005784:	8979      	ldrh	r1, [r7, #10]
 8005786:	4b51      	ldr	r3, [pc, #324]	; (80058cc <HAL_I2C_Master_Transmit+0x1e0>)
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 fbda 	bl	8005f48 <I2C_TransferConfig>
 8005794:	e06c      	b.n	8005870 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579a:	b29a      	uxth	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	8979      	ldrh	r1, [r7, #10]
 80057a8:	4b48      	ldr	r3, [pc, #288]	; (80058cc <HAL_I2C_Master_Transmit+0x1e0>)
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f000 fbc9 	bl	8005f48 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80057b6:	e05b      	b.n	8005870 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	6a39      	ldr	r1, [r7, #32]
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 fa5b 	bl	8005c78 <I2C_WaitOnTXISFlagUntilTimeout>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e07b      	b.n	80058c4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	781a      	ldrb	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	3b01      	subs	r3, #1
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f4:	3b01      	subs	r3, #1
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005800:	b29b      	uxth	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d034      	beq.n	8005870 <HAL_I2C_Master_Transmit+0x184>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800580a:	2b00      	cmp	r3, #0
 800580c:	d130      	bne.n	8005870 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	6a3b      	ldr	r3, [r7, #32]
 8005814:	2200      	movs	r2, #0
 8005816:	2180      	movs	r1, #128	; 0x80
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 f9ed 	bl	8005bf8 <I2C_WaitOnFlagUntilTimeout>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d001      	beq.n	8005828 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e04d      	b.n	80058c4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582c:	b29b      	uxth	r3, r3
 800582e:	2bff      	cmp	r3, #255	; 0xff
 8005830:	d90e      	bls.n	8005850 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	22ff      	movs	r2, #255	; 0xff
 8005836:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583c:	b2da      	uxtb	r2, r3
 800583e:	8979      	ldrh	r1, [r7, #10]
 8005840:	2300      	movs	r3, #0
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 fb7d 	bl	8005f48 <I2C_TransferConfig>
 800584e:	e00f      	b.n	8005870 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005854:	b29a      	uxth	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800585e:	b2da      	uxtb	r2, r3
 8005860:	8979      	ldrh	r1, [r7, #10]
 8005862:	2300      	movs	r3, #0
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800586a:	68f8      	ldr	r0, [r7, #12]
 800586c:	f000 fb6c 	bl	8005f48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005874:	b29b      	uxth	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d19e      	bne.n	80057b8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	6a39      	ldr	r1, [r7, #32]
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f000 fa3a 	bl	8005cf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e01a      	b.n	80058c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2220      	movs	r2, #32
 8005894:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6859      	ldr	r1, [r3, #4]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	4b0b      	ldr	r3, [pc, #44]	; (80058d0 <HAL_I2C_Master_Transmit+0x1e4>)
 80058a2:	400b      	ands	r3, r1
 80058a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	e000      	b.n	80058c4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80058c2:	2302      	movs	r3, #2
  }
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3718      	adds	r7, #24
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	80002000 	.word	0x80002000
 80058d0:	fe00e800 	.word	0xfe00e800

080058d4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b088      	sub	sp, #32
 80058d8:	af02      	add	r7, sp, #8
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	4608      	mov	r0, r1
 80058de:	4611      	mov	r1, r2
 80058e0:	461a      	mov	r2, r3
 80058e2:	4603      	mov	r3, r0
 80058e4:	817b      	strh	r3, [r7, #10]
 80058e6:	460b      	mov	r3, r1
 80058e8:	813b      	strh	r3, [r7, #8]
 80058ea:	4613      	mov	r3, r2
 80058ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b20      	cmp	r3, #32
 80058f8:	f040 80fd 	bne.w	8005af6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <HAL_I2C_Mem_Read+0x34>
 8005902:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005904:	2b00      	cmp	r3, #0
 8005906:	d105      	bne.n	8005914 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800590e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e0f1      	b.n	8005af8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800591a:	2b01      	cmp	r3, #1
 800591c:	d101      	bne.n	8005922 <HAL_I2C_Mem_Read+0x4e>
 800591e:	2302      	movs	r3, #2
 8005920:	e0ea      	b.n	8005af8 <HAL_I2C_Mem_Read+0x224>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800592a:	f7fd fdad 	bl	8003488 <HAL_GetTick>
 800592e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	2319      	movs	r3, #25
 8005936:	2201      	movs	r2, #1
 8005938:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 f95b 	bl	8005bf8 <I2C_WaitOnFlagUntilTimeout>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e0d5      	b.n	8005af8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2222      	movs	r2, #34	; 0x22
 8005950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2240      	movs	r2, #64	; 0x40
 8005958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6a3a      	ldr	r2, [r7, #32]
 8005966:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800596c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005974:	88f8      	ldrh	r0, [r7, #6]
 8005976:	893a      	ldrh	r2, [r7, #8]
 8005978:	8979      	ldrh	r1, [r7, #10]
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	9301      	str	r3, [sp, #4]
 800597e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	4603      	mov	r3, r0
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f000 f8bf 	bl	8005b08 <I2C_RequestMemoryRead>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d005      	beq.n	800599c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e0ad      	b.n	8005af8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	2bff      	cmp	r3, #255	; 0xff
 80059a4:	d90e      	bls.n	80059c4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	22ff      	movs	r2, #255	; 0xff
 80059aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	8979      	ldrh	r1, [r7, #10]
 80059b4:	4b52      	ldr	r3, [pc, #328]	; (8005b00 <HAL_I2C_Mem_Read+0x22c>)
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 fac3 	bl	8005f48 <I2C_TransferConfig>
 80059c2:	e00f      	b.n	80059e4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	8979      	ldrh	r1, [r7, #10]
 80059d6:	4b4a      	ldr	r3, [pc, #296]	; (8005b00 <HAL_I2C_Mem_Read+0x22c>)
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 fab2 	bl	8005f48 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ea:	2200      	movs	r2, #0
 80059ec:	2104      	movs	r1, #4
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 f902 	bl	8005bf8 <I2C_WaitOnFlagUntilTimeout>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e07c      	b.n	8005af8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d034      	beq.n	8005aa4 <HAL_I2C_Mem_Read+0x1d0>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d130      	bne.n	8005aa4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a48:	2200      	movs	r2, #0
 8005a4a:	2180      	movs	r1, #128	; 0x80
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 f8d3 	bl	8005bf8 <I2C_WaitOnFlagUntilTimeout>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e04d      	b.n	8005af8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	2bff      	cmp	r3, #255	; 0xff
 8005a64:	d90e      	bls.n	8005a84 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	22ff      	movs	r2, #255	; 0xff
 8005a6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	8979      	ldrh	r1, [r7, #10]
 8005a74:	2300      	movs	r3, #0
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 fa63 	bl	8005f48 <I2C_TransferConfig>
 8005a82:	e00f      	b.n	8005aa4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	8979      	ldrh	r1, [r7, #10]
 8005a96:	2300      	movs	r3, #0
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 fa52 	bl	8005f48 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d19a      	bne.n	80059e4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 f920 	bl	8005cf8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e01a      	b.n	8005af8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6859      	ldr	r1, [r3, #4]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <HAL_I2C_Mem_Read+0x230>)
 8005ad6:	400b      	ands	r3, r1
 8005ad8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005af2:	2300      	movs	r3, #0
 8005af4:	e000      	b.n	8005af8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005af6:	2302      	movs	r3, #2
  }
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3718      	adds	r7, #24
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	80002400 	.word	0x80002400
 8005b04:	fe00e800 	.word	0xfe00e800

08005b08 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af02      	add	r7, sp, #8
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	4608      	mov	r0, r1
 8005b12:	4611      	mov	r1, r2
 8005b14:	461a      	mov	r2, r3
 8005b16:	4603      	mov	r3, r0
 8005b18:	817b      	strh	r3, [r7, #10]
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	813b      	strh	r3, [r7, #8]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	8979      	ldrh	r1, [r7, #10]
 8005b28:	4b20      	ldr	r3, [pc, #128]	; (8005bac <I2C_RequestMemoryRead+0xa4>)
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 fa0a 	bl	8005f48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b34:	69fa      	ldr	r2, [r7, #28]
 8005b36:	69b9      	ldr	r1, [r7, #24]
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 f89d 	bl	8005c78 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e02c      	b.n	8005ba2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b48:	88fb      	ldrh	r3, [r7, #6]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d105      	bne.n	8005b5a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b4e:	893b      	ldrh	r3, [r7, #8]
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	629a      	str	r2, [r3, #40]	; 0x28
 8005b58:	e015      	b.n	8005b86 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b5a:	893b      	ldrh	r3, [r7, #8]
 8005b5c:	0a1b      	lsrs	r3, r3, #8
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b68:	69fa      	ldr	r2, [r7, #28]
 8005b6a:	69b9      	ldr	r1, [r7, #24]
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f000 f883 	bl	8005c78 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e012      	b.n	8005ba2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b7c:	893b      	ldrh	r3, [r7, #8]
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	2140      	movs	r1, #64	; 0x40
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 f831 	bl	8005bf8 <I2C_WaitOnFlagUntilTimeout>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e000      	b.n	8005ba2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	80002000 	.word	0x80002000

08005bb0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d103      	bne.n	8005bce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d007      	beq.n	8005bec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	699a      	ldr	r2, [r3, #24]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0201 	orr.w	r2, r2, #1
 8005bea:	619a      	str	r2, [r3, #24]
  }
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	603b      	str	r3, [r7, #0]
 8005c04:	4613      	mov	r3, r2
 8005c06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c08:	e022      	b.n	8005c50 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c10:	d01e      	beq.n	8005c50 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c12:	f7fd fc39 	bl	8003488 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d302      	bcc.n	8005c28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d113      	bne.n	8005c50 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2c:	f043 0220 	orr.w	r2, r3, #32
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2220      	movs	r2, #32
 8005c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e00f      	b.n	8005c70 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699a      	ldr	r2, [r3, #24]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	bf0c      	ite	eq
 8005c60:	2301      	moveq	r3, #1
 8005c62:	2300      	movne	r3, #0
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	461a      	mov	r2, r3
 8005c68:	79fb      	ldrb	r3, [r7, #7]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d0cd      	beq.n	8005c0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c84:	e02c      	b.n	8005ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	68b9      	ldr	r1, [r7, #8]
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 f870 	bl	8005d70 <I2C_IsErrorOccurred>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e02a      	b.n	8005cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca0:	d01e      	beq.n	8005ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca2:	f7fd fbf1 	bl	8003488 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d302      	bcc.n	8005cb8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d113      	bne.n	8005ce0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cbc:	f043 0220 	orr.w	r2, r3, #32
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e007      	b.n	8005cf0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d1cb      	bne.n	8005c86 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d04:	e028      	b.n	8005d58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	68b9      	ldr	r1, [r7, #8]
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 f830 	bl	8005d70 <I2C_IsErrorOccurred>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e026      	b.n	8005d68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d1a:	f7fd fbb5 	bl	8003488 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d302      	bcc.n	8005d30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d113      	bne.n	8005d58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d34:	f043 0220 	orr.w	r2, r3, #32
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e007      	b.n	8005d68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	f003 0320 	and.w	r3, r3, #32
 8005d62:	2b20      	cmp	r3, #32
 8005d64:	d1cf      	bne.n	8005d06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b08a      	sub	sp, #40	; 0x28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	f003 0310 	and.w	r3, r3, #16
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d075      	beq.n	8005e88 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2210      	movs	r2, #16
 8005da2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005da4:	e056      	b.n	8005e54 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dac:	d052      	beq.n	8005e54 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005dae:	f7fd fb6b 	bl	8003488 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d302      	bcc.n	8005dc4 <I2C_IsErrorOccurred+0x54>
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d147      	bne.n	8005e54 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005dce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005dd6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005de2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005de6:	d12e      	bne.n	8005e46 <I2C_IsErrorOccurred+0xd6>
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dee:	d02a      	beq.n	8005e46 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005df0:	7cfb      	ldrb	r3, [r7, #19]
 8005df2:	2b20      	cmp	r3, #32
 8005df4:	d027      	beq.n	8005e46 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e04:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005e06:	f7fd fb3f 	bl	8003488 <HAL_GetTick>
 8005e0a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e0c:	e01b      	b.n	8005e46 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005e0e:	f7fd fb3b 	bl	8003488 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	2b19      	cmp	r3, #25
 8005e1a:	d914      	bls.n	8005e46 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e20:	f043 0220 	orr.w	r2, r3, #32
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	f003 0320 	and.w	r3, r3, #32
 8005e50:	2b20      	cmp	r3, #32
 8005e52:	d1dc      	bne.n	8005e0e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	f003 0320 	and.w	r3, r3, #32
 8005e5e:	2b20      	cmp	r3, #32
 8005e60:	d003      	beq.n	8005e6a <I2C_IsErrorOccurred+0xfa>
 8005e62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d09d      	beq.n	8005da6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005e6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d103      	bne.n	8005e7a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2220      	movs	r2, #32
 8005e78:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	f043 0304 	orr.w	r3, r3, #4
 8005e80:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00b      	beq.n	8005eb2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005e9a:	6a3b      	ldr	r3, [r7, #32]
 8005e9c:	f043 0301 	orr.w	r3, r3, #1
 8005ea0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005eaa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00b      	beq.n	8005ed4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005ebc:	6a3b      	ldr	r3, [r7, #32]
 8005ebe:	f043 0308 	orr.w	r3, r3, #8
 8005ec2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ecc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00b      	beq.n	8005ef6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	f043 0302 	orr.w	r3, r3, #2
 8005ee4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005ef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d01c      	beq.n	8005f38 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f7ff fe56 	bl	8005bb0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6859      	ldr	r1, [r3, #4]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	4b0d      	ldr	r3, [pc, #52]	; (8005f44 <I2C_IsErrorOccurred+0x1d4>)
 8005f10:	400b      	ands	r3, r1
 8005f12:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005f38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3728      	adds	r7, #40	; 0x28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	fe00e800 	.word	0xfe00e800

08005f48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b087      	sub	sp, #28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	607b      	str	r3, [r7, #4]
 8005f52:	460b      	mov	r3, r1
 8005f54:	817b      	strh	r3, [r7, #10]
 8005f56:	4613      	mov	r3, r2
 8005f58:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f5a:	897b      	ldrh	r3, [r7, #10]
 8005f5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f60:	7a7b      	ldrb	r3, [r7, #9]
 8005f62:	041b      	lsls	r3, r3, #16
 8005f64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f68:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f76:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	0d5b      	lsrs	r3, r3, #21
 8005f82:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005f86:	4b08      	ldr	r3, [pc, #32]	; (8005fa8 <I2C_TransferConfig+0x60>)
 8005f88:	430b      	orrs	r3, r1
 8005f8a:	43db      	mvns	r3, r3
 8005f8c:	ea02 0103 	and.w	r1, r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005f9a:	bf00      	nop
 8005f9c:	371c      	adds	r7, #28
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	03ff63ff 	.word	0x03ff63ff

08005fac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b20      	cmp	r3, #32
 8005fc0:	d138      	bne.n	8006034 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d101      	bne.n	8005fd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e032      	b.n	8006036 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2224      	movs	r2, #36	; 0x24
 8005fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0201 	bic.w	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ffe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6819      	ldr	r1, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0201 	orr.w	r2, r2, #1
 800601e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2220      	movs	r2, #32
 8006024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006030:	2300      	movs	r3, #0
 8006032:	e000      	b.n	8006036 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006034:	2302      	movs	r3, #2
  }
}
 8006036:	4618      	mov	r0, r3
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006042:	b480      	push	{r7}
 8006044:	b085      	sub	sp, #20
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b20      	cmp	r3, #32
 8006056:	d139      	bne.n	80060cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800605e:	2b01      	cmp	r3, #1
 8006060:	d101      	bne.n	8006066 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006062:	2302      	movs	r3, #2
 8006064:	e033      	b.n	80060ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2224      	movs	r2, #36	; 0x24
 8006072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0201 	bic.w	r2, r2, #1
 8006084:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006094:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	021b      	lsls	r3, r3, #8
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	4313      	orrs	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f042 0201 	orr.w	r2, r2, #1
 80060b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2220      	movs	r2, #32
 80060bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	e000      	b.n	80060ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80060cc:	2302      	movs	r3, #2
  }
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
	...

080060dc <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80060e4:	2300      	movs	r3, #0
 80060e6:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d01e      	beq.n	800612c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80060ee:	4b13      	ldr	r3, [pc, #76]	; (800613c <HAL_IPCC_Init+0x60>)
 80060f0:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d102      	bne.n	8006104 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7fc fe90 	bl	8002e24 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8006104:	68b8      	ldr	r0, [r7, #8]
 8006106:	f000 f85b 	bl	80061c0 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f82c 	bl	8006174 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800612a:	e001      	b.n	8006130 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8006130:	7bfb      	ldrb	r3, [r7, #15]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	58000c00 	.word	0x58000c00

08006140 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	4613      	mov	r3, r2
 800614c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800614e:	bf00      	nop
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800615a:	b480      	push	{r7}
 800615c:	b085      	sub	sp, #20
 800615e:	af00      	add	r7, sp, #0
 8006160:	60f8      	str	r0, [r7, #12]
 8006162:	60b9      	str	r1, [r7, #8]
 8006164:	4613      	mov	r3, r2
 8006166:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8006168:	bf00      	nop
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800617c:	2300      	movs	r3, #0
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	e00f      	b.n	80061a2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	4a0b      	ldr	r2, [pc, #44]	; (80061b8 <IPCC_SetDefaultCallbacks+0x44>)
 800618c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	3306      	adds	r3, #6
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	4a08      	ldr	r2, [pc, #32]	; (80061bc <IPCC_SetDefaultCallbacks+0x48>)
 800619a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	3301      	adds	r3, #1
 80061a0:	60fb      	str	r3, [r7, #12]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b05      	cmp	r3, #5
 80061a6:	d9ec      	bls.n	8006182 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80061a8:	bf00      	nop
 80061aa:	bf00      	nop
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	08006141 	.word	0x08006141
 80061bc:	0800615b 	.word	0x0800615b

080061c0 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80061d4:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	223f      	movs	r2, #63	; 0x3f
 80061da:	609a      	str	r2, [r3, #8]
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80061e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ea:	b08b      	sub	sp, #44	; 0x2c
 80061ec:	af06      	add	r7, sp, #24
 80061ee:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e0cb      	b.n	8006392 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d106      	bne.n	8006214 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7fc ff08 	bl	8003024 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2203      	movs	r2, #3
 8006218:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4618      	mov	r0, r3
 8006222:	f003 fb3b 	bl	800989c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006226:	2300      	movs	r3, #0
 8006228:	73fb      	strb	r3, [r7, #15]
 800622a:	e040      	b.n	80062ae <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800622c:	7bfb      	ldrb	r3, [r7, #15]
 800622e:	6879      	ldr	r1, [r7, #4]
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	4613      	mov	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	440b      	add	r3, r1
 800623c:	3301      	adds	r3, #1
 800623e:	2201      	movs	r2, #1
 8006240:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006242:	7bfb      	ldrb	r3, [r7, #15]
 8006244:	6879      	ldr	r1, [r7, #4]
 8006246:	1c5a      	adds	r2, r3, #1
 8006248:	4613      	mov	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	440b      	add	r3, r1
 8006252:	7bfa      	ldrb	r2, [r7, #15]
 8006254:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006256:	7bfb      	ldrb	r3, [r7, #15]
 8006258:	6879      	ldr	r1, [r7, #4]
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	4613      	mov	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	00db      	lsls	r3, r3, #3
 8006264:	440b      	add	r3, r1
 8006266:	3303      	adds	r3, #3
 8006268:	2200      	movs	r2, #0
 800626a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800626c:	7bfa      	ldrb	r2, [r7, #15]
 800626e:	6879      	ldr	r1, [r7, #4]
 8006270:	4613      	mov	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	00db      	lsls	r3, r3, #3
 8006278:	440b      	add	r3, r1
 800627a:	3338      	adds	r3, #56	; 0x38
 800627c:	2200      	movs	r2, #0
 800627e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006280:	7bfa      	ldrb	r2, [r7, #15]
 8006282:	6879      	ldr	r1, [r7, #4]
 8006284:	4613      	mov	r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4413      	add	r3, r2
 800628a:	00db      	lsls	r3, r3, #3
 800628c:	440b      	add	r3, r1
 800628e:	333c      	adds	r3, #60	; 0x3c
 8006290:	2200      	movs	r2, #0
 8006292:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006294:	7bfa      	ldrb	r2, [r7, #15]
 8006296:	6879      	ldr	r1, [r7, #4]
 8006298:	4613      	mov	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	440b      	add	r3, r1
 80062a2:	3340      	adds	r3, #64	; 0x40
 80062a4:	2200      	movs	r2, #0
 80062a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
 80062aa:	3301      	adds	r3, #1
 80062ac:	73fb      	strb	r3, [r7, #15]
 80062ae:	7bfa      	ldrb	r2, [r7, #15]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d3b9      	bcc.n	800622c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062b8:	2300      	movs	r3, #0
 80062ba:	73fb      	strb	r3, [r7, #15]
 80062bc:	e044      	b.n	8006348 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80062be:	7bfa      	ldrb	r2, [r7, #15]
 80062c0:	6879      	ldr	r1, [r7, #4]
 80062c2:	4613      	mov	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	00db      	lsls	r3, r3, #3
 80062ca:	440b      	add	r3, r1
 80062cc:	f203 1369 	addw	r3, r3, #361	; 0x169
 80062d0:	2200      	movs	r2, #0
 80062d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80062d4:	7bfa      	ldrb	r2, [r7, #15]
 80062d6:	6879      	ldr	r1, [r7, #4]
 80062d8:	4613      	mov	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	00db      	lsls	r3, r3, #3
 80062e0:	440b      	add	r3, r1
 80062e2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80062e6:	7bfa      	ldrb	r2, [r7, #15]
 80062e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80062ea:	7bfa      	ldrb	r2, [r7, #15]
 80062ec:	6879      	ldr	r1, [r7, #4]
 80062ee:	4613      	mov	r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	00db      	lsls	r3, r3, #3
 80062f6:	440b      	add	r3, r1
 80062f8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80062fc:	2200      	movs	r2, #0
 80062fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006300:	7bfa      	ldrb	r2, [r7, #15]
 8006302:	6879      	ldr	r1, [r7, #4]
 8006304:	4613      	mov	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	00db      	lsls	r3, r3, #3
 800630c:	440b      	add	r3, r1
 800630e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8006312:	2200      	movs	r2, #0
 8006314:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006316:	7bfa      	ldrb	r2, [r7, #15]
 8006318:	6879      	ldr	r1, [r7, #4]
 800631a:	4613      	mov	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	00db      	lsls	r3, r3, #3
 8006322:	440b      	add	r3, r1
 8006324:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006328:	2200      	movs	r2, #0
 800632a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800632c:	7bfa      	ldrb	r2, [r7, #15]
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	4613      	mov	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4413      	add	r3, r2
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	440b      	add	r3, r1
 800633a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800633e:	2200      	movs	r2, #0
 8006340:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006342:	7bfb      	ldrb	r3, [r7, #15]
 8006344:	3301      	adds	r3, #1
 8006346:	73fb      	strb	r3, [r7, #15]
 8006348:	7bfa      	ldrb	r2, [r7, #15]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	429a      	cmp	r2, r3
 8006350:	d3b5      	bcc.n	80062be <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	603b      	str	r3, [r7, #0]
 8006358:	687e      	ldr	r6, [r7, #4]
 800635a:	466d      	mov	r5, sp
 800635c:	f106 0410 	add.w	r4, r6, #16
 8006360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006362:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006364:	6823      	ldr	r3, [r4, #0]
 8006366:	602b      	str	r3, [r5, #0]
 8006368:	1d33      	adds	r3, r6, #4
 800636a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800636c:	6838      	ldr	r0, [r7, #0]
 800636e:	f003 fab0 	bl	80098d2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d102      	bne.n	8006390 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f805 	bl	800639a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800639a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800639a:	b480      	push	{r7}
 800639c:	b085      	sub	sp, #20
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80063be:	b29b      	uxth	r3, r3
 80063c0:	f043 0301 	orr.w	r3, r3, #1
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	f043 0302 	orr.w	r3, r3, #2
 80063d8:	b29a      	uxth	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3714      	adds	r7, #20
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
	...

080063f0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80063f0:	b480      	push	{r7}
 80063f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063f4:	4b05      	ldr	r3, [pc, #20]	; (800640c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a04      	ldr	r2, [pc, #16]	; (800640c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80063fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063fe:	6013      	str	r3, [r2, #0]
}
 8006400:	bf00      	nop
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	58000400 	.word	0x58000400

08006410 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006410:	b480      	push	{r7}
 8006412:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006414:	4b04      	ldr	r3, [pc, #16]	; (8006428 <HAL_PWREx_GetVoltageRange+0x18>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800641c:	4618      	mov	r0, r3
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	58000400 	.word	0x58000400

0800642c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800643a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800643e:	d101      	bne.n	8006444 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006440:	2301      	movs	r3, #1
 8006442:	e000      	b.n	8006446 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <LL_RCC_HSE_Enable>:
{
 8006450:	b480      	push	{r7}
 8006452:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800645e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006462:	6013      	str	r3, [r2, #0]
}
 8006464:	bf00      	nop
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <LL_RCC_HSE_Disable>:
{
 800646e:	b480      	push	{r7}
 8006470:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800647c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006480:	6013      	str	r3, [r2, #0]
}
 8006482:	bf00      	nop
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <LL_RCC_HSE_IsReady>:
{
 800648c:	b480      	push	{r7}
 800648e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800649a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800649e:	d101      	bne.n	80064a4 <LL_RCC_HSE_IsReady+0x18>
 80064a0:	2301      	movs	r3, #1
 80064a2:	e000      	b.n	80064a6 <LL_RCC_HSE_IsReady+0x1a>
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <LL_RCC_HSI_Enable>:
{
 80064b0:	b480      	push	{r7}
 80064b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80064b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064c2:	6013      	str	r3, [r2, #0]
}
 80064c4:	bf00      	nop
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <LL_RCC_HSI_Disable>:
{
 80064ce:	b480      	push	{r7}
 80064d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80064d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064e0:	6013      	str	r3, [r2, #0]
}
 80064e2:	bf00      	nop
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <LL_RCC_HSI_IsReady>:
{
 80064ec:	b480      	push	{r7}
 80064ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80064f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064fe:	d101      	bne.n	8006504 <LL_RCC_HSI_IsReady+0x18>
 8006500:	2301      	movs	r3, #1
 8006502:	e000      	b.n	8006506 <LL_RCC_HSI_IsReady+0x1a>
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <LL_RCC_HSI_SetCalibTrimming>:
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	061b      	lsls	r3, r3, #24
 8006526:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800652a:	4313      	orrs	r3, r2
 800652c:	604b      	str	r3, [r1, #4]
}
 800652e:	bf00      	nop
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <LL_RCC_HSI48_Enable>:
{
 800653a:	b480      	push	{r7}
 800653c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800653e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006542:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006546:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800654a:	f043 0301 	orr.w	r3, r3, #1
 800654e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006552:	bf00      	nop
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <LL_RCC_HSI48_Disable>:
{
 800655c:	b480      	push	{r7}
 800655e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006564:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006568:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800656c:	f023 0301 	bic.w	r3, r3, #1
 8006570:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006574:	bf00      	nop
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <LL_RCC_HSI48_IsReady>:
{
 800657e:	b480      	push	{r7}
 8006580:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006586:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b02      	cmp	r3, #2
 8006590:	d101      	bne.n	8006596 <LL_RCC_HSI48_IsReady+0x18>
 8006592:	2301      	movs	r3, #1
 8006594:	e000      	b.n	8006598 <LL_RCC_HSI48_IsReady+0x1a>
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <LL_RCC_LSE_Enable>:
{
 80065a2:	b480      	push	{r7}
 80065a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80065a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065b2:	f043 0301 	orr.w	r3, r3, #1
 80065b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80065ba:	bf00      	nop
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <LL_RCC_LSE_Disable>:
{
 80065c4:	b480      	push	{r7}
 80065c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80065c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065d4:	f023 0301 	bic.w	r3, r3, #1
 80065d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80065dc:	bf00      	nop
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <LL_RCC_LSE_EnableBypass>:
{
 80065e6:	b480      	push	{r7}
 80065e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80065ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065f6:	f043 0304 	orr.w	r3, r3, #4
 80065fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80065fe:	bf00      	nop
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <LL_RCC_LSE_DisableBypass>:
{
 8006608:	b480      	push	{r7}
 800660a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800660c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006614:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006618:	f023 0304 	bic.w	r3, r3, #4
 800661c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006620:	bf00      	nop
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <LL_RCC_LSE_IsReady>:
{
 800662a:	b480      	push	{r7}
 800662c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800662e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b02      	cmp	r3, #2
 800663c:	d101      	bne.n	8006642 <LL_RCC_LSE_IsReady+0x18>
 800663e:	2301      	movs	r3, #1
 8006640:	e000      	b.n	8006644 <LL_RCC_LSE_IsReady+0x1a>
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <LL_RCC_LSI1_Enable>:
{
 800664e:	b480      	push	{r7}
 8006650:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006656:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800665a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800665e:	f043 0301 	orr.w	r3, r3, #1
 8006662:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006666:	bf00      	nop
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <LL_RCC_LSI1_Disable>:
{
 8006670:	b480      	push	{r7}
 8006672:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800667c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006680:	f023 0301 	bic.w	r3, r3, #1
 8006684:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006688:	bf00      	nop
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <LL_RCC_LSI1_IsReady>:
{
 8006692:	b480      	push	{r7}
 8006694:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800669a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d101      	bne.n	80066aa <LL_RCC_LSI1_IsReady+0x18>
 80066a6:	2301      	movs	r3, #1
 80066a8:	e000      	b.n	80066ac <LL_RCC_LSI1_IsReady+0x1a>
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <LL_RCC_LSI2_Enable>:
{
 80066b6:	b480      	push	{r7}
 80066b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80066ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066c6:	f043 0304 	orr.w	r3, r3, #4
 80066ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80066ce:	bf00      	nop
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <LL_RCC_LSI2_Disable>:
{
 80066d8:	b480      	push	{r7}
 80066da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80066dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066e8:	f023 0304 	bic.w	r3, r3, #4
 80066ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80066f0:	bf00      	nop
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <LL_RCC_LSI2_IsReady>:
{
 80066fa:	b480      	push	{r7}
 80066fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80066fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006706:	f003 0308 	and.w	r3, r3, #8
 800670a:	2b08      	cmp	r3, #8
 800670c:	d101      	bne.n	8006712 <LL_RCC_LSI2_IsReady+0x18>
 800670e:	2301      	movs	r3, #1
 8006710:	e000      	b.n	8006714 <LL_RCC_LSI2_IsReady+0x1a>
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <LL_RCC_LSI2_SetTrimming>:
{
 800671e:	b480      	push	{r7}
 8006720:	b083      	sub	sp, #12
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8006726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800672a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800672e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	021b      	lsls	r3, r3, #8
 8006736:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800673a:	4313      	orrs	r3, r2
 800673c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <LL_RCC_MSI_Enable>:
{
 800674c:	b480      	push	{r7}
 800674e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800675a:	f043 0301 	orr.w	r3, r3, #1
 800675e:	6013      	str	r3, [r2, #0]
}
 8006760:	bf00      	nop
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <LL_RCC_MSI_Disable>:
{
 800676a:	b480      	push	{r7}
 800676c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800676e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006778:	f023 0301 	bic.w	r3, r3, #1
 800677c:	6013      	str	r3, [r2, #0]
}
 800677e:	bf00      	nop
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <LL_RCC_MSI_IsReady>:
{
 8006788:	b480      	push	{r7}
 800678a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800678c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b02      	cmp	r3, #2
 8006798:	d101      	bne.n	800679e <LL_RCC_MSI_IsReady+0x16>
 800679a:	2301      	movs	r3, #1
 800679c:	e000      	b.n	80067a0 <LL_RCC_MSI_IsReady+0x18>
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <LL_RCC_MSI_SetRange>:
{
 80067aa:	b480      	push	{r7}
 80067ac:	b083      	sub	sp, #12
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80067b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	600b      	str	r3, [r1, #0]
}
 80067c6:	bf00      	nop
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <LL_RCC_MSI_GetRange>:
{
 80067d2:	b480      	push	{r7}
 80067d4:	b083      	sub	sp, #12
 80067d6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80067d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067e2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2bb0      	cmp	r3, #176	; 0xb0
 80067e8:	d901      	bls.n	80067ee <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80067ea:	23b0      	movs	r3, #176	; 0xb0
 80067ec:	607b      	str	r3, [r7, #4]
  return msiRange;
 80067ee:	687b      	ldr	r3, [r7, #4]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <LL_RCC_MSI_SetCalibTrimming>:
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	021b      	lsls	r3, r3, #8
 8006812:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006816:	4313      	orrs	r3, r2
 8006818:	604b      	str	r3, [r1, #4]
}
 800681a:	bf00      	nop
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <LL_RCC_SetSysClkSource>:
{
 8006826:	b480      	push	{r7}
 8006828:	b083      	sub	sp, #12
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800682e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f023 0203 	bic.w	r2, r3, #3
 8006838:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4313      	orrs	r3, r2
 8006840:	608b      	str	r3, [r1, #8]
}
 8006842:	bf00      	nop
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <LL_RCC_GetSysClkSource>:
{
 800684e:	b480      	push	{r7}
 8006850:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f003 030c 	and.w	r3, r3, #12
}
 800685c:	4618      	mov	r0, r3
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <LL_RCC_SetAHBPrescaler>:
{
 8006866:	b480      	push	{r7}
 8006868:	b083      	sub	sp, #12
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800686e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006878:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4313      	orrs	r3, r2
 8006880:	608b      	str	r3, [r1, #8]
}
 8006882:	bf00      	nop
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <LL_C2_RCC_SetAHBPrescaler>:
{
 800688e:	b480      	push	{r7}
 8006890:	b083      	sub	sp, #12
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800689a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800689e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80068ae:	bf00      	nop
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <LL_RCC_SetAHB4Prescaler>:
{
 80068ba:	b480      	push	{r7}
 80068bc:	b083      	sub	sp, #12
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80068c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80068ca:	f023 020f 	bic.w	r2, r3, #15
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	091b      	lsrs	r3, r3, #4
 80068d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068d6:	4313      	orrs	r3, r2
 80068d8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <LL_RCC_SetAPB1Prescaler>:
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80068f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80068fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4313      	orrs	r3, r2
 8006902:	608b      	str	r3, [r1, #8]
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <LL_RCC_SetAPB2Prescaler>:
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006922:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4313      	orrs	r3, r2
 800692a:	608b      	str	r3, [r1, #8]
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <LL_RCC_GetAHBPrescaler>:
{
 8006938:	b480      	push	{r7}
 800693a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800693c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006946:	4618      	mov	r0, r3
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <LL_RCC_GetAHB4Prescaler>:
{
 8006950:	b480      	push	{r7}
 8006952:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006958:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800695c:	011b      	lsls	r3, r3, #4
 800695e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006962:	4618      	mov	r0, r3
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <LL_RCC_GetAPB1Prescaler>:
{
 800696c:	b480      	push	{r7}
 800696e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800697a:	4618      	mov	r0, r3
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <LL_RCC_GetAPB2Prescaler>:
{
 8006984:	b480      	push	{r7}
 8006986:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006992:	4618      	mov	r0, r3
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <LL_RCC_PLL_Enable>:
{
 800699c:	b480      	push	{r7}
 800699e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80069a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069ae:	6013      	str	r3, [r2, #0]
}
 80069b0:	bf00      	nop
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <LL_RCC_PLL_Disable>:
{
 80069ba:	b480      	push	{r7}
 80069bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80069be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069cc:	6013      	str	r3, [r2, #0]
}
 80069ce:	bf00      	nop
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <LL_RCC_PLL_IsReady>:
{
 80069d8:	b480      	push	{r7}
 80069da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80069dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069ea:	d101      	bne.n	80069f0 <LL_RCC_PLL_IsReady+0x18>
 80069ec:	2301      	movs	r3, #1
 80069ee:	e000      	b.n	80069f2 <LL_RCC_PLL_IsReady+0x1a>
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <LL_RCC_PLL_GetN>:
{
 80069fc:	b480      	push	{r7}
 80069fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	0a1b      	lsrs	r3, r3, #8
 8006a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <LL_RCC_PLL_GetR>:
{
 8006a16:	b480      	push	{r7}
 8006a18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <LL_RCC_PLL_GetDivider>:
{
 8006a2e:	b480      	push	{r7}
 8006a30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <LL_RCC_PLL_GetMainSource>:
{
 8006a46:	b480      	push	{r7}
 8006a48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f003 0303 	and.w	r3, r3, #3
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <LL_RCC_IsActiveFlag_HPRE>:
{
 8006a5e:	b480      	push	{r7}
 8006a60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a70:	d101      	bne.n	8006a76 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006a72:	2301      	movs	r3, #1
 8006a74:	e000      	b.n	8006a78 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8006a82:	b480      	push	{r7}
 8006a84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a96:	d101      	bne.n	8006a9c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e000      	b.n	8006a9e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ab0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006abc:	d101      	bne.n	8006ac2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e000      	b.n	8006ac4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <LL_RCC_IsActiveFlag_PPRE1>:
{
 8006ace:	b480      	push	{r7}
 8006ad0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006adc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ae0:	d101      	bne.n	8006ae6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e000      	b.n	8006ae8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8006af2:	b480      	push	{r7}
 8006af4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b04:	d101      	bne.n	8006b0a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006b06:	2301      	movs	r3, #1
 8006b08:	e000      	b.n	8006b0c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
	...

08006b18 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b18:	b590      	push	{r4, r7, lr}
 8006b1a:	b08d      	sub	sp, #52	; 0x34
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e363      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0320 	and.w	r3, r3, #32
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f000 808d 	beq.w	8006c52 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b38:	f7ff fe89 	bl	800684e <LL_RCC_GetSysClkSource>
 8006b3c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b3e:	f7ff ff82 	bl	8006a46 <LL_RCC_PLL_GetMainSource>
 8006b42:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d005      	beq.n	8006b56 <HAL_RCC_OscConfig+0x3e>
 8006b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4c:	2b0c      	cmp	r3, #12
 8006b4e:	d147      	bne.n	8006be0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d144      	bne.n	8006be0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d101      	bne.n	8006b62 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e347      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006b66:	f7ff fe34 	bl	80067d2 <LL_RCC_MSI_GetRange>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	429c      	cmp	r4, r3
 8006b6e:	d914      	bls.n	8006b9a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	4618      	mov	r0, r3
 8006b76:	f000 fd2f 	bl	80075d8 <RCC_SetFlashLatencyFromMSIRange>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d001      	beq.n	8006b84 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e336      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff fe0e 	bl	80067aa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7ff fe32 	bl	80067fc <LL_RCC_MSI_SetCalibTrimming>
 8006b98:	e013      	b.n	8006bc2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7ff fe03 	bl	80067aa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7ff fe27 	bl	80067fc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 fd10 	bl	80075d8 <RCC_SetFlashLatencyFromMSIRange>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e317      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006bc2:	f000 fcc9 	bl	8007558 <HAL_RCC_GetHCLKFreq>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	4aa4      	ldr	r2, [pc, #656]	; (8006e5c <HAL_RCC_OscConfig+0x344>)
 8006bca:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006bcc:	4ba4      	ldr	r3, [pc, #656]	; (8006e60 <HAL_RCC_OscConfig+0x348>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7fc fc0b 	bl	80033ec <HAL_InitTick>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d039      	beq.n	8006c50 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e308      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d01e      	beq.n	8006c26 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006be8:	f7ff fdb0 	bl	800674c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006bec:	f7fc fc4c 	bl	8003488 <HAL_GetTick>
 8006bf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006bf2:	e008      	b.n	8006c06 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006bf4:	f7fc fc48 	bl	8003488 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d901      	bls.n	8006c06 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e2f5      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8006c06:	f7ff fdbf 	bl	8006788 <LL_RCC_MSI_IsReady>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d0f1      	beq.n	8006bf4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7ff fdc8 	bl	80067aa <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7ff fdec 	bl	80067fc <LL_RCC_MSI_SetCalibTrimming>
 8006c24:	e015      	b.n	8006c52 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006c26:	f7ff fda0 	bl	800676a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006c2a:	f7fc fc2d 	bl	8003488 <HAL_GetTick>
 8006c2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006c30:	e008      	b.n	8006c44 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006c32:	f7fc fc29 	bl	8003488 <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d901      	bls.n	8006c44 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e2d6      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006c44:	f7ff fda0 	bl	8006788 <LL_RCC_MSI_IsReady>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1f1      	bne.n	8006c32 <HAL_RCC_OscConfig+0x11a>
 8006c4e:	e000      	b.n	8006c52 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006c50:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d047      	beq.n	8006cee <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c5e:	f7ff fdf6 	bl	800684e <LL_RCC_GetSysClkSource>
 8006c62:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c64:	f7ff feef 	bl	8006a46 <LL_RCC_PLL_GetMainSource>
 8006c68:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	2b08      	cmp	r3, #8
 8006c6e:	d005      	beq.n	8006c7c <HAL_RCC_OscConfig+0x164>
 8006c70:	6a3b      	ldr	r3, [r7, #32]
 8006c72:	2b0c      	cmp	r3, #12
 8006c74:	d108      	bne.n	8006c88 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	2b03      	cmp	r3, #3
 8006c7a:	d105      	bne.n	8006c88 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d134      	bne.n	8006cee <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e2b4      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c90:	d102      	bne.n	8006c98 <HAL_RCC_OscConfig+0x180>
 8006c92:	f7ff fbdd 	bl	8006450 <LL_RCC_HSE_Enable>
 8006c96:	e001      	b.n	8006c9c <HAL_RCC_OscConfig+0x184>
 8006c98:	f7ff fbe9 	bl	800646e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d012      	beq.n	8006cca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca4:	f7fc fbf0 	bl	8003488 <HAL_GetTick>
 8006ca8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006caa:	e008      	b.n	8006cbe <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cac:	f7fc fbec 	bl	8003488 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	2b64      	cmp	r3, #100	; 0x64
 8006cb8:	d901      	bls.n	8006cbe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e299      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006cbe:	f7ff fbe5 	bl	800648c <LL_RCC_HSE_IsReady>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0f1      	beq.n	8006cac <HAL_RCC_OscConfig+0x194>
 8006cc8:	e011      	b.n	8006cee <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cca:	f7fc fbdd 	bl	8003488 <HAL_GetTick>
 8006cce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006cd0:	e008      	b.n	8006ce4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cd2:	f7fc fbd9 	bl	8003488 <HAL_GetTick>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	2b64      	cmp	r3, #100	; 0x64
 8006cde:	d901      	bls.n	8006ce4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e286      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006ce4:	f7ff fbd2 	bl	800648c <LL_RCC_HSE_IsReady>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1f1      	bne.n	8006cd2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0302 	and.w	r3, r3, #2
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d04c      	beq.n	8006d94 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cfa:	f7ff fda8 	bl	800684e <LL_RCC_GetSysClkSource>
 8006cfe:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d00:	f7ff fea1 	bl	8006a46 <LL_RCC_PLL_GetMainSource>
 8006d04:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	2b04      	cmp	r3, #4
 8006d0a:	d005      	beq.n	8006d18 <HAL_RCC_OscConfig+0x200>
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	2b0c      	cmp	r3, #12
 8006d10:	d10e      	bne.n	8006d30 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d10b      	bne.n	8006d30 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d101      	bne.n	8006d24 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e266      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7ff fbf1 	bl	8006510 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006d2e:	e031      	b.n	8006d94 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d019      	beq.n	8006d6c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d38:	f7ff fbba 	bl	80064b0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d3c:	f7fc fba4 	bl	8003488 <HAL_GetTick>
 8006d40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006d42:	e008      	b.n	8006d56 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d44:	f7fc fba0 	bl	8003488 <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d901      	bls.n	8006d56 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e24d      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006d56:	f7ff fbc9 	bl	80064ec <LL_RCC_HSI_IsReady>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d0f1      	beq.n	8006d44 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7ff fbd3 	bl	8006510 <LL_RCC_HSI_SetCalibTrimming>
 8006d6a:	e013      	b.n	8006d94 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d6c:	f7ff fbaf 	bl	80064ce <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d70:	f7fc fb8a 	bl	8003488 <HAL_GetTick>
 8006d74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006d76:	e008      	b.n	8006d8a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d78:	f7fc fb86 	bl	8003488 <HAL_GetTick>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d901      	bls.n	8006d8a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e233      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006d8a:	f7ff fbaf 	bl	80064ec <LL_RCC_HSI_IsReady>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1f1      	bne.n	8006d78 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0308 	and.w	r3, r3, #8
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d106      	bne.n	8006dae <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 80a3 	beq.w	8006ef4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d076      	beq.n	8006ea4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0310 	and.w	r3, r3, #16
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d046      	beq.n	8006e50 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006dc2:	f7ff fc66 	bl	8006692 <LL_RCC_LSI1_IsReady>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d113      	bne.n	8006df4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006dcc:	f7ff fc3f 	bl	800664e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006dd0:	f7fc fb5a 	bl	8003488 <HAL_GetTick>
 8006dd4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006dd6:	e008      	b.n	8006dea <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006dd8:	f7fc fb56 	bl	8003488 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d901      	bls.n	8006dea <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e203      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006dea:	f7ff fc52 	bl	8006692 <LL_RCC_LSI1_IsReady>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d0f1      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006df4:	f7ff fc5f 	bl	80066b6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df8:	f7fc fb46 	bl	8003488 <HAL_GetTick>
 8006dfc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006dfe:	e008      	b.n	8006e12 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006e00:	f7fc fb42 	bl	8003488 <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	d901      	bls.n	8006e12 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e1ef      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006e12:	f7ff fc72 	bl	80066fa <LL_RCC_LSI2_IsReady>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d0f1      	beq.n	8006e00 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7ff fc7c 	bl	800671e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8006e26:	f7ff fc23 	bl	8006670 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e2a:	f7fc fb2d 	bl	8003488 <HAL_GetTick>
 8006e2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006e30:	e008      	b.n	8006e44 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006e32:	f7fc fb29 	bl	8003488 <HAL_GetTick>
 8006e36:	4602      	mov	r2, r0
 8006e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d901      	bls.n	8006e44 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e1d6      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006e44:	f7ff fc25 	bl	8006692 <LL_RCC_LSI1_IsReady>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1f1      	bne.n	8006e32 <HAL_RCC_OscConfig+0x31a>
 8006e4e:	e051      	b.n	8006ef4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006e50:	f7ff fbfd 	bl	800664e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e54:	f7fc fb18 	bl	8003488 <HAL_GetTick>
 8006e58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006e5a:	e00c      	b.n	8006e76 <HAL_RCC_OscConfig+0x35e>
 8006e5c:	2000000c 	.word	0x2000000c
 8006e60:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006e64:	f7fc fb10 	bl	8003488 <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d901      	bls.n	8006e76 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e1bd      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006e76:	f7ff fc0c 	bl	8006692 <LL_RCC_LSI1_IsReady>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d0f1      	beq.n	8006e64 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006e80:	f7ff fc2a 	bl	80066d8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006e84:	e008      	b.n	8006e98 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006e86:	f7fc faff 	bl	8003488 <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	2b03      	cmp	r3, #3
 8006e92:	d901      	bls.n	8006e98 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e1ac      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006e98:	f7ff fc2f 	bl	80066fa <LL_RCC_LSI2_IsReady>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1f1      	bne.n	8006e86 <HAL_RCC_OscConfig+0x36e>
 8006ea2:	e027      	b.n	8006ef4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006ea4:	f7ff fc18 	bl	80066d8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea8:	f7fc faee 	bl	8003488 <HAL_GetTick>
 8006eac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006eae:	e008      	b.n	8006ec2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006eb0:	f7fc faea 	bl	8003488 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	2b03      	cmp	r3, #3
 8006ebc:	d901      	bls.n	8006ec2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e197      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006ec2:	f7ff fc1a 	bl	80066fa <LL_RCC_LSI2_IsReady>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1f1      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006ecc:	f7ff fbd0 	bl	8006670 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ed0:	f7fc fada 	bl	8003488 <HAL_GetTick>
 8006ed4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006ed6:	e008      	b.n	8006eea <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006ed8:	f7fc fad6 	bl	8003488 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d901      	bls.n	8006eea <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e183      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006eea:	f7ff fbd2 	bl	8006692 <LL_RCC_LSI1_IsReady>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1f1      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0304 	and.w	r3, r3, #4
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d05b      	beq.n	8006fb8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f00:	4ba7      	ldr	r3, [pc, #668]	; (80071a0 <HAL_RCC_OscConfig+0x688>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d114      	bne.n	8006f36 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006f0c:	f7ff fa70 	bl	80063f0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f10:	f7fc faba 	bl	8003488 <HAL_GetTick>
 8006f14:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f16:	e008      	b.n	8006f2a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f18:	f7fc fab6 	bl	8003488 <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d901      	bls.n	8006f2a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e163      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f2a:	4b9d      	ldr	r3, [pc, #628]	; (80071a0 <HAL_RCC_OscConfig+0x688>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d0f0      	beq.n	8006f18 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d102      	bne.n	8006f44 <HAL_RCC_OscConfig+0x42c>
 8006f3e:	f7ff fb30 	bl	80065a2 <LL_RCC_LSE_Enable>
 8006f42:	e00c      	b.n	8006f5e <HAL_RCC_OscConfig+0x446>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	2b05      	cmp	r3, #5
 8006f4a:	d104      	bne.n	8006f56 <HAL_RCC_OscConfig+0x43e>
 8006f4c:	f7ff fb4b 	bl	80065e6 <LL_RCC_LSE_EnableBypass>
 8006f50:	f7ff fb27 	bl	80065a2 <LL_RCC_LSE_Enable>
 8006f54:	e003      	b.n	8006f5e <HAL_RCC_OscConfig+0x446>
 8006f56:	f7ff fb35 	bl	80065c4 <LL_RCC_LSE_Disable>
 8006f5a:	f7ff fb55 	bl	8006608 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d014      	beq.n	8006f90 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f66:	f7fc fa8f 	bl	8003488 <HAL_GetTick>
 8006f6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006f6c:	e00a      	b.n	8006f84 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f6e:	f7fc fa8b 	bl	8003488 <HAL_GetTick>
 8006f72:	4602      	mov	r2, r0
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d901      	bls.n	8006f84 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006f80:	2303      	movs	r3, #3
 8006f82:	e136      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006f84:	f7ff fb51 	bl	800662a <LL_RCC_LSE_IsReady>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d0ef      	beq.n	8006f6e <HAL_RCC_OscConfig+0x456>
 8006f8e:	e013      	b.n	8006fb8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f90:	f7fc fa7a 	bl	8003488 <HAL_GetTick>
 8006f94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006f96:	e00a      	b.n	8006fae <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f98:	f7fc fa76 	bl	8003488 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d901      	bls.n	8006fae <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e121      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006fae:	f7ff fb3c 	bl	800662a <LL_RCC_LSE_IsReady>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1ef      	bne.n	8006f98 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d02c      	beq.n	800701e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d014      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006fcc:	f7ff fab5 	bl	800653a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fd0:	f7fc fa5a 	bl	8003488 <HAL_GetTick>
 8006fd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006fd6:	e008      	b.n	8006fea <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006fd8:	f7fc fa56 	bl	8003488 <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d901      	bls.n	8006fea <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e103      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006fea:	f7ff fac8 	bl	800657e <LL_RCC_HSI48_IsReady>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d0f1      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x4c0>
 8006ff4:	e013      	b.n	800701e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ff6:	f7ff fab1 	bl	800655c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ffa:	f7fc fa45 	bl	8003488 <HAL_GetTick>
 8006ffe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007000:	e008      	b.n	8007014 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007002:	f7fc fa41 	bl	8003488 <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	2b02      	cmp	r3, #2
 800700e:	d901      	bls.n	8007014 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	e0ee      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007014:	f7ff fab3 	bl	800657e <LL_RCC_HSI48_IsReady>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1f1      	bne.n	8007002 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007022:	2b00      	cmp	r3, #0
 8007024:	f000 80e4 	beq.w	80071f0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007028:	f7ff fc11 	bl	800684e <LL_RCC_GetSysClkSource>
 800702c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800702e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703a:	2b02      	cmp	r3, #2
 800703c:	f040 80b4 	bne.w	80071a8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f003 0203 	and.w	r2, r3, #3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704a:	429a      	cmp	r2, r3
 800704c:	d123      	bne.n	8007096 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007058:	429a      	cmp	r2, r3
 800705a:	d11c      	bne.n	8007096 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	0a1b      	lsrs	r3, r3, #8
 8007060:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007068:	429a      	cmp	r2, r3
 800706a:	d114      	bne.n	8007096 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007076:	429a      	cmp	r2, r3
 8007078:	d10d      	bne.n	8007096 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007084:	429a      	cmp	r2, r3
 8007086:	d106      	bne.n	8007096 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007092:	429a      	cmp	r2, r3
 8007094:	d05d      	beq.n	8007152 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	2b0c      	cmp	r3, #12
 800709a:	d058      	beq.n	800714e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800709c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e0a1      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80070ae:	f7ff fc84 	bl	80069ba <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80070b2:	f7fc f9e9 	bl	8003488 <HAL_GetTick>
 80070b6:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070b8:	e008      	b.n	80070cc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070ba:	f7fc f9e5 	bl	8003488 <HAL_GetTick>
 80070be:	4602      	mov	r2, r0
 80070c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d901      	bls.n	80070cc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e092      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1ef      	bne.n	80070ba <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070de:	68da      	ldr	r2, [r3, #12]
 80070e0:	4b30      	ldr	r3, [pc, #192]	; (80071a4 <HAL_RCC_OscConfig+0x68c>)
 80070e2:	4013      	ands	r3, r2
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80070ec:	4311      	orrs	r1, r2
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070f2:	0212      	lsls	r2, r2, #8
 80070f4:	4311      	orrs	r1, r2
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80070fa:	4311      	orrs	r1, r2
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007100:	4311      	orrs	r1, r2
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007106:	430a      	orrs	r2, r1
 8007108:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800710c:	4313      	orrs	r3, r2
 800710e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007110:	f7ff fc44 	bl	800699c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800711e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007122:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007124:	f7fc f9b0 	bl	8003488 <HAL_GetTick>
 8007128:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800712a:	e008      	b.n	800713e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800712c:	f7fc f9ac 	bl	8003488 <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	2b02      	cmp	r3, #2
 8007138:	d901      	bls.n	800713e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e059      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800713e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d0ef      	beq.n	800712c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800714c:	e050      	b.n	80071f0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e04f      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d147      	bne.n	80071f0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007160:	f7ff fc1c 	bl	800699c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800716e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007172:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007174:	f7fc f988 	bl	8003488 <HAL_GetTick>
 8007178:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800717a:	e008      	b.n	800718e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800717c:	f7fc f984 	bl	8003488 <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	2b02      	cmp	r3, #2
 8007188:	d901      	bls.n	800718e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e031      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800718e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d0ef      	beq.n	800717c <HAL_RCC_OscConfig+0x664>
 800719c:	e028      	b.n	80071f0 <HAL_RCC_OscConfig+0x6d8>
 800719e:	bf00      	nop
 80071a0:	58000400 	.word	0x58000400
 80071a4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	2b0c      	cmp	r3, #12
 80071ac:	d01e      	beq.n	80071ec <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071ae:	f7ff fc04 	bl	80069ba <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b2:	f7fc f969 	bl	8003488 <HAL_GetTick>
 80071b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071b8:	e008      	b.n	80071cc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071ba:	f7fc f965 	bl	8003488 <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d901      	bls.n	80071cc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e012      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1ef      	bne.n	80071ba <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80071da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071de:	68da      	ldr	r2, [r3, #12]
 80071e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80071e4:	4b05      	ldr	r3, [pc, #20]	; (80071fc <HAL_RCC_OscConfig+0x6e4>)
 80071e6:	4013      	ands	r3, r2
 80071e8:	60cb      	str	r3, [r1, #12]
 80071ea:	e001      	b.n	80071f0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e000      	b.n	80071f2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3734      	adds	r7, #52	; 0x34
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd90      	pop	{r4, r7, pc}
 80071fa:	bf00      	nop
 80071fc:	eefefffc 	.word	0xeefefffc

08007200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d101      	bne.n	8007214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e12d      	b.n	8007470 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007214:	4b98      	ldr	r3, [pc, #608]	; (8007478 <HAL_RCC_ClockConfig+0x278>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 0307 	and.w	r3, r3, #7
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	429a      	cmp	r2, r3
 8007220:	d91b      	bls.n	800725a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007222:	4b95      	ldr	r3, [pc, #596]	; (8007478 <HAL_RCC_ClockConfig+0x278>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f023 0207 	bic.w	r2, r3, #7
 800722a:	4993      	ldr	r1, [pc, #588]	; (8007478 <HAL_RCC_ClockConfig+0x278>)
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	4313      	orrs	r3, r2
 8007230:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007232:	f7fc f929 	bl	8003488 <HAL_GetTick>
 8007236:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007238:	e008      	b.n	800724c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800723a:	f7fc f925 	bl	8003488 <HAL_GetTick>
 800723e:	4602      	mov	r2, r0
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	1ad3      	subs	r3, r2, r3
 8007244:	2b02      	cmp	r3, #2
 8007246:	d901      	bls.n	800724c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	e111      	b.n	8007470 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800724c:	4b8a      	ldr	r3, [pc, #552]	; (8007478 <HAL_RCC_ClockConfig+0x278>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0307 	and.w	r3, r3, #7
 8007254:	683a      	ldr	r2, [r7, #0]
 8007256:	429a      	cmp	r2, r3
 8007258:	d1ef      	bne.n	800723a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 0302 	and.w	r3, r3, #2
 8007262:	2b00      	cmp	r3, #0
 8007264:	d016      	beq.n	8007294 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	4618      	mov	r0, r3
 800726c:	f7ff fafb 	bl	8006866 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007270:	f7fc f90a 	bl	8003488 <HAL_GetTick>
 8007274:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007276:	e008      	b.n	800728a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007278:	f7fc f906 	bl	8003488 <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	2b02      	cmp	r3, #2
 8007284:	d901      	bls.n	800728a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e0f2      	b.n	8007470 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800728a:	f7ff fbe8 	bl	8006a5e <LL_RCC_IsActiveFlag_HPRE>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d0f1      	beq.n	8007278 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0320 	and.w	r3, r3, #32
 800729c:	2b00      	cmp	r3, #0
 800729e:	d016      	beq.n	80072ce <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	695b      	ldr	r3, [r3, #20]
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7ff faf2 	bl	800688e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80072aa:	f7fc f8ed 	bl	8003488 <HAL_GetTick>
 80072ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80072b0:	e008      	b.n	80072c4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80072b2:	f7fc f8e9 	bl	8003488 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d901      	bls.n	80072c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e0d5      	b.n	8007470 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80072c4:	f7ff fbdd 	bl	8006a82 <LL_RCC_IsActiveFlag_C2HPRE>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d0f1      	beq.n	80072b2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d016      	beq.n	8007308 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	4618      	mov	r0, r3
 80072e0:	f7ff faeb 	bl	80068ba <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80072e4:	f7fc f8d0 	bl	8003488 <HAL_GetTick>
 80072e8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80072ea:	e008      	b.n	80072fe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80072ec:	f7fc f8cc 	bl	8003488 <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d901      	bls.n	80072fe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e0b8      	b.n	8007470 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80072fe:	f7ff fbd3 	bl	8006aa8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d0f1      	beq.n	80072ec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 0304 	and.w	r3, r3, #4
 8007310:	2b00      	cmp	r3, #0
 8007312:	d016      	beq.n	8007342 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	4618      	mov	r0, r3
 800731a:	f7ff fae5 	bl	80068e8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800731e:	f7fc f8b3 	bl	8003488 <HAL_GetTick>
 8007322:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007324:	e008      	b.n	8007338 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007326:	f7fc f8af 	bl	8003488 <HAL_GetTick>
 800732a:	4602      	mov	r2, r0
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	2b02      	cmp	r3, #2
 8007332:	d901      	bls.n	8007338 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8007334:	2303      	movs	r3, #3
 8007336:	e09b      	b.n	8007470 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007338:	f7ff fbc9 	bl	8006ace <LL_RCC_IsActiveFlag_PPRE1>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d0f1      	beq.n	8007326 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0308 	and.w	r3, r3, #8
 800734a:	2b00      	cmp	r3, #0
 800734c:	d017      	beq.n	800737e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	00db      	lsls	r3, r3, #3
 8007354:	4618      	mov	r0, r3
 8007356:	f7ff fadb 	bl	8006910 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800735a:	f7fc f895 	bl	8003488 <HAL_GetTick>
 800735e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007360:	e008      	b.n	8007374 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007362:	f7fc f891 	bl	8003488 <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	2b02      	cmp	r3, #2
 800736e:	d901      	bls.n	8007374 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e07d      	b.n	8007470 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007374:	f7ff fbbd 	bl	8006af2 <LL_RCC_IsActiveFlag_PPRE2>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d0f1      	beq.n	8007362 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	2b00      	cmp	r3, #0
 8007388:	d043      	beq.n	8007412 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	2b02      	cmp	r3, #2
 8007390:	d106      	bne.n	80073a0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007392:	f7ff f87b 	bl	800648c <LL_RCC_HSE_IsReady>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d11e      	bne.n	80073da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e067      	b.n	8007470 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	2b03      	cmp	r3, #3
 80073a6:	d106      	bne.n	80073b6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80073a8:	f7ff fb16 	bl	80069d8 <LL_RCC_PLL_IsReady>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d113      	bne.n	80073da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e05c      	b.n	8007470 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d106      	bne.n	80073cc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80073be:	f7ff f9e3 	bl	8006788 <LL_RCC_MSI_IsReady>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d108      	bne.n	80073da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e051      	b.n	8007470 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80073cc:	f7ff f88e 	bl	80064ec <LL_RCC_HSI_IsReady>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d101      	bne.n	80073da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e04a      	b.n	8007470 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	4618      	mov	r0, r3
 80073e0:	f7ff fa21 	bl	8006826 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073e4:	f7fc f850 	bl	8003488 <HAL_GetTick>
 80073e8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073ea:	e00a      	b.n	8007402 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073ec:	f7fc f84c 	bl	8003488 <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d901      	bls.n	8007402 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e036      	b.n	8007470 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007402:	f7ff fa24 	bl	800684e <LL_RCC_GetSysClkSource>
 8007406:	4602      	mov	r2, r0
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	429a      	cmp	r2, r3
 8007410:	d1ec      	bne.n	80073ec <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007412:	4b19      	ldr	r3, [pc, #100]	; (8007478 <HAL_RCC_ClockConfig+0x278>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0307 	and.w	r3, r3, #7
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	429a      	cmp	r2, r3
 800741e:	d21b      	bcs.n	8007458 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007420:	4b15      	ldr	r3, [pc, #84]	; (8007478 <HAL_RCC_ClockConfig+0x278>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f023 0207 	bic.w	r2, r3, #7
 8007428:	4913      	ldr	r1, [pc, #76]	; (8007478 <HAL_RCC_ClockConfig+0x278>)
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	4313      	orrs	r3, r2
 800742e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007430:	f7fc f82a 	bl	8003488 <HAL_GetTick>
 8007434:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007436:	e008      	b.n	800744a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007438:	f7fc f826 	bl	8003488 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	2b02      	cmp	r3, #2
 8007444:	d901      	bls.n	800744a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e012      	b.n	8007470 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800744a:	4b0b      	ldr	r3, [pc, #44]	; (8007478 <HAL_RCC_ClockConfig+0x278>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0307 	and.w	r3, r3, #7
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	429a      	cmp	r2, r3
 8007456:	d1ef      	bne.n	8007438 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007458:	f000 f87e 	bl	8007558 <HAL_RCC_GetHCLKFreq>
 800745c:	4603      	mov	r3, r0
 800745e:	4a07      	ldr	r2, [pc, #28]	; (800747c <HAL_RCC_ClockConfig+0x27c>)
 8007460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8007462:	f7fc f81d 	bl	80034a0 <HAL_GetTickPrio>
 8007466:	4603      	mov	r3, r0
 8007468:	4618      	mov	r0, r3
 800746a:	f7fb ffbf 	bl	80033ec <HAL_InitTick>
 800746e:	4603      	mov	r3, r0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	58004000 	.word	0x58004000
 800747c:	2000000c 	.word	0x2000000c

08007480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007480:	b590      	push	{r4, r7, lr}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007486:	f7ff f9e2 	bl	800684e <LL_RCC_GetSysClkSource>
 800748a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d10a      	bne.n	80074a8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007492:	f7ff f99e 	bl	80067d2 <LL_RCC_MSI_GetRange>
 8007496:	4603      	mov	r3, r0
 8007498:	091b      	lsrs	r3, r3, #4
 800749a:	f003 030f 	and.w	r3, r3, #15
 800749e:	4a2b      	ldr	r2, [pc, #172]	; (800754c <HAL_RCC_GetSysClockFreq+0xcc>)
 80074a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074a4:	60fb      	str	r3, [r7, #12]
 80074a6:	e04b      	b.n	8007540 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b04      	cmp	r3, #4
 80074ac:	d102      	bne.n	80074b4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80074ae:	4b28      	ldr	r3, [pc, #160]	; (8007550 <HAL_RCC_GetSysClockFreq+0xd0>)
 80074b0:	60fb      	str	r3, [r7, #12]
 80074b2:	e045      	b.n	8007540 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2b08      	cmp	r3, #8
 80074b8:	d10a      	bne.n	80074d0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80074ba:	f7fe ffb7 	bl	800642c <LL_RCC_HSE_IsEnabledDiv2>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d102      	bne.n	80074ca <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80074c4:	4b22      	ldr	r3, [pc, #136]	; (8007550 <HAL_RCC_GetSysClockFreq+0xd0>)
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	e03a      	b.n	8007540 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80074ca:	4b22      	ldr	r3, [pc, #136]	; (8007554 <HAL_RCC_GetSysClockFreq+0xd4>)
 80074cc:	60fb      	str	r3, [r7, #12]
 80074ce:	e037      	b.n	8007540 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80074d0:	f7ff fab9 	bl	8006a46 <LL_RCC_PLL_GetMainSource>
 80074d4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d003      	beq.n	80074e4 <HAL_RCC_GetSysClockFreq+0x64>
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	2b03      	cmp	r3, #3
 80074e0:	d003      	beq.n	80074ea <HAL_RCC_GetSysClockFreq+0x6a>
 80074e2:	e00d      	b.n	8007500 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80074e4:	4b1a      	ldr	r3, [pc, #104]	; (8007550 <HAL_RCC_GetSysClockFreq+0xd0>)
 80074e6:	60bb      	str	r3, [r7, #8]
        break;
 80074e8:	e015      	b.n	8007516 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80074ea:	f7fe ff9f 	bl	800642c <LL_RCC_HSE_IsEnabledDiv2>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d102      	bne.n	80074fa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80074f4:	4b16      	ldr	r3, [pc, #88]	; (8007550 <HAL_RCC_GetSysClockFreq+0xd0>)
 80074f6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80074f8:	e00d      	b.n	8007516 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80074fa:	4b16      	ldr	r3, [pc, #88]	; (8007554 <HAL_RCC_GetSysClockFreq+0xd4>)
 80074fc:	60bb      	str	r3, [r7, #8]
        break;
 80074fe:	e00a      	b.n	8007516 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007500:	f7ff f967 	bl	80067d2 <LL_RCC_MSI_GetRange>
 8007504:	4603      	mov	r3, r0
 8007506:	091b      	lsrs	r3, r3, #4
 8007508:	f003 030f 	and.w	r3, r3, #15
 800750c:	4a0f      	ldr	r2, [pc, #60]	; (800754c <HAL_RCC_GetSysClockFreq+0xcc>)
 800750e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007512:	60bb      	str	r3, [r7, #8]
        break;
 8007514:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8007516:	f7ff fa71 	bl	80069fc <LL_RCC_PLL_GetN>
 800751a:	4602      	mov	r2, r0
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	fb03 f402 	mul.w	r4, r3, r2
 8007522:	f7ff fa84 	bl	8006a2e <LL_RCC_PLL_GetDivider>
 8007526:	4603      	mov	r3, r0
 8007528:	091b      	lsrs	r3, r3, #4
 800752a:	3301      	adds	r3, #1
 800752c:	fbb4 f4f3 	udiv	r4, r4, r3
 8007530:	f7ff fa71 	bl	8006a16 <LL_RCC_PLL_GetR>
 8007534:	4603      	mov	r3, r0
 8007536:	0f5b      	lsrs	r3, r3, #29
 8007538:	3301      	adds	r3, #1
 800753a:	fbb4 f3f3 	udiv	r3, r4, r3
 800753e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007540:	68fb      	ldr	r3, [r7, #12]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	bd90      	pop	{r4, r7, pc}
 800754a:	bf00      	nop
 800754c:	0800ff24 	.word	0x0800ff24
 8007550:	00f42400 	.word	0x00f42400
 8007554:	01e84800 	.word	0x01e84800

08007558 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007558:	b598      	push	{r3, r4, r7, lr}
 800755a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800755c:	f7ff ff90 	bl	8007480 <HAL_RCC_GetSysClockFreq>
 8007560:	4604      	mov	r4, r0
 8007562:	f7ff f9e9 	bl	8006938 <LL_RCC_GetAHBPrescaler>
 8007566:	4603      	mov	r3, r0
 8007568:	091b      	lsrs	r3, r3, #4
 800756a:	f003 030f 	and.w	r3, r3, #15
 800756e:	4a03      	ldr	r2, [pc, #12]	; (800757c <HAL_RCC_GetHCLKFreq+0x24>)
 8007570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007574:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007578:	4618      	mov	r0, r3
 800757a:	bd98      	pop	{r3, r4, r7, pc}
 800757c:	0800fec4 	.word	0x0800fec4

08007580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007580:	b598      	push	{r3, r4, r7, lr}
 8007582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007584:	f7ff ffe8 	bl	8007558 <HAL_RCC_GetHCLKFreq>
 8007588:	4604      	mov	r4, r0
 800758a:	f7ff f9ef 	bl	800696c <LL_RCC_GetAPB1Prescaler>
 800758e:	4603      	mov	r3, r0
 8007590:	0a1b      	lsrs	r3, r3, #8
 8007592:	f003 0307 	and.w	r3, r3, #7
 8007596:	4a04      	ldr	r2, [pc, #16]	; (80075a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800759c:	f003 031f 	and.w	r3, r3, #31
 80075a0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	bd98      	pop	{r3, r4, r7, pc}
 80075a8:	0800ff04 	.word	0x0800ff04

080075ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075ac:	b598      	push	{r3, r4, r7, lr}
 80075ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80075b0:	f7ff ffd2 	bl	8007558 <HAL_RCC_GetHCLKFreq>
 80075b4:	4604      	mov	r4, r0
 80075b6:	f7ff f9e5 	bl	8006984 <LL_RCC_GetAPB2Prescaler>
 80075ba:	4603      	mov	r3, r0
 80075bc:	0adb      	lsrs	r3, r3, #11
 80075be:	f003 0307 	and.w	r3, r3, #7
 80075c2:	4a04      	ldr	r2, [pc, #16]	; (80075d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80075c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075c8:	f003 031f 	and.w	r3, r3, #31
 80075cc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	bd98      	pop	{r3, r4, r7, pc}
 80075d4:	0800ff04 	.word	0x0800ff04

080075d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80075d8:	b590      	push	{r4, r7, lr}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2bb0      	cmp	r3, #176	; 0xb0
 80075e4:	d903      	bls.n	80075ee <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80075e6:	4b15      	ldr	r3, [pc, #84]	; (800763c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80075e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	e007      	b.n	80075fe <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	091b      	lsrs	r3, r3, #4
 80075f2:	f003 030f 	and.w	r3, r3, #15
 80075f6:	4a11      	ldr	r2, [pc, #68]	; (800763c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80075f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075fc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80075fe:	f7ff f9a7 	bl	8006950 <LL_RCC_GetAHB4Prescaler>
 8007602:	4603      	mov	r3, r0
 8007604:	091b      	lsrs	r3, r3, #4
 8007606:	f003 030f 	and.w	r3, r3, #15
 800760a:	4a0d      	ldr	r2, [pc, #52]	; (8007640 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800760c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	fbb2 f3f3 	udiv	r3, r2, r3
 8007616:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	4a0a      	ldr	r2, [pc, #40]	; (8007644 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800761c:	fba2 2303 	umull	r2, r3, r2, r3
 8007620:	0c9c      	lsrs	r4, r3, #18
 8007622:	f7fe fef5 	bl	8006410 <HAL_PWREx_GetVoltageRange>
 8007626:	4603      	mov	r3, r0
 8007628:	4619      	mov	r1, r3
 800762a:	4620      	mov	r0, r4
 800762c:	f000 f80c 	bl	8007648 <RCC_SetFlashLatency>
 8007630:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8007632:	4618      	mov	r0, r3
 8007634:	3714      	adds	r7, #20
 8007636:	46bd      	mov	sp, r7
 8007638:	bd90      	pop	{r4, r7, pc}
 800763a:	bf00      	nop
 800763c:	0800ff24 	.word	0x0800ff24
 8007640:	0800fec4 	.word	0x0800fec4
 8007644:	431bde83 	.word	0x431bde83

08007648 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007648:	b590      	push	{r4, r7, lr}
 800764a:	b093      	sub	sp, #76	; 0x4c
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007652:	4b37      	ldr	r3, [pc, #220]	; (8007730 <RCC_SetFlashLatency+0xe8>)
 8007654:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8007658:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800765a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800765e:	4a35      	ldr	r2, [pc, #212]	; (8007734 <RCC_SetFlashLatency+0xec>)
 8007660:	f107 031c 	add.w	r3, r7, #28
 8007664:	ca07      	ldmia	r2, {r0, r1, r2}
 8007666:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800766a:	4b33      	ldr	r3, [pc, #204]	; (8007738 <RCC_SetFlashLatency+0xf0>)
 800766c:	f107 040c 	add.w	r4, r7, #12
 8007670:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007672:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007676:	2300      	movs	r3, #0
 8007678:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007680:	d11a      	bne.n	80076b8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007682:	2300      	movs	r3, #0
 8007684:	643b      	str	r3, [r7, #64]	; 0x40
 8007686:	e013      	b.n	80076b0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	3348      	adds	r3, #72	; 0x48
 800768e:	443b      	add	r3, r7
 8007690:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	429a      	cmp	r2, r3
 8007698:	d807      	bhi.n	80076aa <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800769a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	3348      	adds	r3, #72	; 0x48
 80076a0:	443b      	add	r3, r7
 80076a2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80076a6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80076a8:	e020      	b.n	80076ec <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80076aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ac:	3301      	adds	r3, #1
 80076ae:	643b      	str	r3, [r7, #64]	; 0x40
 80076b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	d9e8      	bls.n	8007688 <RCC_SetFlashLatency+0x40>
 80076b6:	e019      	b.n	80076ec <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80076b8:	2300      	movs	r3, #0
 80076ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076bc:	e013      	b.n	80076e6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80076be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	3348      	adds	r3, #72	; 0x48
 80076c4:	443b      	add	r3, r7
 80076c6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d807      	bhi.n	80076e0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80076d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	3348      	adds	r3, #72	; 0x48
 80076d6:	443b      	add	r3, r7
 80076d8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80076dc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80076de:	e005      	b.n	80076ec <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80076e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076e2:	3301      	adds	r3, #1
 80076e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d9e8      	bls.n	80076be <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80076ec:	4b13      	ldr	r3, [pc, #76]	; (800773c <RCC_SetFlashLatency+0xf4>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f023 0207 	bic.w	r2, r3, #7
 80076f4:	4911      	ldr	r1, [pc, #68]	; (800773c <RCC_SetFlashLatency+0xf4>)
 80076f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076f8:	4313      	orrs	r3, r2
 80076fa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80076fc:	f7fb fec4 	bl	8003488 <HAL_GetTick>
 8007700:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007702:	e008      	b.n	8007716 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007704:	f7fb fec0 	bl	8003488 <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	2b02      	cmp	r3, #2
 8007710:	d901      	bls.n	8007716 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e007      	b.n	8007726 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007716:	4b09      	ldr	r3, [pc, #36]	; (800773c <RCC_SetFlashLatency+0xf4>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 0307 	and.w	r3, r3, #7
 800771e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007720:	429a      	cmp	r2, r3
 8007722:	d1ef      	bne.n	8007704 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	374c      	adds	r7, #76	; 0x4c
 800772a:	46bd      	mov	sp, r7
 800772c:	bd90      	pop	{r4, r7, pc}
 800772e:	bf00      	nop
 8007730:	0800f00c 	.word	0x0800f00c
 8007734:	0800f01c 	.word	0x0800f01c
 8007738:	0800f028 	.word	0x0800f028
 800773c:	58004000 	.word	0x58004000

08007740 <LL_RCC_LSE_IsEnabled>:
{
 8007740:	b480      	push	{r7}
 8007742:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	2b01      	cmp	r3, #1
 8007752:	d101      	bne.n	8007758 <LL_RCC_LSE_IsEnabled+0x18>
 8007754:	2301      	movs	r3, #1
 8007756:	e000      	b.n	800775a <LL_RCC_LSE_IsEnabled+0x1a>
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <LL_RCC_LSE_IsReady>:
{
 8007764:	b480      	push	{r7}
 8007766:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800776c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007770:	f003 0302 	and.w	r3, r3, #2
 8007774:	2b02      	cmp	r3, #2
 8007776:	d101      	bne.n	800777c <LL_RCC_LSE_IsReady+0x18>
 8007778:	2301      	movs	r3, #1
 800777a:	e000      	b.n	800777e <LL_RCC_LSE_IsReady+0x1a>
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <LL_RCC_MSI_EnablePLLMode>:
{
 8007788:	b480      	push	{r7}
 800778a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800778c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007796:	f043 0304 	orr.w	r3, r3, #4
 800779a:	6013      	str	r3, [r2, #0]
}
 800779c:	bf00      	nop
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <LL_RCC_SetRFWKPClockSource>:
{
 80077a6:	b480      	push	{r7}
 80077a8:	b083      	sub	sp, #12
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80077ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80077ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80077c6:	bf00      	nop
 80077c8:	370c      	adds	r7, #12
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <LL_RCC_SetSMPSClockSource>:
{
 80077d2:	b480      	push	{r7}
 80077d4:	b083      	sub	sp, #12
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80077da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e0:	f023 0203 	bic.w	r2, r3, #3
 80077e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	624b      	str	r3, [r1, #36]	; 0x24
}
 80077ee:	bf00      	nop
 80077f0:	370c      	adds	r7, #12
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <LL_RCC_SetSMPSPrescaler>:
{
 80077fa:	b480      	push	{r7}
 80077fc:	b083      	sub	sp, #12
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007808:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800780c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4313      	orrs	r3, r2
 8007814:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007816:	bf00      	nop
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007820:	4770      	bx	lr

08007822 <LL_RCC_SetUSARTClockSource>:
{
 8007822:	b480      	push	{r7}
 8007824:	b083      	sub	sp, #12
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800782a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800782e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007832:	f023 0203 	bic.w	r2, r3, #3
 8007836:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4313      	orrs	r3, r2
 800783e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007842:	bf00      	nop
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <LL_RCC_SetLPUARTClockSource>:
{
 800784e:	b480      	push	{r7}
 8007850:	b083      	sub	sp, #12
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800785a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800785e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007862:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4313      	orrs	r3, r2
 800786a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800786e:	bf00      	nop
 8007870:	370c      	adds	r7, #12
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <LL_RCC_SetI2CClockSource>:
{
 800787a:	b480      	push	{r7}
 800787c:	b083      	sub	sp, #12
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007886:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	091b      	lsrs	r3, r3, #4
 800788e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007892:	43db      	mvns	r3, r3
 8007894:	401a      	ands	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	011b      	lsls	r3, r3, #4
 800789a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800789e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078a2:	4313      	orrs	r3, r2
 80078a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <LL_RCC_SetLPTIMClockSource>:
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80078bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	0c1b      	lsrs	r3, r3, #16
 80078c8:	041b      	lsls	r3, r3, #16
 80078ca:	43db      	mvns	r3, r3
 80078cc:	401a      	ands	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	041b      	lsls	r3, r3, #16
 80078d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078d6:	4313      	orrs	r3, r2
 80078d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80078dc:	bf00      	nop
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <LL_RCC_SetSAIClockSource>:
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80078f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80078fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4313      	orrs	r3, r2
 8007904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <LL_RCC_SetRNGClockSource>:
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800791c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007924:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007928:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4313      	orrs	r3, r2
 8007930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <LL_RCC_SetCLK48ClockSource>:
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800794c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007950:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007954:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4313      	orrs	r3, r2
 800795c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <LL_RCC_SetUSBClockSource>:
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f7ff ffe3 	bl	8007940 <LL_RCC_SetCLK48ClockSource>
}
 800797a:	bf00      	nop
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <LL_RCC_SetADCClockSource>:
{
 8007982:	b480      	push	{r7}
 8007984:	b083      	sub	sp, #12
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800798a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800798e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007992:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007996:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4313      	orrs	r3, r2
 800799e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80079a2:	bf00      	nop
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <LL_RCC_SetRTCClockSource>:
{
 80079ae:	b480      	push	{r7}
 80079b0:	b083      	sub	sp, #12
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80079b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80079ce:	bf00      	nop
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <LL_RCC_GetRTCClockSource>:
{
 80079da:	b480      	push	{r7}
 80079dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80079de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <LL_RCC_ForceBackupDomainReset>:
{
 80079f4:	b480      	push	{r7}
 80079f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80079f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007a0c:	bf00      	nop
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007a16:	b480      	push	{r7}
 8007a18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007a2e:	bf00      	nop
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <LL_RCC_PLLSAI1_Enable>:
{
 8007a38:	b480      	push	{r7}
 8007a3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a4a:	6013      	str	r3, [r2, #0]
}
 8007a4c:	bf00      	nop
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <LL_RCC_PLLSAI1_Disable>:
{
 8007a56:	b480      	push	{r7}
 8007a58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a68:	6013      	str	r3, [r2, #0]
}
 8007a6a:	bf00      	nop
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <LL_RCC_PLLSAI1_IsReady>:
{
 8007a74:	b480      	push	{r7}
 8007a76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a86:	d101      	bne.n	8007a8c <LL_RCC_PLLSAI1_IsReady+0x18>
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e000      	b.n	8007a8e <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b088      	sub	sp, #32
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d034      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007abc:	d021      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007abe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007ac2:	d81b      	bhi.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007ac4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ac8:	d01d      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007aca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ace:	d815      	bhi.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d00b      	beq.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007ad4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ad8:	d110      	bne.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ae8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007aea:	e00d      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	3304      	adds	r3, #4
 8007af0:	4618      	mov	r0, r3
 8007af2:	f000 f94d 	bl	8007d90 <RCCEx_PLLSAI1_ConfigNP>
 8007af6:	4603      	mov	r3, r0
 8007af8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007afa:	e005      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	77fb      	strb	r3, [r7, #31]
        break;
 8007b00:	e002      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007b02:	bf00      	nop
 8007b04:	e000      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b08:	7ffb      	ldrb	r3, [r7, #31]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d105      	bne.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7ff fee8 	bl	80078e8 <LL_RCC_SetSAIClockSource>
 8007b18:	e001      	b.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b1a:	7ffb      	ldrb	r3, [r7, #31]
 8007b1c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d046      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007b2a:	f7ff ff56 	bl	80079da <LL_RCC_GetRTCClockSource>
 8007b2e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b34:	69ba      	ldr	r2, [r7, #24]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d03c      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007b3a:	f7fe fc59 	bl	80063f0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d105      	bne.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7ff ff30 	bl	80079ae <LL_RCC_SetRTCClockSource>
 8007b4e:	e02e      	b.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b58:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007b5a:	f7ff ff4b 	bl	80079f4 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007b5e:	f7ff ff5a 	bl	8007a16 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007b70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007b7a:	f7ff fde1 	bl	8007740 <LL_RCC_LSE_IsEnabled>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d114      	bne.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007b84:	f7fb fc80 	bl	8003488 <HAL_GetTick>
 8007b88:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007b8a:	e00b      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b8c:	f7fb fc7c 	bl	8003488 <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d902      	bls.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	77fb      	strb	r3, [r7, #31]
              break;
 8007ba2:	e004      	b.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007ba4:	f7ff fdde 	bl	8007764 <LL_RCC_LSE_IsReady>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d1ee      	bne.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007bae:	7ffb      	ldrb	r3, [r7, #31]
 8007bb0:	77bb      	strb	r3, [r7, #30]
 8007bb2:	e001      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb4:	7ffb      	ldrb	r3, [r7, #31]
 8007bb6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0301 	and.w	r3, r3, #1
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d004      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7ff fe2a 	bl	8007822 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0302 	and.w	r3, r3, #2
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d004      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	69db      	ldr	r3, [r3, #28]
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7ff fe35 	bl	800784e <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 0310 	and.w	r3, r3, #16
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d004      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7ff fe5d 	bl	80078b4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 0320 	and.w	r3, r3, #32
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d004      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7ff fe52 	bl	80078b4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d004      	beq.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a1b      	ldr	r3, [r3, #32]
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7ff fe2a 	bl	800787a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0308 	and.w	r3, r3, #8
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d004      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7ff fe1f 	bl	800787a <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d022      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7ff fe8d 	bl	800796c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c5a:	d107      	bne.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8007c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c6a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c74:	d10b      	bne.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	3304      	adds	r3, #4
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f000 f8e3 	bl	8007e46 <RCCEx_PLLSAI1_ConfigNQ>
 8007c80:	4603      	mov	r3, r0
 8007c82:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007c84:	7ffb      	ldrb	r3, [r7, #31]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8007c8a:	7ffb      	ldrb	r3, [r7, #31]
 8007c8c:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d02b      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ca2:	d008      	beq.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cac:	d003      	beq.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d105      	bne.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7ff fe2a 	bl	8007914 <LL_RCC_SetRNGClockSource>
 8007cc0:	e00a      	b.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cca:	60fb      	str	r3, [r7, #12]
 8007ccc:	2000      	movs	r0, #0
 8007cce:	f7ff fe21 	bl	8007914 <LL_RCC_SetRNGClockSource>
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f7ff fe34 	bl	8007940 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cdc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007ce0:	d107      	bne.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007cf0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d022      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7ff fe3d 	bl	8007982 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d10:	d107      	bne.n	8007d22 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d20:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d2a:	d10b      	bne.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	3304      	adds	r3, #4
 8007d30:	4618      	mov	r0, r3
 8007d32:	f000 f8e3 	bl	8007efc <RCCEx_PLLSAI1_ConfigNR>
 8007d36:	4603      	mov	r3, r0
 8007d38:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007d3a:	7ffb      	ldrb	r3, [r7, #31]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8007d40:	7ffb      	ldrb	r3, [r7, #31]
 8007d42:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d004      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7ff fd26 	bl	80077a6 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d009      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7ff fd45 	bl	80077fa <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7ff fd2c 	bl	80077d2 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8007d7a:	7fbb      	ldrb	r3, [r7, #30]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3720      	adds	r7, #32
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8007d88:	f7ff fcfe 	bl	8007788 <LL_RCC_MSI_EnablePLLMode>
}
 8007d8c:	bf00      	nop
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007d9c:	f7ff fe5b 	bl	8007a56 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007da0:	f7fb fb72 	bl	8003488 <HAL_GetTick>
 8007da4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007da6:	e009      	b.n	8007dbc <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007da8:	f7fb fb6e 	bl	8003488 <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d902      	bls.n	8007dbc <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	73fb      	strb	r3, [r7, #15]
      break;
 8007dba:	e004      	b.n	8007dc6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007dbc:	f7ff fe5a 	bl	8007a74 <LL_RCC_PLLSAI1_IsReady>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1f0      	bne.n	8007da8 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d137      	bne.n	8007e3c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	021b      	lsls	r3, r3, #8
 8007ddc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007de0:	4313      	orrs	r3, r2
 8007de2:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8007de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007df6:	4313      	orrs	r3, r2
 8007df8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007dfa:	f7ff fe1d 	bl	8007a38 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dfe:	f7fb fb43 	bl	8003488 <HAL_GetTick>
 8007e02:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007e04:	e009      	b.n	8007e1a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007e06:	f7fb fb3f 	bl	8003488 <HAL_GetTick>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d902      	bls.n	8007e1a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	73fb      	strb	r3, [r7, #15]
        break;
 8007e18:	e004      	b.n	8007e24 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007e1a:	f7ff fe2b 	bl	8007a74 <LL_RCC_PLLSAI1_IsReady>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d1f0      	bne.n	8007e06 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8007e24:	7bfb      	ldrb	r3, [r7, #15]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d108      	bne.n	8007e3c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e2e:	691a      	ldr	r2, [r3, #16]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b084      	sub	sp, #16
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007e52:	f7ff fe00 	bl	8007a56 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007e56:	f7fb fb17 	bl	8003488 <HAL_GetTick>
 8007e5a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007e5c:	e009      	b.n	8007e72 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007e5e:	f7fb fb13 	bl	8003488 <HAL_GetTick>
 8007e62:	4602      	mov	r2, r0
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d902      	bls.n	8007e72 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e70:	e004      	b.n	8007e7c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007e72:	f7ff fdff 	bl	8007a74 <LL_RCC_PLLSAI1_IsReady>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1f0      	bne.n	8007e5e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d137      	bne.n	8007ef2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	021b      	lsls	r3, r3, #8
 8007e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007e96:	4313      	orrs	r3, r2
 8007e98:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007eac:	4313      	orrs	r3, r2
 8007eae:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007eb0:	f7ff fdc2 	bl	8007a38 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007eb4:	f7fb fae8 	bl	8003488 <HAL_GetTick>
 8007eb8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007eba:	e009      	b.n	8007ed0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007ebc:	f7fb fae4 	bl	8003488 <HAL_GetTick>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d902      	bls.n	8007ed0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	73fb      	strb	r3, [r7, #15]
        break;
 8007ece:	e004      	b.n	8007eda <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007ed0:	f7ff fdd0 	bl	8007a74 <LL_RCC_PLLSAI1_IsReady>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d1f0      	bne.n	8007ebc <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007eda:	7bfb      	ldrb	r3, [r7, #15]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d108      	bne.n	8007ef2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ee4:	691a      	ldr	r2, [r3, #16]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007f08:	f7ff fda5 	bl	8007a56 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007f0c:	f7fb fabc 	bl	8003488 <HAL_GetTick>
 8007f10:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007f12:	e009      	b.n	8007f28 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007f14:	f7fb fab8 	bl	8003488 <HAL_GetTick>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	1ad3      	subs	r3, r2, r3
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d902      	bls.n	8007f28 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	73fb      	strb	r3, [r7, #15]
      break;
 8007f26:	e004      	b.n	8007f32 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007f28:	f7ff fda4 	bl	8007a74 <LL_RCC_PLLSAI1_IsReady>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1f0      	bne.n	8007f14 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d137      	bne.n	8007fa8 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	021b      	lsls	r3, r3, #8
 8007f48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8007f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f62:	4313      	orrs	r3, r2
 8007f64:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007f66:	f7ff fd67 	bl	8007a38 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f6a:	f7fb fa8d 	bl	8003488 <HAL_GetTick>
 8007f6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007f70:	e009      	b.n	8007f86 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007f72:	f7fb fa89 	bl	8003488 <HAL_GetTick>
 8007f76:	4602      	mov	r2, r0
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d902      	bls.n	8007f86 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007f80:	2303      	movs	r3, #3
 8007f82:	73fb      	strb	r3, [r7, #15]
        break;
 8007f84:	e004      	b.n	8007f90 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007f86:	f7ff fd75 	bl	8007a74 <LL_RCC_PLLSAI1_IsReady>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d1f0      	bne.n	8007f72 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d108      	bne.n	8007fa8 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f9a:	691a      	ldr	r2, [r3, #16]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
	...

08007fb4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d101      	bne.n	8007fc6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e09f      	b.n	8008106 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d106      	bne.n	8007fe0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f7fa ff46 	bl	8002e6c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007fe8:	4b49      	ldr	r3, [pc, #292]	; (8008110 <HAL_RTC_Init+0x15c>)
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	f003 0310 	and.w	r3, r3, #16
 8007ff0:	2b10      	cmp	r3, #16
 8007ff2:	d07e      	beq.n	80080f2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	22ca      	movs	r2, #202	; 0xca
 8007ffa:	625a      	str	r2, [r3, #36]	; 0x24
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2253      	movs	r2, #83	; 0x53
 8008002:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 f8ab 	bl	8008160 <RTC_EnterInitMode>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00a      	beq.n	8008026 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	22ff      	movs	r2, #255	; 0xff
 8008016:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2204      	movs	r2, #4
 800801c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	73fb      	strb	r3, [r7, #15]
 8008024:	e067      	b.n	80080f6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	6812      	ldr	r2, [r2, #0]
 8008030:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008038:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	6899      	ldr	r1, [r3, #8]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685a      	ldr	r2, [r3, #4]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	431a      	orrs	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	431a      	orrs	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	430a      	orrs	r2, r1
 8008056:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	68d2      	ldr	r2, [r2, #12]
 8008060:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	6919      	ldr	r1, [r3, #16]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	041a      	lsls	r2, r3, #16
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	430a      	orrs	r2, r1
 8008074:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68da      	ldr	r2, [r3, #12]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008084:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f022 0203 	bic.w	r2, r2, #3
 8008094:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	69da      	ldr	r2, [r3, #28]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	695b      	ldr	r3, [r3, #20]
 80080a4:	431a      	orrs	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	430a      	orrs	r2, r1
 80080ac:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f003 0320 	and.w	r3, r3, #32
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d113      	bne.n	80080e4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f829 	bl	8008114 <HAL_RTC_WaitForSynchro>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00d      	beq.n	80080e4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	22ff      	movs	r2, #255	; 0xff
 80080ce:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2204      	movs	r2, #4
 80080d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e010      	b.n	8008106 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	22ff      	movs	r2, #255	; 0xff
 80080ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80080ec:	2300      	movs	r3, #0
 80080ee:	73fb      	strb	r3, [r7, #15]
 80080f0:	e001      	b.n	80080f6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80080f2:	2300      	movs	r3, #0
 80080f4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80080f6:	7bfb      	ldrb	r3, [r7, #15]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d103      	bne.n	8008104 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8008104:	7bfb      	ldrb	r3, [r7, #15]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	40002800 	.word	0x40002800

08008114 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68da      	ldr	r2, [r3, #12]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800812a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800812c:	f7fb f9ac 	bl	8003488 <HAL_GetTick>
 8008130:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008132:	e009      	b.n	8008148 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008134:	f7fb f9a8 	bl	8003488 <HAL_GetTick>
 8008138:	4602      	mov	r2, r0
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008142:	d901      	bls.n	8008148 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008144:	2303      	movs	r3, #3
 8008146:	e007      	b.n	8008158 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	f003 0320 	and.w	r3, r3, #32
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0ee      	beq.n	8008134 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008172:	2b00      	cmp	r3, #0
 8008174:	d119      	bne.n	80081aa <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f04f 32ff 	mov.w	r2, #4294967295
 800817e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008180:	f7fb f982 	bl	8003488 <HAL_GetTick>
 8008184:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008186:	e009      	b.n	800819c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008188:	f7fb f97e 	bl	8003488 <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008196:	d901      	bls.n	800819c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e007      	b.n	80081ac <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d0ee      	beq.n	8008188 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80081aa:	2300      	movs	r3, #0
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d101      	bne.n	80081ce <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80081ca:	2302      	movs	r3, #2
 80081cc:	e0a8      	b.n	8008320 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2201      	movs	r2, #1
 80081d2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2202      	movs	r2, #2
 80081da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	22ca      	movs	r2, #202	; 0xca
 80081e4:	625a      	str	r2, [r3, #36]	; 0x24
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2253      	movs	r2, #83	; 0x53
 80081ec:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d020      	beq.n	800823e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80081fc:	f7fb f944 	bl	8003488 <HAL_GetTick>
 8008200:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8008202:	e015      	b.n	8008230 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008204:	f7fb f940 	bl	8003488 <HAL_GetTick>
 8008208:	4602      	mov	r2, r0
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008212:	d90d      	bls.n	8008230 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	22ff      	movs	r2, #255	; 0xff
 800821a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2203      	movs	r2, #3
 8008220:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e077      	b.n	8008320 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	f003 0304 	and.w	r3, r3, #4
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1e2      	bne.n	8008204 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	689a      	ldr	r2, [r3, #8]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800824c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	b2da      	uxtb	r2, r3
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800825e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008260:	f7fb f912 	bl	8003488 <HAL_GetTick>
 8008264:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008266:	e015      	b.n	8008294 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008268:	f7fb f90e 	bl	8003488 <HAL_GetTick>
 800826c:	4602      	mov	r2, r0
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008276:	d90d      	bls.n	8008294 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	22ff      	movs	r2, #255	; 0xff
 800827e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2203      	movs	r2, #3
 8008284:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8008290:	2303      	movs	r3, #3
 8008292:	e045      	b.n	8008320 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	f003 0304 	and.w	r3, r3, #4
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0e2      	beq.n	8008268 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	689a      	ldr	r2, [r3, #8]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f022 0207 	bic.w	r2, r2, #7
 80082b8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	6899      	ldr	r1, [r3, #8]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	430a      	orrs	r2, r1
 80082c8:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80082ca:	4b17      	ldr	r3, [pc, #92]	; (8008328 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80082cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082d0:	4a15      	ldr	r2, [pc, #84]	; (8008328 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80082d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082d6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80082da:	4b13      	ldr	r3, [pc, #76]	; (8008328 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a12      	ldr	r2, [pc, #72]	; (8008328 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80082e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082e4:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	689a      	ldr	r2, [r3, #8]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082f4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	689a      	ldr	r2, [r3, #8]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008304:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	22ff      	movs	r2, #255	; 0xff
 800830c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2201      	movs	r2, #1
 8008312:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3718      	adds	r7, #24
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	58000800 	.word	0x58000800

0800832c <LL_RCC_GetUSARTClockSource>:
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008338:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4013      	ands	r3, r2
}
 8008340:	4618      	mov	r0, r3
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <LL_RCC_GetLPUARTClockSource>:
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008358:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4013      	ands	r3, r2
}
 8008360:	4618      	mov	r0, r3
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e042      	b.n	8008404 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008384:	2b00      	cmp	r3, #0
 8008386:	d106      	bne.n	8008396 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f7fa fd9f 	bl	8002ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2224      	movs	r2, #36	; 0x24
 800839a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f022 0201 	bic.w	r2, r2, #1
 80083ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fbf0 	bl	8008b94 <UART_SetConfig>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d101      	bne.n	80083be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e022      	b.n	8008404 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d002      	beq.n	80083cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fe0c 	bl	8008fe4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	685a      	ldr	r2, [r3, #4]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	689a      	ldr	r2, [r3, #8]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f042 0201 	orr.w	r2, r2, #1
 80083fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fe93 	bl	8009128 <UART_CheckIdleState>
 8008402:	4603      	mov	r3, r0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3708      	adds	r7, #8
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b08a      	sub	sp, #40	; 0x28
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	4613      	mov	r3, r2
 8008418:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008420:	2b20      	cmp	r3, #32
 8008422:	d167      	bne.n	80084f4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d002      	beq.n	8008430 <HAL_UART_Transmit_DMA+0x24>
 800842a:	88fb      	ldrh	r3, [r7, #6]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d101      	bne.n	8008434 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	e060      	b.n	80084f6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	68ba      	ldr	r2, [r7, #8]
 8008438:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	88fa      	ldrh	r2, [r7, #6]
 800843e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	88fa      	ldrh	r2, [r7, #6]
 8008446:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2221      	movs	r2, #33	; 0x21
 8008456:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800845e:	2b00      	cmp	r3, #0
 8008460:	d028      	beq.n	80084b4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008466:	4a26      	ldr	r2, [pc, #152]	; (8008500 <HAL_UART_Transmit_DMA+0xf4>)
 8008468:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800846e:	4a25      	ldr	r2, [pc, #148]	; (8008504 <HAL_UART_Transmit_DMA+0xf8>)
 8008470:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008476:	4a24      	ldr	r2, [pc, #144]	; (8008508 <HAL_UART_Transmit_DMA+0xfc>)
 8008478:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800847e:	2200      	movs	r2, #0
 8008480:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800848a:	4619      	mov	r1, r3
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	3328      	adds	r3, #40	; 0x28
 8008492:	461a      	mov	r2, r3
 8008494:	88fb      	ldrh	r3, [r7, #6]
 8008496:	f7fc fc49 	bl	8004d2c <HAL_DMA_Start_IT>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d009      	beq.n	80084b4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2210      	movs	r2, #16
 80084a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2220      	movs	r2, #32
 80084ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e020      	b.n	80084f6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2240      	movs	r2, #64	; 0x40
 80084ba:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3308      	adds	r3, #8
 80084c2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	e853 3f00 	ldrex	r3, [r3]
 80084ca:	613b      	str	r3, [r7, #16]
   return(result);
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084d2:	627b      	str	r3, [r7, #36]	; 0x24
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	3308      	adds	r3, #8
 80084da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084dc:	623a      	str	r2, [r7, #32]
 80084de:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e0:	69f9      	ldr	r1, [r7, #28]
 80084e2:	6a3a      	ldr	r2, [r7, #32]
 80084e4:	e841 2300 	strex	r3, r2, [r1]
 80084e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1e5      	bne.n	80084bc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80084f0:	2300      	movs	r3, #0
 80084f2:	e000      	b.n	80084f6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80084f4:	2302      	movs	r3, #2
  }
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3728      	adds	r7, #40	; 0x28
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	080094a3 	.word	0x080094a3
 8008504:	0800953d 	.word	0x0800953d
 8008508:	08009559 	.word	0x08009559

0800850c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b0ba      	sub	sp, #232	; 0xe8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	69db      	ldr	r3, [r3, #28]
 800851a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008532:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008536:	f640 030f 	movw	r3, #2063	; 0x80f
 800853a:	4013      	ands	r3, r2
 800853c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008540:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008544:	2b00      	cmp	r3, #0
 8008546:	d11b      	bne.n	8008580 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800854c:	f003 0320 	and.w	r3, r3, #32
 8008550:	2b00      	cmp	r3, #0
 8008552:	d015      	beq.n	8008580 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008558:	f003 0320 	and.w	r3, r3, #32
 800855c:	2b00      	cmp	r3, #0
 800855e:	d105      	bne.n	800856c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008568:	2b00      	cmp	r3, #0
 800856a:	d009      	beq.n	8008580 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 82e3 	beq.w	8008b3c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	4798      	blx	r3
      }
      return;
 800857e:	e2dd      	b.n	8008b3c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008580:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008584:	2b00      	cmp	r3, #0
 8008586:	f000 8123 	beq.w	80087d0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800858a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800858e:	4b8d      	ldr	r3, [pc, #564]	; (80087c4 <HAL_UART_IRQHandler+0x2b8>)
 8008590:	4013      	ands	r3, r2
 8008592:	2b00      	cmp	r3, #0
 8008594:	d106      	bne.n	80085a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008596:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800859a:	4b8b      	ldr	r3, [pc, #556]	; (80087c8 <HAL_UART_IRQHandler+0x2bc>)
 800859c:	4013      	ands	r3, r2
 800859e:	2b00      	cmp	r3, #0
 80085a0:	f000 8116 	beq.w	80087d0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085a8:	f003 0301 	and.w	r3, r3, #1
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d011      	beq.n	80085d4 <HAL_UART_IRQHandler+0xc8>
 80085b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00b      	beq.n	80085d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2201      	movs	r2, #1
 80085c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ca:	f043 0201 	orr.w	r2, r3, #1
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085d8:	f003 0302 	and.w	r3, r3, #2
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d011      	beq.n	8008604 <HAL_UART_IRQHandler+0xf8>
 80085e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80085e4:	f003 0301 	and.w	r3, r3, #1
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00b      	beq.n	8008604 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2202      	movs	r2, #2
 80085f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085fa:	f043 0204 	orr.w	r2, r3, #4
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008608:	f003 0304 	and.w	r3, r3, #4
 800860c:	2b00      	cmp	r3, #0
 800860e:	d011      	beq.n	8008634 <HAL_UART_IRQHandler+0x128>
 8008610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008614:	f003 0301 	and.w	r3, r3, #1
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00b      	beq.n	8008634 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2204      	movs	r2, #4
 8008622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800862a:	f043 0202 	orr.w	r2, r3, #2
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008638:	f003 0308 	and.w	r3, r3, #8
 800863c:	2b00      	cmp	r3, #0
 800863e:	d017      	beq.n	8008670 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008644:	f003 0320 	and.w	r3, r3, #32
 8008648:	2b00      	cmp	r3, #0
 800864a:	d105      	bne.n	8008658 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800864c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008650:	4b5c      	ldr	r3, [pc, #368]	; (80087c4 <HAL_UART_IRQHandler+0x2b8>)
 8008652:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00b      	beq.n	8008670 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2208      	movs	r2, #8
 800865e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008666:	f043 0208 	orr.w	r2, r3, #8
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008678:	2b00      	cmp	r3, #0
 800867a:	d012      	beq.n	80086a2 <HAL_UART_IRQHandler+0x196>
 800867c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008680:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00c      	beq.n	80086a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008690:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008698:	f043 0220 	orr.w	r2, r3, #32
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 8249 	beq.w	8008b40 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80086ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086b2:	f003 0320 	and.w	r3, r3, #32
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d013      	beq.n	80086e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80086ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086be:	f003 0320 	and.w	r3, r3, #32
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d105      	bne.n	80086d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80086c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d007      	beq.n	80086e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f6:	2b40      	cmp	r3, #64	; 0x40
 80086f8:	d005      	beq.n	8008706 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80086fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80086fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008702:	2b00      	cmp	r3, #0
 8008704:	d054      	beq.n	80087b0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 fe65 	bl	80093d6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008716:	2b40      	cmp	r3, #64	; 0x40
 8008718:	d146      	bne.n	80087a8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	3308      	adds	r3, #8
 8008720:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008724:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008728:	e853 3f00 	ldrex	r3, [r3]
 800872c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008730:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008738:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3308      	adds	r3, #8
 8008742:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008746:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800874a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008752:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008756:	e841 2300 	strex	r3, r2, [r1]
 800875a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800875e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1d9      	bne.n	800871a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800876c:	2b00      	cmp	r3, #0
 800876e:	d017      	beq.n	80087a0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008776:	4a15      	ldr	r2, [pc, #84]	; (80087cc <HAL_UART_IRQHandler+0x2c0>)
 8008778:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008780:	4618      	mov	r0, r3
 8008782:	f7fc fbad 	bl	8004ee0 <HAL_DMA_Abort_IT>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d019      	beq.n	80087c0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800879a:	4610      	mov	r0, r2
 800879c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800879e:	e00f      	b.n	80087c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 f9e1 	bl	8008b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a6:	e00b      	b.n	80087c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f9dd 	bl	8008b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ae:	e007      	b.n	80087c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f9d9 	bl	8008b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80087be:	e1bf      	b.n	8008b40 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c0:	bf00      	nop
    return;
 80087c2:	e1bd      	b.n	8008b40 <HAL_UART_IRQHandler+0x634>
 80087c4:	10000001 	.word	0x10000001
 80087c8:	04000120 	.word	0x04000120
 80087cc:	080095d9 	.word	0x080095d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	f040 8153 	bne.w	8008a80 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80087da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087de:	f003 0310 	and.w	r3, r3, #16
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f000 814c 	beq.w	8008a80 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80087e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087ec:	f003 0310 	and.w	r3, r3, #16
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f000 8145 	beq.w	8008a80 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2210      	movs	r2, #16
 80087fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008808:	2b40      	cmp	r3, #64	; 0x40
 800880a:	f040 80bb 	bne.w	8008984 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800881c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008820:	2b00      	cmp	r3, #0
 8008822:	f000 818f 	beq.w	8008b44 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800882c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008830:	429a      	cmp	r2, r3
 8008832:	f080 8187 	bcs.w	8008b44 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800883c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 0320 	and.w	r3, r3, #32
 800884e:	2b00      	cmp	r3, #0
 8008850:	f040 8087 	bne.w	8008962 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008860:	e853 3f00 	ldrex	r3, [r3]
 8008864:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008868:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800886c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008870:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	461a      	mov	r2, r3
 800887a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800887e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008882:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008886:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800888a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800888e:	e841 2300 	strex	r3, r2, [r1]
 8008892:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008896:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1da      	bne.n	8008854 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	3308      	adds	r3, #8
 80088a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088a8:	e853 3f00 	ldrex	r3, [r3]
 80088ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80088ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088b0:	f023 0301 	bic.w	r3, r3, #1
 80088b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	3308      	adds	r3, #8
 80088be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80088c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80088c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80088ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80088ce:	e841 2300 	strex	r3, r2, [r1]
 80088d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80088d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d1e1      	bne.n	800889e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	3308      	adds	r3, #8
 80088e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088e4:	e853 3f00 	ldrex	r3, [r3]
 80088e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80088ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	3308      	adds	r3, #8
 80088fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80088fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008900:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008902:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008904:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008906:	e841 2300 	strex	r3, r2, [r1]
 800890a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800890c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1e3      	bne.n	80088da <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2220      	movs	r2, #32
 8008916:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008928:	e853 3f00 	ldrex	r3, [r3]
 800892c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800892e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008930:	f023 0310 	bic.w	r3, r3, #16
 8008934:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	461a      	mov	r2, r3
 800893e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008942:	65bb      	str	r3, [r7, #88]	; 0x58
 8008944:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008946:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008948:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800894a:	e841 2300 	strex	r3, r2, [r1]
 800894e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1e4      	bne.n	8008920 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800895c:	4618      	mov	r0, r3
 800895e:	f7fc fa60 	bl	8004e22 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2202      	movs	r2, #2
 8008966:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008974:	b29b      	uxth	r3, r3
 8008976:	1ad3      	subs	r3, r2, r3
 8008978:	b29b      	uxth	r3, r3
 800897a:	4619      	mov	r1, r3
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 f8fd 	bl	8008b7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008982:	e0df      	b.n	8008b44 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008990:	b29b      	uxth	r3, r3
 8008992:	1ad3      	subs	r3, r2, r3
 8008994:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800899e:	b29b      	uxth	r3, r3
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f000 80d1 	beq.w	8008b48 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80089a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f000 80cc 	beq.w	8008b48 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b8:	e853 3f00 	ldrex	r3, [r3]
 80089bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	461a      	mov	r2, r3
 80089ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089d2:	647b      	str	r3, [r7, #68]	; 0x44
 80089d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089da:	e841 2300 	strex	r3, r2, [r1]
 80089de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80089e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1e4      	bne.n	80089b0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	3308      	adds	r3, #8
 80089ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f0:	e853 3f00 	ldrex	r3, [r3]
 80089f4:	623b      	str	r3, [r7, #32]
   return(result);
 80089f6:	6a3b      	ldr	r3, [r7, #32]
 80089f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089fc:	f023 0301 	bic.w	r3, r3, #1
 8008a00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	3308      	adds	r3, #8
 8008a0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a0e:	633a      	str	r2, [r7, #48]	; 0x30
 8008a10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a16:	e841 2300 	strex	r3, r2, [r1]
 8008a1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1e1      	bne.n	80089e6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2220      	movs	r2, #32
 8008a26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	e853 3f00 	ldrex	r3, [r3]
 8008a42:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f023 0310 	bic.w	r3, r3, #16
 8008a4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	461a      	mov	r2, r3
 8008a54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008a58:	61fb      	str	r3, [r7, #28]
 8008a5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5c:	69b9      	ldr	r1, [r7, #24]
 8008a5e:	69fa      	ldr	r2, [r7, #28]
 8008a60:	e841 2300 	strex	r3, r2, [r1]
 8008a64:	617b      	str	r3, [r7, #20]
   return(result);
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1e4      	bne.n	8008a36 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2202      	movs	r2, #2
 8008a70:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a76:	4619      	mov	r1, r3
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 f87f 	bl	8008b7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a7e:	e063      	b.n	8008b48 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00e      	beq.n	8008aaa <HAL_UART_IRQHandler+0x59e>
 8008a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d008      	beq.n	8008aaa <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008aa0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fdd9 	bl	800965a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008aa8:	e051      	b.n	8008b4e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d014      	beq.n	8008ae0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d105      	bne.n	8008ace <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ac6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d008      	beq.n	8008ae0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d03a      	beq.n	8008b4c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	4798      	blx	r3
    }
    return;
 8008ade:	e035      	b.n	8008b4c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d009      	beq.n	8008b00 <HAL_UART_IRQHandler+0x5f4>
 8008aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d003      	beq.n	8008b00 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fd83 	bl	8009604 <UART_EndTransmit_IT>
    return;
 8008afe:	e026      	b.n	8008b4e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d009      	beq.n	8008b20 <HAL_UART_IRQHandler+0x614>
 8008b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d003      	beq.n	8008b20 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 fdb2 	bl	8009682 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b1e:	e016      	b.n	8008b4e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d010      	beq.n	8008b4e <HAL_UART_IRQHandler+0x642>
 8008b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	da0c      	bge.n	8008b4e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 fd9a 	bl	800966e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b3a:	e008      	b.n	8008b4e <HAL_UART_IRQHandler+0x642>
      return;
 8008b3c:	bf00      	nop
 8008b3e:	e006      	b.n	8008b4e <HAL_UART_IRQHandler+0x642>
    return;
 8008b40:	bf00      	nop
 8008b42:	e004      	b.n	8008b4e <HAL_UART_IRQHandler+0x642>
      return;
 8008b44:	bf00      	nop
 8008b46:	e002      	b.n	8008b4e <HAL_UART_IRQHandler+0x642>
      return;
 8008b48:	bf00      	nop
 8008b4a:	e000      	b.n	8008b4e <HAL_UART_IRQHandler+0x642>
    return;
 8008b4c:	bf00      	nop
  }
}
 8008b4e:	37e8      	adds	r7, #232	; 0xe8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008b5c:	bf00      	nop
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	460b      	mov	r3, r1
 8008b86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b98:	b08c      	sub	sp, #48	; 0x30
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	689a      	ldr	r2, [r3, #8]
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	431a      	orrs	r2, r3
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	695b      	ldr	r3, [r3, #20]
 8008bb2:	431a      	orrs	r2, r3
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	69db      	ldr	r3, [r3, #28]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	4baf      	ldr	r3, [pc, #700]	; (8008e80 <UART_SetConfig+0x2ec>)
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	6812      	ldr	r2, [r2, #0]
 8008bca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bcc:	430b      	orrs	r3, r1
 8008bce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	68da      	ldr	r2, [r3, #12]
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	430a      	orrs	r2, r1
 8008be4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	699b      	ldr	r3, [r3, #24]
 8008bea:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4aa4      	ldr	r2, [pc, #656]	; (8008e84 <UART_SetConfig+0x2f0>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d004      	beq.n	8008c00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	6a1b      	ldr	r3, [r3, #32]
 8008bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008c0a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008c0e:	697a      	ldr	r2, [r7, #20]
 8008c10:	6812      	ldr	r2, [r2, #0]
 8008c12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c14:	430b      	orrs	r3, r1
 8008c16:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1e:	f023 010f 	bic.w	r1, r3, #15
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	430a      	orrs	r2, r1
 8008c2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a95      	ldr	r2, [pc, #596]	; (8008e88 <UART_SetConfig+0x2f4>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d125      	bne.n	8008c84 <UART_SetConfig+0xf0>
 8008c38:	2003      	movs	r0, #3
 8008c3a:	f7ff fb77 	bl	800832c <LL_RCC_GetUSARTClockSource>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b03      	cmp	r3, #3
 8008c42:	d81b      	bhi.n	8008c7c <UART_SetConfig+0xe8>
 8008c44:	a201      	add	r2, pc, #4	; (adr r2, 8008c4c <UART_SetConfig+0xb8>)
 8008c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4a:	bf00      	nop
 8008c4c:	08008c5d 	.word	0x08008c5d
 8008c50:	08008c6d 	.word	0x08008c6d
 8008c54:	08008c65 	.word	0x08008c65
 8008c58:	08008c75 	.word	0x08008c75
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c62:	e042      	b.n	8008cea <UART_SetConfig+0x156>
 8008c64:	2302      	movs	r3, #2
 8008c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c6a:	e03e      	b.n	8008cea <UART_SetConfig+0x156>
 8008c6c:	2304      	movs	r3, #4
 8008c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c72:	e03a      	b.n	8008cea <UART_SetConfig+0x156>
 8008c74:	2308      	movs	r3, #8
 8008c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c7a:	e036      	b.n	8008cea <UART_SetConfig+0x156>
 8008c7c:	2310      	movs	r3, #16
 8008c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c82:	e032      	b.n	8008cea <UART_SetConfig+0x156>
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a7e      	ldr	r2, [pc, #504]	; (8008e84 <UART_SetConfig+0x2f0>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d12a      	bne.n	8008ce4 <UART_SetConfig+0x150>
 8008c8e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008c92:	f7ff fb5b 	bl	800834c <LL_RCC_GetLPUARTClockSource>
 8008c96:	4603      	mov	r3, r0
 8008c98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c9c:	d01a      	beq.n	8008cd4 <UART_SetConfig+0x140>
 8008c9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ca2:	d81b      	bhi.n	8008cdc <UART_SetConfig+0x148>
 8008ca4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ca8:	d00c      	beq.n	8008cc4 <UART_SetConfig+0x130>
 8008caa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cae:	d815      	bhi.n	8008cdc <UART_SetConfig+0x148>
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d003      	beq.n	8008cbc <UART_SetConfig+0x128>
 8008cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cb8:	d008      	beq.n	8008ccc <UART_SetConfig+0x138>
 8008cba:	e00f      	b.n	8008cdc <UART_SetConfig+0x148>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cc2:	e012      	b.n	8008cea <UART_SetConfig+0x156>
 8008cc4:	2302      	movs	r3, #2
 8008cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cca:	e00e      	b.n	8008cea <UART_SetConfig+0x156>
 8008ccc:	2304      	movs	r3, #4
 8008cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cd2:	e00a      	b.n	8008cea <UART_SetConfig+0x156>
 8008cd4:	2308      	movs	r3, #8
 8008cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cda:	e006      	b.n	8008cea <UART_SetConfig+0x156>
 8008cdc:	2310      	movs	r3, #16
 8008cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ce2:	e002      	b.n	8008cea <UART_SetConfig+0x156>
 8008ce4:	2310      	movs	r3, #16
 8008ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a65      	ldr	r2, [pc, #404]	; (8008e84 <UART_SetConfig+0x2f0>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	f040 8097 	bne.w	8008e24 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008cf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008cfa:	2b08      	cmp	r3, #8
 8008cfc:	d823      	bhi.n	8008d46 <UART_SetConfig+0x1b2>
 8008cfe:	a201      	add	r2, pc, #4	; (adr r2, 8008d04 <UART_SetConfig+0x170>)
 8008d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d04:	08008d29 	.word	0x08008d29
 8008d08:	08008d47 	.word	0x08008d47
 8008d0c:	08008d31 	.word	0x08008d31
 8008d10:	08008d47 	.word	0x08008d47
 8008d14:	08008d37 	.word	0x08008d37
 8008d18:	08008d47 	.word	0x08008d47
 8008d1c:	08008d47 	.word	0x08008d47
 8008d20:	08008d47 	.word	0x08008d47
 8008d24:	08008d3f 	.word	0x08008d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d28:	f7fe fc2a 	bl	8007580 <HAL_RCC_GetPCLK1Freq>
 8008d2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d2e:	e010      	b.n	8008d52 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d30:	4b56      	ldr	r3, [pc, #344]	; (8008e8c <UART_SetConfig+0x2f8>)
 8008d32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008d34:	e00d      	b.n	8008d52 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d36:	f7fe fba3 	bl	8007480 <HAL_RCC_GetSysClockFreq>
 8008d3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d3c:	e009      	b.n	8008d52 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008d44:	e005      	b.n	8008d52 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8008d46:	2300      	movs	r3, #0
 8008d48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008d50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f000 812b 	beq.w	8008fb0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5e:	4a4c      	ldr	r2, [pc, #304]	; (8008e90 <UART_SetConfig+0x2fc>)
 8008d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d64:	461a      	mov	r2, r3
 8008d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d68:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d6c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	685a      	ldr	r2, [r3, #4]
 8008d72:	4613      	mov	r3, r2
 8008d74:	005b      	lsls	r3, r3, #1
 8008d76:	4413      	add	r3, r2
 8008d78:	69ba      	ldr	r2, [r7, #24]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d305      	bcc.n	8008d8a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d84:	69ba      	ldr	r2, [r7, #24]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d903      	bls.n	8008d92 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008d90:	e10e      	b.n	8008fb0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d94:	2200      	movs	r2, #0
 8008d96:	60bb      	str	r3, [r7, #8]
 8008d98:	60fa      	str	r2, [r7, #12]
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9e:	4a3c      	ldr	r2, [pc, #240]	; (8008e90 <UART_SetConfig+0x2fc>)
 8008da0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	2200      	movs	r2, #0
 8008da8:	603b      	str	r3, [r7, #0]
 8008daa:	607a      	str	r2, [r7, #4]
 8008dac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008db0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008db4:	f7f7 fd22 	bl	80007fc <__aeabi_uldivmod>
 8008db8:	4602      	mov	r2, r0
 8008dba:	460b      	mov	r3, r1
 8008dbc:	4610      	mov	r0, r2
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	f04f 0200 	mov.w	r2, #0
 8008dc4:	f04f 0300 	mov.w	r3, #0
 8008dc8:	020b      	lsls	r3, r1, #8
 8008dca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008dce:	0202      	lsls	r2, r0, #8
 8008dd0:	6979      	ldr	r1, [r7, #20]
 8008dd2:	6849      	ldr	r1, [r1, #4]
 8008dd4:	0849      	lsrs	r1, r1, #1
 8008dd6:	2000      	movs	r0, #0
 8008dd8:	460c      	mov	r4, r1
 8008dda:	4605      	mov	r5, r0
 8008ddc:	eb12 0804 	adds.w	r8, r2, r4
 8008de0:	eb43 0905 	adc.w	r9, r3, r5
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	469a      	mov	sl, r3
 8008dec:	4693      	mov	fp, r2
 8008dee:	4652      	mov	r2, sl
 8008df0:	465b      	mov	r3, fp
 8008df2:	4640      	mov	r0, r8
 8008df4:	4649      	mov	r1, r9
 8008df6:	f7f7 fd01 	bl	80007fc <__aeabi_uldivmod>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	4613      	mov	r3, r2
 8008e00:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e02:	6a3b      	ldr	r3, [r7, #32]
 8008e04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e08:	d308      	bcc.n	8008e1c <UART_SetConfig+0x288>
 8008e0a:	6a3b      	ldr	r3, [r7, #32]
 8008e0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e10:	d204      	bcs.n	8008e1c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	6a3a      	ldr	r2, [r7, #32]
 8008e18:	60da      	str	r2, [r3, #12]
 8008e1a:	e0c9      	b.n	8008fb0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008e22:	e0c5      	b.n	8008fb0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	69db      	ldr	r3, [r3, #28]
 8008e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e2c:	d16d      	bne.n	8008f0a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008e2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008e32:	3b01      	subs	r3, #1
 8008e34:	2b07      	cmp	r3, #7
 8008e36:	d82d      	bhi.n	8008e94 <UART_SetConfig+0x300>
 8008e38:	a201      	add	r2, pc, #4	; (adr r2, 8008e40 <UART_SetConfig+0x2ac>)
 8008e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3e:	bf00      	nop
 8008e40:	08008e61 	.word	0x08008e61
 8008e44:	08008e69 	.word	0x08008e69
 8008e48:	08008e95 	.word	0x08008e95
 8008e4c:	08008e6f 	.word	0x08008e6f
 8008e50:	08008e95 	.word	0x08008e95
 8008e54:	08008e95 	.word	0x08008e95
 8008e58:	08008e95 	.word	0x08008e95
 8008e5c:	08008e77 	.word	0x08008e77
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e60:	f7fe fba4 	bl	80075ac <HAL_RCC_GetPCLK2Freq>
 8008e64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e66:	e01b      	b.n	8008ea0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e68:	4b08      	ldr	r3, [pc, #32]	; (8008e8c <UART_SetConfig+0x2f8>)
 8008e6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008e6c:	e018      	b.n	8008ea0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e6e:	f7fe fb07 	bl	8007480 <HAL_RCC_GetSysClockFreq>
 8008e72:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e74:	e014      	b.n	8008ea0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008e7c:	e010      	b.n	8008ea0 <UART_SetConfig+0x30c>
 8008e7e:	bf00      	nop
 8008e80:	cfff69f3 	.word	0xcfff69f3
 8008e84:	40008000 	.word	0x40008000
 8008e88:	40013800 	.word	0x40013800
 8008e8c:	00f42400 	.word	0x00f42400
 8008e90:	0800ff64 	.word	0x0800ff64
      default:
        pclk = 0U;
 8008e94:	2300      	movs	r3, #0
 8008e96:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008e9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f000 8084 	beq.w	8008fb0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eac:	4a4b      	ldr	r2, [pc, #300]	; (8008fdc <UART_SetConfig+0x448>)
 8008eae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008eba:	005a      	lsls	r2, r3, #1
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	085b      	lsrs	r3, r3, #1
 8008ec2:	441a      	add	r2, r3
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ecc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ece:	6a3b      	ldr	r3, [r7, #32]
 8008ed0:	2b0f      	cmp	r3, #15
 8008ed2:	d916      	bls.n	8008f02 <UART_SetConfig+0x36e>
 8008ed4:	6a3b      	ldr	r3, [r7, #32]
 8008ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008eda:	d212      	bcs.n	8008f02 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008edc:	6a3b      	ldr	r3, [r7, #32]
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	f023 030f 	bic.w	r3, r3, #15
 8008ee4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ee6:	6a3b      	ldr	r3, [r7, #32]
 8008ee8:	085b      	lsrs	r3, r3, #1
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	f003 0307 	and.w	r3, r3, #7
 8008ef0:	b29a      	uxth	r2, r3
 8008ef2:	8bfb      	ldrh	r3, [r7, #30]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	8bfa      	ldrh	r2, [r7, #30]
 8008efe:	60da      	str	r2, [r3, #12]
 8008f00:	e056      	b.n	8008fb0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008f08:	e052      	b.n	8008fb0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	2b07      	cmp	r3, #7
 8008f12:	d822      	bhi.n	8008f5a <UART_SetConfig+0x3c6>
 8008f14:	a201      	add	r2, pc, #4	; (adr r2, 8008f1c <UART_SetConfig+0x388>)
 8008f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f1a:	bf00      	nop
 8008f1c:	08008f3d 	.word	0x08008f3d
 8008f20:	08008f45 	.word	0x08008f45
 8008f24:	08008f5b 	.word	0x08008f5b
 8008f28:	08008f4b 	.word	0x08008f4b
 8008f2c:	08008f5b 	.word	0x08008f5b
 8008f30:	08008f5b 	.word	0x08008f5b
 8008f34:	08008f5b 	.word	0x08008f5b
 8008f38:	08008f53 	.word	0x08008f53
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f3c:	f7fe fb36 	bl	80075ac <HAL_RCC_GetPCLK2Freq>
 8008f40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f42:	e010      	b.n	8008f66 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f44:	4b26      	ldr	r3, [pc, #152]	; (8008fe0 <UART_SetConfig+0x44c>)
 8008f46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f48:	e00d      	b.n	8008f66 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f4a:	f7fe fa99 	bl	8007480 <HAL_RCC_GetSysClockFreq>
 8008f4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f50:	e009      	b.n	8008f66 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f58:	e005      	b.n	8008f66 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008f64:	bf00      	nop
    }

    if (pclk != 0U)
 8008f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d021      	beq.n	8008fb0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f70:	4a1a      	ldr	r2, [pc, #104]	; (8008fdc <UART_SetConfig+0x448>)
 8008f72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f76:	461a      	mov	r2, r3
 8008f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	085b      	lsrs	r3, r3, #1
 8008f84:	441a      	add	r2, r3
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f90:	6a3b      	ldr	r3, [r7, #32]
 8008f92:	2b0f      	cmp	r3, #15
 8008f94:	d909      	bls.n	8008faa <UART_SetConfig+0x416>
 8008f96:	6a3b      	ldr	r3, [r7, #32]
 8008f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f9c:	d205      	bcs.n	8008faa <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f9e:	6a3b      	ldr	r3, [r7, #32]
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	60da      	str	r2, [r3, #12]
 8008fa8:	e002      	b.n	8008fb0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008fcc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3730      	adds	r7, #48	; 0x30
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008fda:	bf00      	nop
 8008fdc:	0800ff64 	.word	0x0800ff64
 8008fe0:	00f42400 	.word	0x00f42400

08008fe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff0:	f003 0301 	and.w	r3, r3, #1
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d00a      	beq.n	800900e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	430a      	orrs	r2, r1
 800900c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009012:	f003 0302 	and.w	r3, r3, #2
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00a      	beq.n	8009030 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	430a      	orrs	r2, r1
 800902e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009034:	f003 0304 	and.w	r3, r3, #4
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00a      	beq.n	8009052 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	430a      	orrs	r2, r1
 8009050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009056:	f003 0308 	and.w	r3, r3, #8
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00a      	beq.n	8009074 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	430a      	orrs	r2, r1
 8009072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009078:	f003 0310 	and.w	r3, r3, #16
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00a      	beq.n	8009096 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	430a      	orrs	r2, r1
 8009094:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800909a:	f003 0320 	and.w	r3, r3, #32
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00a      	beq.n	80090b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	430a      	orrs	r2, r1
 80090b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d01a      	beq.n	80090fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	430a      	orrs	r2, r1
 80090d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090e2:	d10a      	bne.n	80090fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	430a      	orrs	r2, r1
 80090f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00a      	beq.n	800911c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	430a      	orrs	r2, r1
 800911a:	605a      	str	r2, [r3, #4]
  }
}
 800911c:	bf00      	nop
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b086      	sub	sp, #24
 800912c:	af02      	add	r7, sp, #8
 800912e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009138:	f7fa f9a6 	bl	8003488 <HAL_GetTick>
 800913c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 0308 	and.w	r3, r3, #8
 8009148:	2b08      	cmp	r3, #8
 800914a:	d10e      	bne.n	800916a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800914c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009150:	9300      	str	r3, [sp, #0]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2200      	movs	r2, #0
 8009156:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f832 	bl	80091c4 <UART_WaitOnFlagUntilTimeout>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009166:	2303      	movs	r3, #3
 8009168:	e028      	b.n	80091bc <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f003 0304 	and.w	r3, r3, #4
 8009174:	2b04      	cmp	r3, #4
 8009176:	d10e      	bne.n	8009196 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009178:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800917c:	9300      	str	r3, [sp, #0]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2200      	movs	r2, #0
 8009182:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 f81c 	bl	80091c4 <UART_WaitOnFlagUntilTimeout>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d001      	beq.n	8009196 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009192:	2303      	movs	r3, #3
 8009194:	e012      	b.n	80091bc <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2220      	movs	r2, #32
 800919a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2220      	movs	r2, #32
 80091a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3710      	adds	r7, #16
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b09c      	sub	sp, #112	; 0x70
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	603b      	str	r3, [r7, #0]
 80091d0:	4613      	mov	r3, r2
 80091d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091d4:	e0a9      	b.n	800932a <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091dc:	f000 80a5 	beq.w	800932a <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091e0:	f7fa f952 	bl	8003488 <HAL_GetTick>
 80091e4:	4602      	mov	r2, r0
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d302      	bcc.n	80091f6 <UART_WaitOnFlagUntilTimeout+0x32>
 80091f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d140      	bne.n	8009278 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091fe:	e853 3f00 	ldrex	r3, [r3]
 8009202:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009206:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800920a:	667b      	str	r3, [r7, #100]	; 0x64
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	461a      	mov	r2, r3
 8009212:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009214:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009216:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009218:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800921a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800921c:	e841 2300 	strex	r3, r2, [r1]
 8009220:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1e6      	bne.n	80091f6 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	3308      	adds	r3, #8
 800922e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009232:	e853 3f00 	ldrex	r3, [r3]
 8009236:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923a:	f023 0301 	bic.w	r3, r3, #1
 800923e:	663b      	str	r3, [r7, #96]	; 0x60
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	3308      	adds	r3, #8
 8009246:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009248:	64ba      	str	r2, [r7, #72]	; 0x48
 800924a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800924e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009250:	e841 2300 	strex	r3, r2, [r1]
 8009254:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1e5      	bne.n	8009228 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2220      	movs	r2, #32
 8009260:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2220      	movs	r2, #32
 8009268:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2200      	movs	r2, #0
 8009270:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8009274:	2303      	movs	r3, #3
 8009276:	e069      	b.n	800934c <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 0304 	and.w	r3, r3, #4
 8009282:	2b00      	cmp	r3, #0
 8009284:	d051      	beq.n	800932a <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	69db      	ldr	r3, [r3, #28]
 800928c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009294:	d149      	bne.n	800932a <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800929e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a8:	e853 3f00 	ldrex	r3, [r3]
 80092ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80092b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	461a      	mov	r2, r3
 80092bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092be:	637b      	str	r3, [r7, #52]	; 0x34
 80092c0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092c6:	e841 2300 	strex	r3, r2, [r1]
 80092ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80092cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d1e6      	bne.n	80092a0 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3308      	adds	r3, #8
 80092d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	e853 3f00 	ldrex	r3, [r3]
 80092e0:	613b      	str	r3, [r7, #16]
   return(result);
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	f023 0301 	bic.w	r3, r3, #1
 80092e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	3308      	adds	r3, #8
 80092f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80092f2:	623a      	str	r2, [r7, #32]
 80092f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f6:	69f9      	ldr	r1, [r7, #28]
 80092f8:	6a3a      	ldr	r2, [r7, #32]
 80092fa:	e841 2300 	strex	r3, r2, [r1]
 80092fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1e5      	bne.n	80092d2 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2220      	movs	r2, #32
 800930a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2220      	movs	r2, #32
 8009312:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2220      	movs	r2, #32
 800931a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2200      	movs	r2, #0
 8009322:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009326:	2303      	movs	r3, #3
 8009328:	e010      	b.n	800934c <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	69da      	ldr	r2, [r3, #28]
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	4013      	ands	r3, r2
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	429a      	cmp	r2, r3
 8009338:	bf0c      	ite	eq
 800933a:	2301      	moveq	r3, #1
 800933c:	2300      	movne	r3, #0
 800933e:	b2db      	uxtb	r3, r3
 8009340:	461a      	mov	r2, r3
 8009342:	79fb      	ldrb	r3, [r7, #7]
 8009344:	429a      	cmp	r2, r3
 8009346:	f43f af46 	beq.w	80091d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3770      	adds	r7, #112	; 0x70
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009354:	b480      	push	{r7}
 8009356:	b08f      	sub	sp, #60	; 0x3c
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009362:	6a3b      	ldr	r3, [r7, #32]
 8009364:	e853 3f00 	ldrex	r3, [r3]
 8009368:	61fb      	str	r3, [r7, #28]
   return(result);
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009370:	637b      	str	r3, [r7, #52]	; 0x34
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	461a      	mov	r2, r3
 8009378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800937a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800937c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009382:	e841 2300 	strex	r3, r2, [r1]
 8009386:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938a:	2b00      	cmp	r3, #0
 800938c:	d1e6      	bne.n	800935c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	3308      	adds	r3, #8
 8009394:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	e853 3f00 	ldrex	r3, [r3]
 800939c:	60bb      	str	r3, [r7, #8]
   return(result);
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80093a4:	633b      	str	r3, [r7, #48]	; 0x30
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	3308      	adds	r3, #8
 80093ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093ae:	61ba      	str	r2, [r7, #24]
 80093b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b2:	6979      	ldr	r1, [r7, #20]
 80093b4:	69ba      	ldr	r2, [r7, #24]
 80093b6:	e841 2300 	strex	r3, r2, [r1]
 80093ba:	613b      	str	r3, [r7, #16]
   return(result);
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1e5      	bne.n	800938e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2220      	movs	r2, #32
 80093c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80093ca:	bf00      	nop
 80093cc:	373c      	adds	r7, #60	; 0x3c
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr

080093d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80093d6:	b480      	push	{r7}
 80093d8:	b095      	sub	sp, #84	; 0x54
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e6:	e853 3f00 	ldrex	r3, [r3]
 80093ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80093ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	461a      	mov	r2, r3
 80093fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093fc:	643b      	str	r3, [r7, #64]	; 0x40
 80093fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009400:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009402:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009404:	e841 2300 	strex	r3, r2, [r1]
 8009408:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800940a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940c:	2b00      	cmp	r3, #0
 800940e:	d1e6      	bne.n	80093de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	3308      	adds	r3, #8
 8009416:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009418:	6a3b      	ldr	r3, [r7, #32]
 800941a:	e853 3f00 	ldrex	r3, [r3]
 800941e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009426:	f023 0301 	bic.w	r3, r3, #1
 800942a:	64bb      	str	r3, [r7, #72]	; 0x48
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	3308      	adds	r3, #8
 8009432:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009434:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009436:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009438:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800943a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800943c:	e841 2300 	strex	r3, r2, [r1]
 8009440:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009444:	2b00      	cmp	r3, #0
 8009446:	d1e3      	bne.n	8009410 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800944c:	2b01      	cmp	r3, #1
 800944e:	d118      	bne.n	8009482 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	e853 3f00 	ldrex	r3, [r3]
 800945c:	60bb      	str	r3, [r7, #8]
   return(result);
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	f023 0310 	bic.w	r3, r3, #16
 8009464:	647b      	str	r3, [r7, #68]	; 0x44
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	461a      	mov	r2, r3
 800946c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800946e:	61bb      	str	r3, [r7, #24]
 8009470:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009472:	6979      	ldr	r1, [r7, #20]
 8009474:	69ba      	ldr	r2, [r7, #24]
 8009476:	e841 2300 	strex	r3, r2, [r1]
 800947a:	613b      	str	r3, [r7, #16]
   return(result);
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1e6      	bne.n	8009450 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2220      	movs	r2, #32
 8009486:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009496:	bf00      	nop
 8009498:	3754      	adds	r7, #84	; 0x54
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr

080094a2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b090      	sub	sp, #64	; 0x40
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ae:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 0320 	and.w	r3, r3, #32
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d137      	bne.n	800952e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80094be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094c0:	2200      	movs	r2, #0
 80094c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80094c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	3308      	adds	r3, #8
 80094cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d0:	e853 3f00 	ldrex	r3, [r3]
 80094d4:	623b      	str	r3, [r7, #32]
   return(result);
 80094d6:	6a3b      	ldr	r3, [r7, #32]
 80094d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80094de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	3308      	adds	r3, #8
 80094e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094e6:	633a      	str	r2, [r7, #48]	; 0x30
 80094e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094ee:	e841 2300 	strex	r3, r2, [r1]
 80094f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1e5      	bne.n	80094c6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	e853 3f00 	ldrex	r3, [r3]
 8009506:	60fb      	str	r3, [r7, #12]
   return(result);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800950e:	637b      	str	r3, [r7, #52]	; 0x34
 8009510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	461a      	mov	r2, r3
 8009516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009518:	61fb      	str	r3, [r7, #28]
 800951a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951c:	69b9      	ldr	r1, [r7, #24]
 800951e:	69fa      	ldr	r2, [r7, #28]
 8009520:	e841 2300 	strex	r3, r2, [r1]
 8009524:	617b      	str	r3, [r7, #20]
   return(result);
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1e6      	bne.n	80094fa <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800952c:	e002      	b.n	8009534 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800952e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009530:	f7f8 fe4c 	bl	80021cc <HAL_UART_TxCpltCallback>
}
 8009534:	bf00      	nop
 8009536:	3740      	adds	r7, #64	; 0x40
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009548:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800954a:	68f8      	ldr	r0, [r7, #12]
 800954c:	f7ff fb02 	bl	8008b54 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009550:	bf00      	nop
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b086      	sub	sp, #24
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009564:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800956c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009574:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009580:	2b80      	cmp	r3, #128	; 0x80
 8009582:	d109      	bne.n	8009598 <UART_DMAError+0x40>
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	2b21      	cmp	r3, #33	; 0x21
 8009588:	d106      	bne.n	8009598 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	2200      	movs	r2, #0
 800958e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009592:	6978      	ldr	r0, [r7, #20]
 8009594:	f7ff fede 	bl	8009354 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095a2:	2b40      	cmp	r3, #64	; 0x40
 80095a4:	d109      	bne.n	80095ba <UART_DMAError+0x62>
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2b22      	cmp	r3, #34	; 0x22
 80095aa:	d106      	bne.n	80095ba <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80095b4:	6978      	ldr	r0, [r7, #20]
 80095b6:	f7ff ff0e 	bl	80093d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095c0:	f043 0210 	orr.w	r2, r3, #16
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095ca:	6978      	ldr	r0, [r7, #20]
 80095cc:	f7ff facc 	bl	8008b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095d0:	bf00      	nop
 80095d2:	3718      	adds	r7, #24
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095f6:	68f8      	ldr	r0, [r7, #12]
 80095f8:	f7ff fab6 	bl	8008b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095fc:	bf00      	nop
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b088      	sub	sp, #32
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	e853 3f00 	ldrex	r3, [r3]
 8009618:	60bb      	str	r3, [r7, #8]
   return(result);
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009620:	61fb      	str	r3, [r7, #28]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	461a      	mov	r2, r3
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	61bb      	str	r3, [r7, #24]
 800962c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962e:	6979      	ldr	r1, [r7, #20]
 8009630:	69ba      	ldr	r2, [r7, #24]
 8009632:	e841 2300 	strex	r3, r2, [r1]
 8009636:	613b      	str	r3, [r7, #16]
   return(result);
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1e6      	bne.n	800960c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2220      	movs	r2, #32
 8009642:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f7f8 fdbd 	bl	80021cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009652:	bf00      	nop
 8009654:	3720      	adds	r7, #32
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800965a:	b480      	push	{r7}
 800965c:	b083      	sub	sp, #12
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009662:	bf00      	nop
 8009664:	370c      	adds	r7, #12
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr

0800966e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800966e:	b480      	push	{r7}
 8009670:	b083      	sub	sp, #12
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009676:	bf00      	nop
 8009678:	370c      	adds	r7, #12
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009682:	b480      	push	{r7}
 8009684:	b083      	sub	sp, #12
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800968a:	bf00      	nop
 800968c:	370c      	adds	r7, #12
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr

08009696 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009696:	b480      	push	{r7}
 8009698:	b085      	sub	sp, #20
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d101      	bne.n	80096ac <HAL_UARTEx_DisableFifoMode+0x16>
 80096a8:	2302      	movs	r3, #2
 80096aa:	e027      	b.n	80096fc <HAL_UARTEx_DisableFifoMode+0x66>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2224      	movs	r2, #36	; 0x24
 80096b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f022 0201 	bic.w	r2, r2, #1
 80096d2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80096da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68fa      	ldr	r2, [r7, #12]
 80096e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2220      	movs	r2, #32
 80096ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3714      	adds	r7, #20
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009718:	2b01      	cmp	r3, #1
 800971a:	d101      	bne.n	8009720 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800971c:	2302      	movs	r3, #2
 800971e:	e02d      	b.n	800977c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2224      	movs	r2, #36	; 0x24
 800972c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	681a      	ldr	r2, [r3, #0]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f022 0201 	bic.w	r2, r2, #1
 8009746:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	683a      	ldr	r2, [r7, #0]
 8009758:	430a      	orrs	r2, r1
 800975a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 f84f 	bl	8009800 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2220      	movs	r2, #32
 800976e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009794:	2b01      	cmp	r3, #1
 8009796:	d101      	bne.n	800979c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009798:	2302      	movs	r3, #2
 800979a:	e02d      	b.n	80097f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2224      	movs	r2, #36	; 0x24
 80097a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f022 0201 	bic.w	r2, r2, #1
 80097c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	683a      	ldr	r2, [r7, #0]
 80097d4:	430a      	orrs	r2, r1
 80097d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 f811 	bl	8009800 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	68fa      	ldr	r2, [r7, #12]
 80097e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2220      	movs	r2, #32
 80097ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800980c:	2b00      	cmp	r3, #0
 800980e:	d108      	bne.n	8009822 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009820:	e031      	b.n	8009886 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009822:	2308      	movs	r3, #8
 8009824:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009826:	2308      	movs	r3, #8
 8009828:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	0e5b      	lsrs	r3, r3, #25
 8009832:	b2db      	uxtb	r3, r3
 8009834:	f003 0307 	and.w	r3, r3, #7
 8009838:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	0f5b      	lsrs	r3, r3, #29
 8009842:	b2db      	uxtb	r3, r3
 8009844:	f003 0307 	and.w	r3, r3, #7
 8009848:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800984a:	7bbb      	ldrb	r3, [r7, #14]
 800984c:	7b3a      	ldrb	r2, [r7, #12]
 800984e:	4911      	ldr	r1, [pc, #68]	; (8009894 <UARTEx_SetNbDataToProcess+0x94>)
 8009850:	5c8a      	ldrb	r2, [r1, r2]
 8009852:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009856:	7b3a      	ldrb	r2, [r7, #12]
 8009858:	490f      	ldr	r1, [pc, #60]	; (8009898 <UARTEx_SetNbDataToProcess+0x98>)
 800985a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800985c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009860:	b29a      	uxth	r2, r3
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009868:	7bfb      	ldrb	r3, [r7, #15]
 800986a:	7b7a      	ldrb	r2, [r7, #13]
 800986c:	4909      	ldr	r1, [pc, #36]	; (8009894 <UARTEx_SetNbDataToProcess+0x94>)
 800986e:	5c8a      	ldrb	r2, [r1, r2]
 8009870:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009874:	7b7a      	ldrb	r2, [r7, #13]
 8009876:	4908      	ldr	r1, [pc, #32]	; (8009898 <UARTEx_SetNbDataToProcess+0x98>)
 8009878:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800987a:	fb93 f3f2 	sdiv	r3, r3, r2
 800987e:	b29a      	uxth	r2, r3
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009886:	bf00      	nop
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	0800ff7c 	.word	0x0800ff7c
 8009898:	0800ff84 	.word	0x0800ff84

0800989c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80098a4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80098a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	43db      	mvns	r3, r3
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	4013      	ands	r3, r2
 80098bc:	b29a      	uxth	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3714      	adds	r7, #20
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr

080098d2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80098d2:	b084      	sub	sp, #16
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	f107 0014 	add.w	r0, r7, #20
 80098e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	370c      	adds	r7, #12
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	b004      	add	sp, #16
 8009912:	4770      	bx	lr

08009914 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b088      	sub	sp, #32
 8009918:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800991a:	2300      	movs	r3, #0
 800991c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800991e:	f107 0308 	add.w	r3, r7, #8
 8009922:	2218      	movs	r2, #24
 8009924:	2100      	movs	r1, #0
 8009926:	4618      	mov	r0, r3
 8009928:	f001 f8d8 	bl	800aadc <Osal_MemSet>
  rq.ogf = 0x3f;
 800992c:	233f      	movs	r3, #63	; 0x3f
 800992e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8009930:	2381      	movs	r3, #129	; 0x81
 8009932:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009934:	1dfb      	adds	r3, r7, #7
 8009936:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009938:	2301      	movs	r3, #1
 800993a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800993c:	f107 0308 	add.w	r3, r7, #8
 8009940:	2100      	movs	r1, #0
 8009942:	4618      	mov	r0, r3
 8009944:	f001 fb54 	bl	800aff0 <hci_send_req>
 8009948:	4603      	mov	r3, r0
 800994a:	2b00      	cmp	r3, #0
 800994c:	da01      	bge.n	8009952 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800994e:	23ff      	movs	r3, #255	; 0xff
 8009950:	e000      	b.n	8009954 <aci_gap_set_non_discoverable+0x40>
  return status;
 8009952:	79fb      	ldrb	r3, [r7, #7]
}
 8009954:	4618      	mov	r0, r3
 8009956:	3720      	adds	r7, #32
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800995c:	b5b0      	push	{r4, r5, r7, lr}
 800995e:	b0ce      	sub	sp, #312	; 0x138
 8009960:	af00      	add	r7, sp, #0
 8009962:	4605      	mov	r5, r0
 8009964:	460c      	mov	r4, r1
 8009966:	4610      	mov	r0, r2
 8009968:	4619      	mov	r1, r3
 800996a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800996e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009972:	462a      	mov	r2, r5
 8009974:	701a      	strb	r2, [r3, #0]
 8009976:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800997a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800997e:	4622      	mov	r2, r4
 8009980:	801a      	strh	r2, [r3, #0]
 8009982:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009986:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800998a:	4602      	mov	r2, r0
 800998c:	801a      	strh	r2, [r3, #0]
 800998e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009992:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009996:	460a      	mov	r2, r1
 8009998:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800999a:	f107 0310 	add.w	r3, r7, #16
 800999e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80099a2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80099a6:	3308      	adds	r3, #8
 80099a8:	f107 0210 	add.w	r2, r7, #16
 80099ac:	4413      	add	r3, r2
 80099ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80099b2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80099b6:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80099ba:	4413      	add	r3, r2
 80099bc:	3309      	adds	r3, #9
 80099be:	f107 0210 	add.w	r2, r7, #16
 80099c2:	4413      	add	r3, r2
 80099c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80099c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80099cc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80099d0:	2200      	movs	r2, #0
 80099d2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80099d4:	2300      	movs	r3, #0
 80099d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80099da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80099de:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80099e2:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80099e6:	7812      	ldrb	r2, [r2, #0]
 80099e8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80099ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80099ee:	3301      	adds	r3, #1
 80099f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80099f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80099f8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80099fc:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009a00:	8812      	ldrh	r2, [r2, #0]
 8009a02:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8009a06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a0a:	3302      	adds	r3, #2
 8009a0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8009a10:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009a14:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009a18:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8009a1c:	8812      	ldrh	r2, [r2, #0]
 8009a1e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8009a22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a26:	3302      	adds	r3, #2
 8009a28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8009a2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009a30:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009a34:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8009a38:	7812      	ldrb	r2, [r2, #0]
 8009a3a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009a3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a40:	3301      	adds	r3, #1
 8009a42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8009a46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009a4a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8009a4e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009a50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a54:	3301      	adds	r3, #1
 8009a56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8009a5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009a5e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009a62:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8009a64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a68:	3301      	adds	r3, #1
 8009a6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8009a6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009a72:	3308      	adds	r3, #8
 8009a74:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009a78:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f001 f81d 	bl	800aabc <Osal_MemCpy>
    index_input += Local_Name_Length;
 8009a82:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8009a86:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009a8a:	4413      	add	r3, r2
 8009a8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8009a90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009a94:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009a98:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009a9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8009aa4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009aae:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f001 f802 	bl	800aabc <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8009ab8:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8009abc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009ac0:	4413      	add	r3, r2
 8009ac2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8009ac6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aca:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8009ace:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009ad0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ad4:	3302      	adds	r3, #2
 8009ad6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8009ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ade:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8009ae2:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8009ae4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ae8:	3302      	adds	r3, #2
 8009aea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009aee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009af2:	2218      	movs	r2, #24
 8009af4:	2100      	movs	r1, #0
 8009af6:	4618      	mov	r0, r3
 8009af8:	f000 fff0 	bl	800aadc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009afc:	233f      	movs	r3, #63	; 0x3f
 8009afe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8009b02:	2383      	movs	r3, #131	; 0x83
 8009b04:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009b08:	f107 0310 	add.w	r3, r7, #16
 8009b0c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009b10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009b18:	f107 030f 	add.w	r3, r7, #15
 8009b1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009b20:	2301      	movs	r3, #1
 8009b22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009b26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f001 fa5f 	bl	800aff0 <hci_send_req>
 8009b32:	4603      	mov	r3, r0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	da01      	bge.n	8009b3c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8009b38:	23ff      	movs	r3, #255	; 0xff
 8009b3a:	e004      	b.n	8009b46 <aci_gap_set_discoverable+0x1ea>
  return status;
 8009b3c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009b40:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009b44:	781b      	ldrb	r3, [r3, #0]
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bdb0      	pop	{r4, r5, r7, pc}

08009b50 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b0cc      	sub	sp, #304	; 0x130
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	4602      	mov	r2, r0
 8009b58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b5c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009b60:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8009b62:	f107 0310 	add.w	r3, r7, #16
 8009b66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b6e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009b72:	2200      	movs	r2, #0
 8009b74:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009b76:	2300      	movs	r3, #0
 8009b78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8009b7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b80:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009b84:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009b88:	7812      	ldrb	r2, [r2, #0]
 8009b8a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009b8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b90:	3301      	adds	r3, #1
 8009b92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009b96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009b9a:	2218      	movs	r2, #24
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 ff9c 	bl	800aadc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009ba4:	233f      	movs	r3, #63	; 0x3f
 8009ba6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8009baa:	2385      	movs	r3, #133	; 0x85
 8009bac:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009bb0:	f107 0310 	add.w	r3, r7, #16
 8009bb4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009bb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009bbc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009bc0:	f107 030f 	add.w	r3, r7, #15
 8009bc4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009bce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f001 fa0b 	bl	800aff0 <hci_send_req>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	da01      	bge.n	8009be4 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8009be0:	23ff      	movs	r3, #255	; 0xff
 8009be2:	e004      	b.n	8009bee <aci_gap_set_io_capability+0x9e>
  return status;
 8009be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009be8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009bec:	781b      	ldrb	r3, [r3, #0]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8009bf8:	b5b0      	push	{r4, r5, r7, lr}
 8009bfa:	b0cc      	sub	sp, #304	; 0x130
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	4605      	mov	r5, r0
 8009c00:	460c      	mov	r4, r1
 8009c02:	4610      	mov	r0, r2
 8009c04:	4619      	mov	r1, r3
 8009c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c0a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009c0e:	462a      	mov	r2, r5
 8009c10:	701a      	strb	r2, [r3, #0]
 8009c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c16:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009c1a:	4622      	mov	r2, r4
 8009c1c:	701a      	strb	r2, [r3, #0]
 8009c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c22:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009c26:	4602      	mov	r2, r0
 8009c28:	701a      	strb	r2, [r3, #0]
 8009c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c32:	460a      	mov	r2, r1
 8009c34:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8009c36:	f107 0310 	add.w	r3, r7, #16
 8009c3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c42:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009c46:	2200      	movs	r2, #0
 8009c48:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8009c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c54:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009c58:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009c5c:	7812      	ldrb	r2, [r2, #0]
 8009c5e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009c60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c64:	3301      	adds	r3, #1
 8009c66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8009c6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009c72:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009c76:	7812      	ldrb	r2, [r2, #0]
 8009c78:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009c7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c7e:	3301      	adds	r3, #1
 8009c80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8009c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c88:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009c8c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009c90:	7812      	ldrb	r2, [r2, #0]
 8009c92:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009c94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c98:	3301      	adds	r3, #1
 8009c9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8009c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ca2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ca6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009caa:	7812      	ldrb	r2, [r2, #0]
 8009cac:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8009cae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8009cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cbc:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8009cc0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009cc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8009ccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cd0:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8009cd4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009cd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cda:	3301      	adds	r3, #1
 8009cdc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8009ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ce4:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8009ce8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009cea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cee:	3301      	adds	r3, #1
 8009cf0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8009cf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cf8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8009cfc:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8009d00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d04:	3304      	adds	r3, #4
 8009d06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8009d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d0e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009d12:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8009d14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d18:	3301      	adds	r3, #1
 8009d1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009d1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009d22:	2218      	movs	r2, #24
 8009d24:	2100      	movs	r1, #0
 8009d26:	4618      	mov	r0, r3
 8009d28:	f000 fed8 	bl	800aadc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009d2c:	233f      	movs	r3, #63	; 0x3f
 8009d2e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8009d32:	2386      	movs	r3, #134	; 0x86
 8009d34:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009d38:	f107 0310 	add.w	r3, r7, #16
 8009d3c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009d40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d44:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009d48:	f107 030f 	add.w	r3, r7, #15
 8009d4c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009d50:	2301      	movs	r3, #1
 8009d52:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009d56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f001 f947 	bl	800aff0 <hci_send_req>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	da01      	bge.n	8009d6c <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8009d68:	23ff      	movs	r3, #255	; 0xff
 8009d6a:	e004      	b.n	8009d76 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8009d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d70:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009d74:	781b      	ldrb	r3, [r3, #0]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bdb0      	pop	{r4, r5, r7, pc}

08009d80 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b0cc      	sub	sp, #304	; 0x130
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	4602      	mov	r2, r0
 8009d88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d90:	6019      	str	r1, [r3, #0]
 8009d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d96:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009d9a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8009d9c:	f107 0310 	add.w	r3, r7, #16
 8009da0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009da4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009da8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009dac:	2200      	movs	r2, #0
 8009dae:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009db0:	2300      	movs	r3, #0
 8009db2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009db6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009dbe:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009dc2:	8812      	ldrh	r2, [r2, #0]
 8009dc4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009dc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009dca:	3302      	adds	r3, #2
 8009dcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8009dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dd4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009dd8:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8009ddc:	6812      	ldr	r2, [r2, #0]
 8009dde:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8009de2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009de6:	3304      	adds	r3, #4
 8009de8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009dec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009df0:	2218      	movs	r2, #24
 8009df2:	2100      	movs	r1, #0
 8009df4:	4618      	mov	r0, r3
 8009df6:	f000 fe71 	bl	800aadc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009dfa:	233f      	movs	r3, #63	; 0x3f
 8009dfc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8009e00:	2388      	movs	r3, #136	; 0x88
 8009e02:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009e06:	f107 0310 	add.w	r3, r7, #16
 8009e0a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009e0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009e12:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009e16:	f107 030f 	add.w	r3, r7, #15
 8009e1a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009e24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009e28:	2100      	movs	r1, #0
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f001 f8e0 	bl	800aff0 <hci_send_req>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	da01      	bge.n	8009e3a <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8009e36:	23ff      	movs	r3, #255	; 0xff
 8009e38:	e004      	b.n	8009e44 <aci_gap_pass_key_resp+0xc4>
  return status;
 8009e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e3e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009e42:	781b      	ldrb	r3, [r3, #0]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8009e4e:	b590      	push	{r4, r7, lr}
 8009e50:	b0cd      	sub	sp, #308	; 0x134
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	4604      	mov	r4, r0
 8009e56:	4608      	mov	r0, r1
 8009e58:	4611      	mov	r1, r2
 8009e5a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009e5e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8009e62:	6013      	str	r3, [r2, #0]
 8009e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e68:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009e6c:	4622      	mov	r2, r4
 8009e6e:	701a      	strb	r2, [r3, #0]
 8009e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e74:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009e78:	4602      	mov	r2, r0
 8009e7a:	701a      	strb	r2, [r3, #0]
 8009e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e80:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009e84:	460a      	mov	r2, r1
 8009e86:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8009e88:	f107 0310 	add.w	r3, r7, #16
 8009e8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009e90:	f107 0308 	add.w	r3, r7, #8
 8009e94:	2207      	movs	r2, #7
 8009e96:	2100      	movs	r1, #0
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f000 fe1f 	bl	800aadc <Osal_MemSet>
  int index_input = 0;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8009ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ea8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009eac:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009eb0:	7812      	ldrb	r2, [r2, #0]
 8009eb2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009eb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009eb8:	3301      	adds	r3, #1
 8009eba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8009ebe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ec2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ec6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009eca:	7812      	ldrb	r2, [r2, #0]
 8009ecc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009ece:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8009ed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009edc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ee0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009ee4:	7812      	ldrb	r2, [r2, #0]
 8009ee6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009ee8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009eec:	3301      	adds	r3, #1
 8009eee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ef2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009ef6:	2218      	movs	r2, #24
 8009ef8:	2100      	movs	r1, #0
 8009efa:	4618      	mov	r0, r3
 8009efc:	f000 fdee 	bl	800aadc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009f00:	233f      	movs	r3, #63	; 0x3f
 8009f02:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8009f06:	238a      	movs	r3, #138	; 0x8a
 8009f08:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009f0c:	f107 0310 	add.w	r3, r7, #16
 8009f10:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009f14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f18:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8009f1c:	f107 0308 	add.w	r3, r7, #8
 8009f20:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8009f24:	2307      	movs	r3, #7
 8009f26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009f2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009f2e:	2100      	movs	r1, #0
 8009f30:	4618      	mov	r0, r3
 8009f32:	f001 f85d 	bl	800aff0 <hci_send_req>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	da01      	bge.n	8009f40 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8009f3c:	23ff      	movs	r3, #255	; 0xff
 8009f3e:	e02e      	b.n	8009f9e <aci_gap_init+0x150>
  if ( resp.Status )
 8009f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f44:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d005      	beq.n	8009f5a <aci_gap_init+0x10c>
    return resp.Status;
 8009f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f52:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	e021      	b.n	8009f9e <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8009f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f5e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009f62:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009f66:	b29a      	uxth	r2, r3
 8009f68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8009f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f78:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009f7c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009f80:	b29a      	uxth	r2, r3
 8009f82:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009f86:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8009f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f8c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009f90:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009f94:	b29a      	uxth	r2, r3
 8009f96:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009f9a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009f9c:	2300      	movs	r3, #0
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd90      	pop	{r4, r7, pc}

08009fa8 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b0cc      	sub	sp, #304	; 0x130
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	4602      	mov	r2, r0
 8009fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fb8:	6019      	str	r1, [r3, #0]
 8009fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fbe:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009fc2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8009fc4:	f107 0310 	add.w	r3, r7, #16
 8009fc8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fd0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8009fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fe2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009fe6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009fea:	7812      	ldrb	r2, [r2, #0]
 8009fec:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009fee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8009ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ffc:	1c58      	adds	r0, r3, #1
 8009ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a002:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a006:	781a      	ldrb	r2, [r3, #0]
 800a008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a00c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a010:	6819      	ldr	r1, [r3, #0]
 800a012:	f000 fd53 	bl	800aabc <Osal_MemCpy>
  index_input += AdvDataLen;
 800a016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a01a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a024:	4413      	add	r3, r2
 800a026:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a02a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a02e:	2218      	movs	r2, #24
 800a030:	2100      	movs	r1, #0
 800a032:	4618      	mov	r0, r3
 800a034:	f000 fd52 	bl	800aadc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a038:	233f      	movs	r3, #63	; 0x3f
 800a03a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800a03e:	238e      	movs	r3, #142	; 0x8e
 800a040:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a044:	f107 0310 	add.w	r3, r7, #16
 800a048:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a04c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a050:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a054:	f107 030f 	add.w	r3, r7, #15
 800a058:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a05c:	2301      	movs	r3, #1
 800a05e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a062:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a066:	2100      	movs	r1, #0
 800a068:	4618      	mov	r0, r3
 800a06a:	f000 ffc1 	bl	800aff0 <hci_send_req>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	da01      	bge.n	800a078 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800a074:	23ff      	movs	r3, #255	; 0xff
 800a076:	e004      	b.n	800a082 <aci_gap_update_adv_data+0xda>
  return status;
 800a078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a07c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a080:	781b      	ldrb	r3, [r3, #0]
}
 800a082:	4618      	mov	r0, r3
 800a084:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b088      	sub	sp, #32
 800a090:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a092:	2300      	movs	r3, #0
 800a094:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a096:	f107 0308 	add.w	r3, r7, #8
 800a09a:	2218      	movs	r2, #24
 800a09c:	2100      	movs	r1, #0
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f000 fd1c 	bl	800aadc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a0a4:	233f      	movs	r3, #63	; 0x3f
 800a0a6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800a0a8:	2392      	movs	r3, #146	; 0x92
 800a0aa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a0ac:	1dfb      	adds	r3, r7, #7
 800a0ae:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a0b4:	f107 0308 	add.w	r3, r7, #8
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f000 ff98 	bl	800aff0 <hci_send_req>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	da01      	bge.n	800a0ca <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a0c6:	23ff      	movs	r3, #255	; 0xff
 800a0c8:	e000      	b.n	800a0cc <aci_gap_configure_whitelist+0x40>
  return status;
 800a0ca:	79fb      	ldrb	r3, [r7, #7]
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3720      	adds	r7, #32
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b0cc      	sub	sp, #304	; 0x130
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	4602      	mov	r2, r0
 800a0dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0e0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a0e4:	801a      	strh	r2, [r3, #0]
 800a0e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0ea:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800a0ee:	460a      	mov	r2, r1
 800a0f0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800a0f2:	f107 0310 	add.w	r3, r7, #16
 800a0f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a0fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0fe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a102:	2200      	movs	r2, #0
 800a104:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a106:	2300      	movs	r3, #0
 800a108:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a10c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a110:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a114:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a118:	8812      	ldrh	r2, [r2, #0]
 800a11a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a11c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a120:	3302      	adds	r3, #2
 800a122:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800a126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a12a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a12e:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800a132:	7812      	ldrb	r2, [r2, #0]
 800a134:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a136:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a13a:	3301      	adds	r3, #1
 800a13c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a140:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a144:	2218      	movs	r2, #24
 800a146:	2100      	movs	r1, #0
 800a148:	4618      	mov	r0, r3
 800a14a:	f000 fcc7 	bl	800aadc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a14e:	233f      	movs	r3, #63	; 0x3f
 800a150:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800a154:	23a5      	movs	r3, #165	; 0xa5
 800a156:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a15a:	f107 0310 	add.w	r3, r7, #16
 800a15e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a162:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a166:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a16a:	f107 030f 	add.w	r3, r7, #15
 800a16e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a172:	2301      	movs	r3, #1
 800a174:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a178:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a17c:	2100      	movs	r1, #0
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 ff36 	bl	800aff0 <hci_send_req>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	da01      	bge.n	800a18e <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800a18a:	23ff      	movs	r3, #255	; 0xff
 800a18c:	e004      	b.n	800a198 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800a18e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a192:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a196:	781b      	ldrb	r3, [r3, #0]
}
 800a198:	4618      	mov	r0, r3
 800a19a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b088      	sub	sp, #32
 800a1a6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a1ac:	f107 0308 	add.w	r3, r7, #8
 800a1b0:	2218      	movs	r2, #24
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f000 fc91 	bl	800aadc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a1ba:	233f      	movs	r3, #63	; 0x3f
 800a1bc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800a1be:	f240 1301 	movw	r3, #257	; 0x101
 800a1c2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a1c4:	1dfb      	adds	r3, r7, #7
 800a1c6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a1cc:	f107 0308 	add.w	r3, r7, #8
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f000 ff0c 	bl	800aff0 <hci_send_req>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	da01      	bge.n	800a1e2 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800a1de:	23ff      	movs	r3, #255	; 0xff
 800a1e0:	e000      	b.n	800a1e4 <aci_gatt_init+0x42>
  return status;
 800a1e2:	79fb      	ldrb	r3, [r7, #7]
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3720      	adds	r7, #32
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800a1ec:	b590      	push	{r4, r7, lr}
 800a1ee:	b0cf      	sub	sp, #316	; 0x13c
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800a1f8:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800a1fc:	6001      	str	r1, [r0, #0]
 800a1fe:	4610      	mov	r0, r2
 800a200:	4619      	mov	r1, r3
 800a202:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a206:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800a20a:	4622      	mov	r2, r4
 800a20c:	701a      	strb	r2, [r3, #0]
 800a20e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a212:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800a216:	4602      	mov	r2, r0
 800a218:	701a      	strb	r2, [r3, #0]
 800a21a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a21e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800a222:	460a      	mov	r2, r1
 800a224:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800a226:	f107 0310 	add.w	r3, r7, #16
 800a22a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800a22e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a232:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d00a      	beq.n	800a252 <aci_gatt_add_service+0x66>
 800a23c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a240:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	2b02      	cmp	r3, #2
 800a248:	d101      	bne.n	800a24e <aci_gatt_add_service+0x62>
 800a24a:	2311      	movs	r3, #17
 800a24c:	e002      	b.n	800a254 <aci_gatt_add_service+0x68>
 800a24e:	2301      	movs	r3, #1
 800a250:	e000      	b.n	800a254 <aci_gatt_add_service+0x68>
 800a252:	2303      	movs	r3, #3
 800a254:	f107 0210 	add.w	r2, r7, #16
 800a258:	4413      	add	r3, r2
 800a25a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a25e:	f107 030c 	add.w	r3, r7, #12
 800a262:	2203      	movs	r2, #3
 800a264:	2100      	movs	r1, #0
 800a266:	4618      	mov	r0, r3
 800a268:	f000 fc38 	bl	800aadc <Osal_MemSet>
  int index_input = 0;
 800a26c:	2300      	movs	r3, #0
 800a26e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800a272:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a276:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a27a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800a27e:	7812      	ldrb	r2, [r2, #0]
 800a280:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a282:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a286:	3301      	adds	r3, #1
 800a288:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800a28c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a290:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	2b01      	cmp	r3, #1
 800a298:	d002      	beq.n	800a2a0 <aci_gatt_add_service+0xb4>
 800a29a:	2b02      	cmp	r3, #2
 800a29c:	d004      	beq.n	800a2a8 <aci_gatt_add_service+0xbc>
 800a29e:	e007      	b.n	800a2b0 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800a2a0:	2302      	movs	r3, #2
 800a2a2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800a2a6:	e005      	b.n	800a2b4 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800a2a8:	2310      	movs	r3, #16
 800a2aa:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800a2ae:	e001      	b.n	800a2b4 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800a2b0:	2397      	movs	r3, #151	; 0x97
 800a2b2:	e06c      	b.n	800a38e <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800a2b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a2b8:	1c58      	adds	r0, r3, #1
 800a2ba:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800a2be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a2c2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a2c6:	6819      	ldr	r1, [r3, #0]
 800a2c8:	f000 fbf8 	bl	800aabc <Osal_MemCpy>
    index_input += size;
 800a2cc:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800a2d0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a2d4:	4413      	add	r3, r2
 800a2d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800a2da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2de:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a2e2:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800a2e6:	7812      	ldrb	r2, [r2, #0]
 800a2e8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800a2ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800a2f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2f8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a2fc:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800a300:	7812      	ldrb	r2, [r2, #0]
 800a302:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800a304:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a308:	3301      	adds	r3, #1
 800a30a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a30e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a312:	2218      	movs	r2, #24
 800a314:	2100      	movs	r1, #0
 800a316:	4618      	mov	r0, r3
 800a318:	f000 fbe0 	bl	800aadc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a31c:	233f      	movs	r3, #63	; 0x3f
 800a31e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800a322:	f44f 7381 	mov.w	r3, #258	; 0x102
 800a326:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a32a:	f107 0310 	add.w	r3, r7, #16
 800a32e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a332:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a336:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800a33a:	f107 030c 	add.w	r3, r7, #12
 800a33e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800a342:	2303      	movs	r3, #3
 800a344:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a348:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a34c:	2100      	movs	r1, #0
 800a34e:	4618      	mov	r0, r3
 800a350:	f000 fe4e 	bl	800aff0 <hci_send_req>
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	da01      	bge.n	800a35e <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800a35a:	23ff      	movs	r3, #255	; 0xff
 800a35c:	e017      	b.n	800a38e <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800a35e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a362:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d005      	beq.n	800a378 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800a36c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a370:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a374:	781b      	ldrb	r3, [r3, #0]
 800a376:	e00a      	b.n	800a38e <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800a378:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a37c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a380:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a384:	b29a      	uxth	r2, r3
 800a386:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a38a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800a394:	46bd      	mov	sp, r7
 800a396:	bd90      	pop	{r4, r7, pc}

0800a398 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800a398:	b590      	push	{r4, r7, lr}
 800a39a:	b0d1      	sub	sp, #324	; 0x144
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	4604      	mov	r4, r0
 800a3a0:	4608      	mov	r0, r1
 800a3a2:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800a3a6:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800a3aa:	600a      	str	r2, [r1, #0]
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a3b2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800a3b6:	4622      	mov	r2, r4
 800a3b8:	801a      	strh	r2, [r3, #0]
 800a3ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a3be:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	701a      	strb	r2, [r3, #0]
 800a3c6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a3ca:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800a3ce:	460a      	mov	r2, r1
 800a3d0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800a3d2:	f107 0318 	add.w	r3, r7, #24
 800a3d6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800a3da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a3de:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d00a      	beq.n	800a3fe <aci_gatt_add_char+0x66>
 800a3e8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a3ec:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	2b02      	cmp	r3, #2
 800a3f4:	d101      	bne.n	800a3fa <aci_gatt_add_char+0x62>
 800a3f6:	2313      	movs	r3, #19
 800a3f8:	e002      	b.n	800a400 <aci_gatt_add_char+0x68>
 800a3fa:	2303      	movs	r3, #3
 800a3fc:	e000      	b.n	800a400 <aci_gatt_add_char+0x68>
 800a3fe:	2305      	movs	r3, #5
 800a400:	f107 0218 	add.w	r2, r7, #24
 800a404:	4413      	add	r3, r2
 800a406:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a40a:	f107 0314 	add.w	r3, r7, #20
 800a40e:	2203      	movs	r2, #3
 800a410:	2100      	movs	r1, #0
 800a412:	4618      	mov	r0, r3
 800a414:	f000 fb62 	bl	800aadc <Osal_MemSet>
  int index_input = 0;
 800a418:	2300      	movs	r3, #0
 800a41a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800a41e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a422:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a426:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800a42a:	8812      	ldrh	r2, [r2, #0]
 800a42c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a42e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a432:	3302      	adds	r3, #2
 800a434:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800a438:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a43c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a440:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800a444:	7812      	ldrb	r2, [r2, #0]
 800a446:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a448:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a44c:	3301      	adds	r3, #1
 800a44e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800a452:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a456:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d002      	beq.n	800a466 <aci_gatt_add_char+0xce>
 800a460:	2b02      	cmp	r3, #2
 800a462:	d004      	beq.n	800a46e <aci_gatt_add_char+0xd6>
 800a464:	e007      	b.n	800a476 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800a466:	2302      	movs	r3, #2
 800a468:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800a46c:	e005      	b.n	800a47a <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800a46e:	2310      	movs	r3, #16
 800a470:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800a474:	e001      	b.n	800a47a <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800a476:	2397      	movs	r3, #151	; 0x97
 800a478:	e091      	b.n	800a59e <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800a47a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a47e:	1cd8      	adds	r0, r3, #3
 800a480:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800a484:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a488:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a48c:	6819      	ldr	r1, [r3, #0]
 800a48e:	f000 fb15 	bl	800aabc <Osal_MemCpy>
    index_input += size;
 800a492:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800a496:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800a49a:	4413      	add	r3, r2
 800a49c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800a4a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a4a4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a4a8:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800a4ac:	8812      	ldrh	r2, [r2, #0]
 800a4ae:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800a4b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a4b4:	3302      	adds	r3, #2
 800a4b6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800a4ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a4be:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800a4c2:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800a4c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800a4ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a4d2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800a4d6:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800a4d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a4dc:	3301      	adds	r3, #1
 800a4de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800a4e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a4e6:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800a4ea:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800a4ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800a4f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a4fa:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800a4fe:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800a500:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a504:	3301      	adds	r3, #1
 800a506:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800a50a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a50e:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800a512:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800a514:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a518:	3301      	adds	r3, #1
 800a51a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a51e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a522:	2218      	movs	r2, #24
 800a524:	2100      	movs	r1, #0
 800a526:	4618      	mov	r0, r3
 800a528:	f000 fad8 	bl	800aadc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a52c:	233f      	movs	r3, #63	; 0x3f
 800a52e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800a532:	f44f 7382 	mov.w	r3, #260	; 0x104
 800a536:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800a53a:	f107 0318 	add.w	r3, r7, #24
 800a53e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800a542:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a546:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800a54a:	f107 0314 	add.w	r3, r7, #20
 800a54e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800a552:	2303      	movs	r3, #3
 800a554:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a558:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a55c:	2100      	movs	r1, #0
 800a55e:	4618      	mov	r0, r3
 800a560:	f000 fd46 	bl	800aff0 <hci_send_req>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	da01      	bge.n	800a56e <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800a56a:	23ff      	movs	r3, #255	; 0xff
 800a56c:	e017      	b.n	800a59e <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800a56e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a572:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d005      	beq.n	800a588 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800a57c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a580:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	e00a      	b.n	800a59e <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800a588:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a58c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a590:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a594:	b29a      	uxth	r2, r3
 800a596:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800a59a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a59c:	2300      	movs	r3, #0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd90      	pop	{r4, r7, pc}

0800a5a8 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800a5a8:	b5b0      	push	{r4, r5, r7, lr}
 800a5aa:	b0cc      	sub	sp, #304	; 0x130
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	4605      	mov	r5, r0
 800a5b0:	460c      	mov	r4, r1
 800a5b2:	4610      	mov	r0, r2
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5ba:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a5be:	462a      	mov	r2, r5
 800a5c0:	801a      	strh	r2, [r3, #0]
 800a5c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a5ca:	4622      	mov	r2, r4
 800a5cc:	801a      	strh	r2, [r3, #0]
 800a5ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5d2:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	701a      	strb	r2, [r3, #0]
 800a5da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5de:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800a5e2:	460a      	mov	r2, r1
 800a5e4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800a5e6:	f107 0310 	add.w	r3, r7, #16
 800a5ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a5ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5f2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800a600:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a604:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a608:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a60c:	8812      	ldrh	r2, [r2, #0]
 800a60e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a610:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a614:	3302      	adds	r3, #2
 800a616:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800a61a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a61e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a622:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a626:	8812      	ldrh	r2, [r2, #0]
 800a628:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a62a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a62e:	3302      	adds	r3, #2
 800a630:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800a634:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a638:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a63c:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800a640:	7812      	ldrb	r2, [r2, #0]
 800a642:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a644:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a648:	3301      	adds	r3, #1
 800a64a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800a64e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a652:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a656:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800a65a:	7812      	ldrb	r2, [r2, #0]
 800a65c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a65e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a662:	3301      	adds	r3, #1
 800a664:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800a668:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a66c:	1d98      	adds	r0, r3, #6
 800a66e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a672:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800a676:	781b      	ldrb	r3, [r3, #0]
 800a678:	461a      	mov	r2, r3
 800a67a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800a67e:	f000 fa1d 	bl	800aabc <Osal_MemCpy>
  index_input += Char_Value_Length;
 800a682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a686:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a690:	4413      	add	r3, r2
 800a692:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a696:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a69a:	2218      	movs	r2, #24
 800a69c:	2100      	movs	r1, #0
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f000 fa1c 	bl	800aadc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a6a4:	233f      	movs	r3, #63	; 0x3f
 800a6a6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800a6aa:	f44f 7383 	mov.w	r3, #262	; 0x106
 800a6ae:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a6b2:	f107 0310 	add.w	r3, r7, #16
 800a6b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a6ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a6be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a6c2:	f107 030f 	add.w	r3, r7, #15
 800a6c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a6d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f000 fc8a 	bl	800aff0 <hci_send_req>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	da01      	bge.n	800a6e6 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800a6e2:	23ff      	movs	r3, #255	; 0xff
 800a6e4:	e004      	b.n	800a6f0 <aci_gatt_update_char_value+0x148>
  return status;
 800a6e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6ea:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a6ee:	781b      	ldrb	r3, [r3, #0]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bdb0      	pop	{r4, r5, r7, pc}

0800a6fa <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b0cc      	sub	sp, #304	; 0x130
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a704:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a708:	601a      	str	r2, [r3, #0]
 800a70a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a70e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a712:	4602      	mov	r2, r0
 800a714:	701a      	strb	r2, [r3, #0]
 800a716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a71a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a71e:	460a      	mov	r2, r1
 800a720:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800a722:	f107 0310 	add.w	r3, r7, #16
 800a726:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a72a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a72e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a732:	2200      	movs	r2, #0
 800a734:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a736:	2300      	movs	r3, #0
 800a738:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800a73c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a740:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a744:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a748:	7812      	ldrb	r2, [r2, #0]
 800a74a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a74c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a750:	3301      	adds	r3, #1
 800a752:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800a756:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a75a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a75e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a762:	7812      	ldrb	r2, [r2, #0]
 800a764:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a766:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a76a:	3301      	adds	r3, #1
 800a76c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800a770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a774:	1c98      	adds	r0, r3, #2
 800a776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a77a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a77e:	781a      	ldrb	r2, [r3, #0]
 800a780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a784:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a788:	6819      	ldr	r1, [r3, #0]
 800a78a:	f000 f997 	bl	800aabc <Osal_MemCpy>
  index_input += Length;
 800a78e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a792:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a79c:	4413      	add	r3, r2
 800a79e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a7a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a7a6:	2218      	movs	r2, #24
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f000 f996 	bl	800aadc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a7b0:	233f      	movs	r3, #63	; 0x3f
 800a7b2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800a7b6:	230c      	movs	r3, #12
 800a7b8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a7bc:	f107 0310 	add.w	r3, r7, #16
 800a7c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a7c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a7c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a7cc:	f107 030f 	add.w	r3, r7, #15
 800a7d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a7da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a7de:	2100      	movs	r1, #0
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f000 fc05 	bl	800aff0 <hci_send_req>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	da01      	bge.n	800a7f0 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800a7ec:	23ff      	movs	r3, #255	; 0xff
 800a7ee:	e004      	b.n	800a7fa <aci_hal_write_config_data+0x100>
  return status;
 800a7f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7f4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a7f8:	781b      	ldrb	r3, [r3, #0]
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b0cc      	sub	sp, #304	; 0x130
 800a808:	af00      	add	r7, sp, #0
 800a80a:	4602      	mov	r2, r0
 800a80c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a810:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a814:	701a      	strb	r2, [r3, #0]
 800a816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a81a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a81e:	460a      	mov	r2, r1
 800a820:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800a822:	f107 0310 	add.w	r3, r7, #16
 800a826:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a82a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a82e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a832:	2200      	movs	r2, #0
 800a834:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a836:	2300      	movs	r3, #0
 800a838:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800a83c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a840:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a844:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a848:	7812      	ldrb	r2, [r2, #0]
 800a84a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a84c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a850:	3301      	adds	r3, #1
 800a852:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800a856:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a85a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a85e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a862:	7812      	ldrb	r2, [r2, #0]
 800a864:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a866:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a86a:	3301      	adds	r3, #1
 800a86c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a870:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a874:	2218      	movs	r2, #24
 800a876:	2100      	movs	r1, #0
 800a878:	4618      	mov	r0, r3
 800a87a:	f000 f92f 	bl	800aadc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a87e:	233f      	movs	r3, #63	; 0x3f
 800a880:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800a884:	230f      	movs	r3, #15
 800a886:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a88a:	f107 0310 	add.w	r3, r7, #16
 800a88e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a892:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a896:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a89a:	f107 030f 	add.w	r3, r7, #15
 800a89e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a8a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f000 fb9e 	bl	800aff0 <hci_send_req>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	da01      	bge.n	800a8be <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800a8ba:	23ff      	movs	r3, #255	; 0xff
 800a8bc:	e004      	b.n	800a8c8 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800a8be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8c2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a8c6:	781b      	ldrb	r3, [r3, #0]
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b0cc      	sub	sp, #304	; 0x130
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	4602      	mov	r2, r0
 800a8da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8de:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a8e2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800a8e4:	f107 0310 	add.w	r3, r7, #16
 800a8e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a8ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8f0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800a8fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a902:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a906:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a90a:	8812      	ldrh	r2, [r2, #0]
 800a90c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a90e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a912:	3302      	adds	r3, #2
 800a914:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a918:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a91c:	2218      	movs	r2, #24
 800a91e:	2100      	movs	r1, #0
 800a920:	4618      	mov	r0, r3
 800a922:	f000 f8db 	bl	800aadc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a926:	233f      	movs	r3, #63	; 0x3f
 800a928:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800a92c:	2318      	movs	r3, #24
 800a92e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a932:	f107 0310 	add.w	r3, r7, #16
 800a936:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a93a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a93e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a942:	f107 030f 	add.w	r3, r7, #15
 800a946:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a94a:	2301      	movs	r3, #1
 800a94c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a950:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a954:	2100      	movs	r1, #0
 800a956:	4618      	mov	r0, r3
 800a958:	f000 fb4a 	bl	800aff0 <hci_send_req>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	da01      	bge.n	800a966 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800a962:	23ff      	movs	r3, #255	; 0xff
 800a964:	e004      	b.n	800a970 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800a966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a96a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a96e:	781b      	ldrb	r3, [r3, #0]
}
 800a970:	4618      	mov	r0, r3
 800a972:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b088      	sub	sp, #32
 800a97e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a980:	2300      	movs	r3, #0
 800a982:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a984:	f107 0308 	add.w	r3, r7, #8
 800a988:	2218      	movs	r2, #24
 800a98a:	2100      	movs	r1, #0
 800a98c:	4618      	mov	r0, r3
 800a98e:	f000 f8a5 	bl	800aadc <Osal_MemSet>
  rq.ogf = 0x03;
 800a992:	2303      	movs	r3, #3
 800a994:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800a996:	2303      	movs	r3, #3
 800a998:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a99a:	1dfb      	adds	r3, r7, #7
 800a99c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a9a2:	f107 0308 	add.w	r3, r7, #8
 800a9a6:	2100      	movs	r1, #0
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f000 fb21 	bl	800aff0 <hci_send_req>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	da01      	bge.n	800a9b8 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a9b4:	23ff      	movs	r3, #255	; 0xff
 800a9b6:	e000      	b.n	800a9ba <hci_reset+0x40>
  return status;
 800a9b8:	79fb      	ldrb	r3, [r7, #7]
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3720      	adds	r7, #32
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800a9c2:	b590      	push	{r4, r7, lr}
 800a9c4:	b0cd      	sub	sp, #308	; 0x134
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	4604      	mov	r4, r0
 800a9ca:	4608      	mov	r0, r1
 800a9cc:	4611      	mov	r1, r2
 800a9ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9d2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a9d6:	4622      	mov	r2, r4
 800a9d8:	701a      	strb	r2, [r3, #0]
 800a9da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9de:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	701a      	strb	r2, [r3, #0]
 800a9e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9ea:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800a9ee:	460a      	mov	r2, r1
 800a9f0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800a9f2:	f107 0310 	add.w	r3, r7, #16
 800a9f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a9fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9fe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800aa02:	2200      	movs	r2, #0
 800aa04:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800aa06:	2300      	movs	r3, #0
 800aa08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800aa0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa10:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800aa14:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800aa18:	7812      	ldrb	r2, [r2, #0]
 800aa1a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800aa1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa20:	3301      	adds	r3, #1
 800aa22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800aa26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa2a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800aa2e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800aa32:	7812      	ldrb	r2, [r2, #0]
 800aa34:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800aa36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800aa40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa44:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800aa48:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800aa4c:	7812      	ldrb	r2, [r2, #0]
 800aa4e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800aa50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa54:	3301      	adds	r3, #1
 800aa56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800aa5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aa5e:	2218      	movs	r2, #24
 800aa60:	2100      	movs	r1, #0
 800aa62:	4618      	mov	r0, r3
 800aa64:	f000 f83a 	bl	800aadc <Osal_MemSet>
  rq.ogf = 0x08;
 800aa68:	2308      	movs	r3, #8
 800aa6a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800aa6e:	2331      	movs	r3, #49	; 0x31
 800aa70:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800aa74:	f107 0310 	add.w	r3, r7, #16
 800aa78:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800aa7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa80:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800aa84:	f107 030f 	add.w	r3, r7, #15
 800aa88:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800aa92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aa96:	2100      	movs	r1, #0
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f000 faa9 	bl	800aff0 <hci_send_req>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	da01      	bge.n	800aaa8 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800aaa4:	23ff      	movs	r3, #255	; 0xff
 800aaa6:	e004      	b.n	800aab2 <hci_le_set_default_phy+0xf0>
  return status;
 800aaa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aaac:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800aab0:	781b      	ldrb	r3, [r3, #0]
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd90      	pop	{r4, r7, pc}

0800aabc <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	68b9      	ldr	r1, [r7, #8]
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f003 f86b 	bl	800dba8 <memcpy>
 800aad2:	4603      	mov	r3, r0
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3710      	adds	r7, #16
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	68b9      	ldr	r1, [r7, #8]
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f003 f869 	bl	800dbc4 <memset>
 800aaf2:	4603      	mov	r3, r0
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3710      	adds	r7, #16
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800aafc:	b480      	push	{r7}
 800aafe:	af00      	add	r7, sp, #0
  return;
 800ab00:	bf00      	nop
}
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr

0800ab0a <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800ab0a:	b480      	push	{r7}
 800ab0c:	af00      	add	r7, sp, #0
  return;
 800ab0e:	bf00      	nop
}
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800ab18:	b480      	push	{r7}
 800ab1a:	af00      	add	r7, sp, #0
  return;
 800ab1c:	bf00      	nop
}
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr

0800ab26 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800ab26:	b480      	push	{r7}
 800ab28:	af00      	add	r7, sp, #0
  return;
 800ab2a:	bf00      	nop
}
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800ab34:	b480      	push	{r7}
 800ab36:	af00      	add	r7, sp, #0
  return;
 800ab38:	bf00      	nop
}
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr

0800ab42 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800ab42:	b480      	push	{r7}
 800ab44:	af00      	add	r7, sp, #0
  return;
 800ab46:	bf00      	nop
}
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800ab50:	b480      	push	{r7}
 800ab52:	af00      	add	r7, sp, #0
  return;
 800ab54:	bf00      	nop
}
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr

0800ab5e <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800ab5e:	b480      	push	{r7}
 800ab60:	af00      	add	r7, sp, #0
  return;
 800ab62:	bf00      	nop
}
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	af00      	add	r7, sp, #0
  return;
 800ab70:	bf00      	nop
}
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr

0800ab7a <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800ab7a:	b480      	push	{r7}
 800ab7c:	af00      	add	r7, sp, #0
  return;
 800ab7e:	bf00      	nop
}
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800ab88:	b480      	push	{r7}
 800ab8a:	af00      	add	r7, sp, #0
  return;
 800ab8c:	bf00      	nop
}
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr

0800ab96 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800ab96:	b480      	push	{r7}
 800ab98:	af00      	add	r7, sp, #0
  return;
 800ab9a:	bf00      	nop
}
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800aba4:	b480      	push	{r7}
 800aba6:	af00      	add	r7, sp, #0
  return;
 800aba8:	bf00      	nop
}
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr

0800abb2 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800abb2:	b480      	push	{r7}
 800abb4:	af00      	add	r7, sp, #0
  return;
 800abb6:	bf00      	nop
}
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr

0800abc0 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800abc0:	b480      	push	{r7}
 800abc2:	af00      	add	r7, sp, #0
  return;
 800abc4:	bf00      	nop
}
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr

0800abce <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800abce:	b480      	push	{r7}
 800abd0:	af00      	add	r7, sp, #0
  return;
 800abd2:	bf00      	nop
}
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800abdc:	b480      	push	{r7}
 800abde:	af00      	add	r7, sp, #0
  return;
 800abe0:	bf00      	nop
}
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr
	...

0800abec <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800abec:	b580      	push	{r7, lr}
 800abee:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800abf0:	4b04      	ldr	r3, [pc, #16]	; (800ac04 <SVCCTL_Init+0x18>)
 800abf2:	2200      	movs	r2, #0
 800abf4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800abf6:	4b04      	ldr	r3, [pc, #16]	; (800ac08 <SVCCTL_Init+0x1c>)
 800abf8:	2200      	movs	r2, #0
 800abfa:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800abfc:	f000 f806 	bl	800ac0c <SVCCTL_SvcInit>

  return;
 800ac00:	bf00      	nop
}
 800ac02:	bd80      	pop	{r7, pc}
 800ac04:	20000918 	.word	0x20000918
 800ac08:	20000938 	.word	0x20000938

0800ac0c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	af00      	add	r7, sp, #0
  BAS_Init();
 800ac10:	f7ff ff74 	bl	800aafc <BAS_Init>

  BLS_Init();
 800ac14:	f7ff ff79 	bl	800ab0a <BLS_Init>

  CRS_STM_Init();
 800ac18:	f7ff ff7e 	bl	800ab18 <CRS_STM_Init>

  DIS_Init();
 800ac1c:	f7ff ff83 	bl	800ab26 <DIS_Init>

  EDS_STM_Init();
 800ac20:	f7ff ff88 	bl	800ab34 <EDS_STM_Init>

  HIDS_Init();
 800ac24:	f7ff ff8d 	bl	800ab42 <HIDS_Init>

  HRS_Init();
 800ac28:	f7ff ff92 	bl	800ab50 <HRS_Init>

  HTS_Init();
 800ac2c:	f7ff ff97 	bl	800ab5e <HTS_Init>

  IAS_Init();
 800ac30:	f7ff ff9c 	bl	800ab6c <IAS_Init>

  LLS_Init();
 800ac34:	f7ff ffa1 	bl	800ab7a <LLS_Init>

  TPS_Init();
 800ac38:	f7ff ffa6 	bl	800ab88 <TPS_Init>

  MOTENV_STM_Init();
 800ac3c:	f7ff ffab 	bl	800ab96 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800ac40:	f7ff ffb0 	bl	800aba4 <P2PS_STM_Init>

  ZDD_STM_Init();
 800ac44:	f7ff ffb5 	bl	800abb2 <ZDD_STM_Init>

  OTAS_STM_Init();
 800ac48:	f7ff ffba 	bl	800abc0 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800ac4c:	f7ff ffc6 	bl	800abdc <BVOPUS_STM_Init>

  MESH_Init();
 800ac50:	f7ff ffbd 	bl	800abce <MESH_Init>

  SVCCTL_InitCustomSvc();
 800ac54:	f002 f9e6 	bl	800d024 <SVCCTL_InitCustomSvc>
  
  return;
 800ac58:	bf00      	nop
}
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b083      	sub	sp, #12
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800ac64:	4b09      	ldr	r3, [pc, #36]	; (800ac8c <SVCCTL_RegisterSvcHandler+0x30>)
 800ac66:	7f1b      	ldrb	r3, [r3, #28]
 800ac68:	4619      	mov	r1, r3
 800ac6a:	4a08      	ldr	r2, [pc, #32]	; (800ac8c <SVCCTL_RegisterSvcHandler+0x30>)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800ac72:	4b06      	ldr	r3, [pc, #24]	; (800ac8c <SVCCTL_RegisterSvcHandler+0x30>)
 800ac74:	7f1b      	ldrb	r3, [r3, #28]
 800ac76:	3301      	adds	r3, #1
 800ac78:	b2da      	uxtb	r2, r3
 800ac7a:	4b04      	ldr	r3, [pc, #16]	; (800ac8c <SVCCTL_RegisterSvcHandler+0x30>)
 800ac7c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800ac7e:	bf00      	nop
}
 800ac80:	370c      	adds	r7, #12
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr
 800ac8a:	bf00      	nop
 800ac8c:	20000918 	.word	0x20000918

0800ac90 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b086      	sub	sp, #24
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	2bff      	cmp	r3, #255	; 0xff
 800aca8:	d125      	bne.n	800acf6 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	3302      	adds	r3, #2
 800acae:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	881b      	ldrh	r3, [r3, #0]
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800acba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800acbe:	d118      	bne.n	800acf2 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800acc0:	2300      	movs	r3, #0
 800acc2:	757b      	strb	r3, [r7, #21]
 800acc4:	e00d      	b.n	800ace2 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800acc6:	7d7b      	ldrb	r3, [r7, #21]
 800acc8:	4a1a      	ldr	r2, [pc, #104]	; (800ad34 <SVCCTL_UserEvtRx+0xa4>)
 800acca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	4798      	blx	r3
 800acd2:	4603      	mov	r3, r0
 800acd4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800acd6:	7dfb      	ldrb	r3, [r7, #23]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d108      	bne.n	800acee <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800acdc:	7d7b      	ldrb	r3, [r7, #21]
 800acde:	3301      	adds	r3, #1
 800ace0:	757b      	strb	r3, [r7, #21]
 800ace2:	4b14      	ldr	r3, [pc, #80]	; (800ad34 <SVCCTL_UserEvtRx+0xa4>)
 800ace4:	7f1b      	ldrb	r3, [r3, #28]
 800ace6:	7d7a      	ldrb	r2, [r7, #21]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d3ec      	bcc.n	800acc6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800acec:	e002      	b.n	800acf4 <SVCCTL_UserEvtRx+0x64>
              break;
 800acee:	bf00      	nop
          break;
 800acf0:	e000      	b.n	800acf4 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800acf2:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800acf4:	e000      	b.n	800acf8 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800acf6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800acf8:	7dfb      	ldrb	r3, [r7, #23]
 800acfa:	2b02      	cmp	r3, #2
 800acfc:	d00f      	beq.n	800ad1e <SVCCTL_UserEvtRx+0x8e>
 800acfe:	2b02      	cmp	r3, #2
 800ad00:	dc10      	bgt.n	800ad24 <SVCCTL_UserEvtRx+0x94>
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d002      	beq.n	800ad0c <SVCCTL_UserEvtRx+0x7c>
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	d006      	beq.n	800ad18 <SVCCTL_UserEvtRx+0x88>
 800ad0a:	e00b      	b.n	800ad24 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f001 fc53 	bl	800c5b8 <SVCCTL_App_Notification>
 800ad12:	4603      	mov	r3, r0
 800ad14:	75bb      	strb	r3, [r7, #22]
      break;
 800ad16:	e008      	b.n	800ad2a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	75bb      	strb	r3, [r7, #22]
      break;
 800ad1c:	e005      	b.n	800ad2a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	75bb      	strb	r3, [r7, #22]
      break;
 800ad22:	e002      	b.n	800ad2a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800ad24:	2301      	movs	r3, #1
 800ad26:	75bb      	strb	r3, [r7, #22]
      break;
 800ad28:	bf00      	nop
  }

  return (return_status);
 800ad2a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3718      	adds	r7, #24
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	20000918 	.word	0x20000918

0800ad38 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b088      	sub	sp, #32
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ad40:	f107 030c 	add.w	r3, r7, #12
 800ad44:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	212d      	movs	r1, #45	; 0x2d
 800ad50:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800ad54:	f000 fae2 	bl	800b31c <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ad58:	69fb      	ldr	r3, [r7, #28]
 800ad5a:	330b      	adds	r3, #11
 800ad5c:	78db      	ldrb	r3, [r3, #3]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3720      	adds	r7, #32
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b088      	sub	sp, #32
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ad6e:	f107 030c 	add.w	r3, r7, #12
 800ad72:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	210f      	movs	r1, #15
 800ad7e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800ad82:	f000 facb 	bl	800b31c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ad86:	69fb      	ldr	r3, [r7, #28]
 800ad88:	330b      	adds	r3, #11
 800ad8a:	78db      	ldrb	r3, [r3, #3]
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3720      	adds	r7, #32
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b088      	sub	sp, #32
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ad9c:	f107 030c 	add.w	r3, r7, #12
 800ada0:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	2110      	movs	r1, #16
 800ada8:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800adac:	f000 fab6 	bl	800b31c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800adb0:	69fb      	ldr	r3, [r7, #28]
 800adb2:	330b      	adds	r3, #11
 800adb4:	78db      	ldrb	r3, [r3, #3]
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3720      	adds	r7, #32
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
	...

0800adc0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800adc0:	b480      	push	{r7}
 800adc2:	b08b      	sub	sp, #44	; 0x2c
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800adc8:	2300      	movs	r3, #0
 800adca:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800adcc:	2300      	movs	r3, #0
 800adce:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800add0:	2300      	movs	r3, #0
 800add2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800add4:	2300      	movs	r3, #0
 800add6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800add8:	2300      	movs	r3, #0
 800adda:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800addc:	2300      	movs	r3, #0
 800adde:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800ade0:	2300      	movs	r3, #0
 800ade2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800ade4:	2300      	movs	r3, #0
 800ade6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800ade8:	4b4a      	ldr	r3, [pc, #296]	; (800af14 <SHCI_GetWirelessFwInfo+0x154>)
 800adea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800adf0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800adfa:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a44      	ldr	r2, [pc, #272]	; (800af18 <SHCI_GetWirelessFwInfo+0x158>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d10f      	bne.n	800ae2c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	695b      	ldr	r3, [r3, #20]
 800ae10:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	699b      	ldr	r3, [r3, #24]
 800ae16:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	69db      	ldr	r3, [r3, #28]
 800ae1c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	691b      	ldr	r3, [r3, #16]
 800ae28:	617b      	str	r3, [r7, #20]
 800ae2a:	e01a      	b.n	800ae62 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ae34:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800ae38:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	691b      	ldr	r3, [r3, #16]
 800ae40:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	695b      	ldr	r3, [r3, #20]
 800ae48:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	699b      	ldr	r3, [r3, #24]
 800ae50:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800ae62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae64:	0e1b      	lsrs	r3, r3, #24
 800ae66:	b2da      	uxtb	r2, r3
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800ae6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6e:	0c1b      	lsrs	r3, r3, #16
 800ae70:	b2da      	uxtb	r2, r3
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800ae76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae78:	0a1b      	lsrs	r3, r3, #8
 800ae7a:	b2da      	uxtb	r2, r3
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800ae80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae82:	091b      	lsrs	r3, r3, #4
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	f003 030f 	and.w	r3, r3, #15
 800ae8a:	b2da      	uxtb	r2, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800ae90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	f003 030f 	and.w	r3, r3, #15
 800ae98:	b2da      	uxtb	r2, r3
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800ae9e:	6a3b      	ldr	r3, [r7, #32]
 800aea0:	0e1b      	lsrs	r3, r3, #24
 800aea2:	b2da      	uxtb	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800aea8:	6a3b      	ldr	r3, [r7, #32]
 800aeaa:	0c1b      	lsrs	r3, r3, #16
 800aeac:	b2da      	uxtb	r2, r3
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800aeb2:	6a3b      	ldr	r3, [r7, #32]
 800aeb4:	0a1b      	lsrs	r3, r3, #8
 800aeb6:	b2da      	uxtb	r2, r3
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800aebc:	6a3b      	ldr	r3, [r7, #32]
 800aebe:	b2da      	uxtb	r2, r3
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800aec4:	69fb      	ldr	r3, [r7, #28]
 800aec6:	b2da      	uxtb	r2, r3
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	0e1b      	lsrs	r3, r3, #24
 800aed0:	b2da      	uxtb	r2, r3
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800aed6:	69bb      	ldr	r3, [r7, #24]
 800aed8:	0c1b      	lsrs	r3, r3, #16
 800aeda:	b2da      	uxtb	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	0a1b      	lsrs	r3, r3, #8
 800aee4:	b2da      	uxtb	r2, r3
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	0e1b      	lsrs	r3, r3, #24
 800aeee:	b2da      	uxtb	r2, r3
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	0c1b      	lsrs	r3, r3, #16
 800aef8:	b2da      	uxtb	r2, r3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	b2da      	uxtb	r2, r3
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800af06:	2300      	movs	r3, #0
}
 800af08:	4618      	mov	r0, r3
 800af0a:	372c      	adds	r7, #44	; 0x2c
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr
 800af14:	58004000 	.word	0x58004000
 800af18:	a94656b9 	.word	0xa94656b9

0800af1c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	4a08      	ldr	r2, [pc, #32]	; (800af4c <hci_init+0x30>)
 800af2c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800af2e:	4a08      	ldr	r2, [pc, #32]	; (800af50 <hci_init+0x34>)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800af34:	4806      	ldr	r0, [pc, #24]	; (800af50 <hci_init+0x34>)
 800af36:	f000 f973 	bl	800b220 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4618      	mov	r0, r3
 800af40:	f000 f8d4 	bl	800b0ec <TlInit>

  return;
 800af44:	bf00      	nop
}
 800af46:	3708      	adds	r7, #8
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	200017bc 	.word	0x200017bc
 800af50:	20001794 	.word	0x20001794

0800af54 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800af5a:	4822      	ldr	r0, [pc, #136]	; (800afe4 <hci_user_evt_proc+0x90>)
 800af5c:	f000 fdde 	bl	800bb1c <LST_is_empty>
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d12b      	bne.n	800afbe <hci_user_evt_proc+0x6a>
 800af66:	4b20      	ldr	r3, [pc, #128]	; (800afe8 <hci_user_evt_proc+0x94>)
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d027      	beq.n	800afbe <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800af6e:	f107 030c 	add.w	r3, r7, #12
 800af72:	4619      	mov	r1, r3
 800af74:	481b      	ldr	r0, [pc, #108]	; (800afe4 <hci_user_evt_proc+0x90>)
 800af76:	f000 fe60 	bl	800bc3a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800af7a:	4b1c      	ldr	r3, [pc, #112]	; (800afec <hci_user_evt_proc+0x98>)
 800af7c:	69db      	ldr	r3, [r3, #28]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d00c      	beq.n	800af9c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800af86:	2301      	movs	r3, #1
 800af88:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800af8a:	4b18      	ldr	r3, [pc, #96]	; (800afec <hci_user_evt_proc+0x98>)
 800af8c:	69db      	ldr	r3, [r3, #28]
 800af8e:	1d3a      	adds	r2, r7, #4
 800af90:	4610      	mov	r0, r2
 800af92:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800af94:	793a      	ldrb	r2, [r7, #4]
 800af96:	4b14      	ldr	r3, [pc, #80]	; (800afe8 <hci_user_evt_proc+0x94>)
 800af98:	701a      	strb	r2, [r3, #0]
 800af9a:	e002      	b.n	800afa2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800af9c:	4b12      	ldr	r3, [pc, #72]	; (800afe8 <hci_user_evt_proc+0x94>)
 800af9e:	2201      	movs	r2, #1
 800afa0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800afa2:	4b11      	ldr	r3, [pc, #68]	; (800afe8 <hci_user_evt_proc+0x94>)
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d004      	beq.n	800afb4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	4618      	mov	r0, r3
 800afae:	f000 fc03 	bl	800b7b8 <TL_MM_EvtDone>
 800afb2:	e004      	b.n	800afbe <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	4619      	mov	r1, r3
 800afb8:	480a      	ldr	r0, [pc, #40]	; (800afe4 <hci_user_evt_proc+0x90>)
 800afba:	f000 fdd1 	bl	800bb60 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800afbe:	4809      	ldr	r0, [pc, #36]	; (800afe4 <hci_user_evt_proc+0x90>)
 800afc0:	f000 fdac 	bl	800bb1c <LST_is_empty>
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d107      	bne.n	800afda <hci_user_evt_proc+0x86>
 800afca:	4b07      	ldr	r3, [pc, #28]	; (800afe8 <hci_user_evt_proc+0x94>)
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d003      	beq.n	800afda <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800afd2:	4804      	ldr	r0, [pc, #16]	; (800afe4 <hci_user_evt_proc+0x90>)
 800afd4:	f001 ff18 	bl	800ce08 <hci_notify_asynch_evt>
  }


  return;
 800afd8:	bf00      	nop
 800afda:	bf00      	nop
}
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	20000940 	.word	0x20000940
 800afe8:	2000094c 	.word	0x2000094c
 800afec:	20001794 	.word	0x20001794

0800aff0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b088      	sub	sp, #32
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	460b      	mov	r3, r1
 800affa:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800affc:	2000      	movs	r0, #0
 800affe:	f000 f8cb 	bl	800b198 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800b002:	2300      	movs	r3, #0
 800b004:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	885b      	ldrh	r3, [r3, #2]
 800b00a:	b21b      	sxth	r3, r3
 800b00c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b010:	b21a      	sxth	r2, r3
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	881b      	ldrh	r3, [r3, #0]
 800b016:	029b      	lsls	r3, r3, #10
 800b018:	b21b      	sxth	r3, r3
 800b01a:	4313      	orrs	r3, r2
 800b01c:	b21b      	sxth	r3, r3
 800b01e:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	68db      	ldr	r3, [r3, #12]
 800b024:	b2d9      	uxtb	r1, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	689a      	ldr	r2, [r3, #8]
 800b02a:	8bbb      	ldrh	r3, [r7, #28]
 800b02c:	4618      	mov	r0, r3
 800b02e:	f000 f88d 	bl	800b14c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800b032:	e04e      	b.n	800b0d2 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800b034:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800b038:	f001 fefd 	bl	800ce36 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800b03c:	e043      	b.n	800b0c6 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800b03e:	f107 030c 	add.w	r3, r7, #12
 800b042:	4619      	mov	r1, r3
 800b044:	4828      	ldr	r0, [pc, #160]	; (800b0e8 <hci_send_req+0xf8>)
 800b046:	f000 fdf8 	bl	800bc3a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	7a5b      	ldrb	r3, [r3, #9]
 800b04e:	2b0f      	cmp	r3, #15
 800b050:	d114      	bne.n	800b07c <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	330b      	adds	r3, #11
 800b056:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	885b      	ldrh	r3, [r3, #2]
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	8bba      	ldrh	r2, [r7, #28]
 800b060:	429a      	cmp	r2, r3
 800b062:	d104      	bne.n	800b06e <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	691b      	ldr	r3, [r3, #16]
 800b068:	693a      	ldr	r2, [r7, #16]
 800b06a:	7812      	ldrb	r2, [r2, #0]
 800b06c:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	785b      	ldrb	r3, [r3, #1]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d027      	beq.n	800b0c6 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800b076:	2301      	movs	r3, #1
 800b078:	77fb      	strb	r3, [r7, #31]
 800b07a:	e024      	b.n	800b0c6 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	330b      	adds	r3, #11
 800b080:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800b082:	69bb      	ldr	r3, [r7, #24]
 800b084:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b088:	b29b      	uxth	r3, r3
 800b08a:	8bba      	ldrh	r2, [r7, #28]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d114      	bne.n	800b0ba <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	7a9b      	ldrb	r3, [r3, #10]
 800b094:	3b03      	subs	r3, #3
 800b096:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	695a      	ldr	r2, [r3, #20]
 800b09c:	7dfb      	ldrb	r3, [r7, #23]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	bfa8      	it	ge
 800b0a2:	461a      	movge	r2, r3
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6918      	ldr	r0, [r3, #16]
 800b0ac:	69bb      	ldr	r3, [r7, #24]
 800b0ae:	1cd9      	adds	r1, r3, #3
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	695b      	ldr	r3, [r3, #20]
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	f002 fd77 	bl	800dba8 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d001      	beq.n	800b0c6 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800b0c6:	4808      	ldr	r0, [pc, #32]	; (800b0e8 <hci_send_req+0xf8>)
 800b0c8:	f000 fd28 	bl	800bb1c <LST_is_empty>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d0b5      	beq.n	800b03e <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800b0d2:	7ffb      	ldrb	r3, [r7, #31]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d0ad      	beq.n	800b034 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800b0d8:	2001      	movs	r0, #1
 800b0da:	f000 f85d 	bl	800b198 <NotifyCmdStatus>

  return 0;
 800b0de:	2300      	movs	r3, #0
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3720      	adds	r7, #32
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	200017b4 	.word	0x200017b4

0800b0ec <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b086      	sub	sp, #24
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800b0f4:	480f      	ldr	r0, [pc, #60]	; (800b134 <TlInit+0x48>)
 800b0f6:	f000 fd01 	bl	800bafc <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800b0fa:	4a0f      	ldr	r2, [pc, #60]	; (800b138 <TlInit+0x4c>)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800b100:	480e      	ldr	r0, [pc, #56]	; (800b13c <TlInit+0x50>)
 800b102:	f000 fcfb 	bl	800bafc <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800b106:	4b0e      	ldr	r3, [pc, #56]	; (800b140 <TlInit+0x54>)
 800b108:	2201      	movs	r2, #1
 800b10a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800b10c:	4b0d      	ldr	r3, [pc, #52]	; (800b144 <TlInit+0x58>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d00a      	beq.n	800b12a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800b118:	4b0b      	ldr	r3, [pc, #44]	; (800b148 <TlInit+0x5c>)
 800b11a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800b11c:	4b09      	ldr	r3, [pc, #36]	; (800b144 <TlInit+0x58>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f107 0208 	add.w	r2, r7, #8
 800b124:	4610      	mov	r0, r2
 800b126:	4798      	blx	r3
  }

  return;
 800b128:	bf00      	nop
 800b12a:	bf00      	nop
}
 800b12c:	3718      	adds	r7, #24
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	200017b4 	.word	0x200017b4
 800b138:	20000948 	.word	0x20000948
 800b13c:	20000940 	.word	0x20000940
 800b140:	2000094c 	.word	0x2000094c
 800b144:	20001794 	.word	0x20001794
 800b148:	0800b1d9 	.word	0x0800b1d9

0800b14c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	4603      	mov	r3, r0
 800b154:	603a      	str	r2, [r7, #0]
 800b156:	80fb      	strh	r3, [r7, #6]
 800b158:	460b      	mov	r3, r1
 800b15a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800b15c:	4b0c      	ldr	r3, [pc, #48]	; (800b190 <SendCmd+0x44>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	88fa      	ldrh	r2, [r7, #6]
 800b162:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800b166:	4b0a      	ldr	r3, [pc, #40]	; (800b190 <SendCmd+0x44>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	797a      	ldrb	r2, [r7, #5]
 800b16c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800b16e:	4b08      	ldr	r3, [pc, #32]	; (800b190 <SendCmd+0x44>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	330c      	adds	r3, #12
 800b174:	797a      	ldrb	r2, [r7, #5]
 800b176:	6839      	ldr	r1, [r7, #0]
 800b178:	4618      	mov	r0, r3
 800b17a:	f002 fd15 	bl	800dba8 <memcpy>

  hciContext.io.Send(0,0);
 800b17e:	4b05      	ldr	r3, [pc, #20]	; (800b194 <SendCmd+0x48>)
 800b180:	691b      	ldr	r3, [r3, #16]
 800b182:	2100      	movs	r1, #0
 800b184:	2000      	movs	r0, #0
 800b186:	4798      	blx	r3

  return;
 800b188:	bf00      	nop
}
 800b18a:	3708      	adds	r7, #8
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	20000948 	.word	0x20000948
 800b194:	20001794 	.word	0x20001794

0800b198 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	4603      	mov	r3, r0
 800b1a0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800b1a2:	79fb      	ldrb	r3, [r7, #7]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d108      	bne.n	800b1ba <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800b1a8:	4b0a      	ldr	r3, [pc, #40]	; (800b1d4 <NotifyCmdStatus+0x3c>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d00d      	beq.n	800b1cc <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800b1b0:	4b08      	ldr	r3, [pc, #32]	; (800b1d4 <NotifyCmdStatus+0x3c>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800b1b8:	e008      	b.n	800b1cc <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800b1ba:	4b06      	ldr	r3, [pc, #24]	; (800b1d4 <NotifyCmdStatus+0x3c>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d004      	beq.n	800b1cc <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800b1c2:	4b04      	ldr	r3, [pc, #16]	; (800b1d4 <NotifyCmdStatus+0x3c>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2001      	movs	r0, #1
 800b1c8:	4798      	blx	r3
  return;
 800b1ca:	bf00      	nop
 800b1cc:	bf00      	nop
}
 800b1ce:	3708      	adds	r7, #8
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	200017bc 	.word	0x200017bc

0800b1d8 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	7a5b      	ldrb	r3, [r3, #9]
 800b1e4:	2b0f      	cmp	r3, #15
 800b1e6:	d003      	beq.n	800b1f0 <TlEvtReceived+0x18>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	7a5b      	ldrb	r3, [r3, #9]
 800b1ec:	2b0e      	cmp	r3, #14
 800b1ee:	d107      	bne.n	800b200 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800b1f0:	6879      	ldr	r1, [r7, #4]
 800b1f2:	4809      	ldr	r0, [pc, #36]	; (800b218 <TlEvtReceived+0x40>)
 800b1f4:	f000 fcda 	bl	800bbac <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800b1f8:	2000      	movs	r0, #0
 800b1fa:	f001 fe11 	bl	800ce20 <hci_cmd_resp_release>
 800b1fe:	e006      	b.n	800b20e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800b200:	6879      	ldr	r1, [r7, #4]
 800b202:	4806      	ldr	r0, [pc, #24]	; (800b21c <TlEvtReceived+0x44>)
 800b204:	f000 fcd2 	bl	800bbac <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b208:	4804      	ldr	r0, [pc, #16]	; (800b21c <TlEvtReceived+0x44>)
 800b20a:	f001 fdfd 	bl	800ce08 <hci_notify_asynch_evt>
  }

  return;
 800b20e:	bf00      	nop
}
 800b210:	3708      	adds	r7, #8
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	200017b4 	.word	0x200017b4
 800b21c:	20000940 	.word	0x20000940

0800b220 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	4a05      	ldr	r2, [pc, #20]	; (800b240 <hci_register_io_bus+0x20>)
 800b22c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	4a04      	ldr	r2, [pc, #16]	; (800b244 <hci_register_io_bus+0x24>)
 800b232:	611a      	str	r2, [r3, #16]

  return;
 800b234:	bf00      	nop
}
 800b236:	370c      	adds	r7, #12
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr
 800b240:	0800b531 	.word	0x0800b531
 800b244:	0800b599 	.word	0x0800b599

0800b248 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	4a08      	ldr	r2, [pc, #32]	; (800b278 <shci_init+0x30>)
 800b258:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800b25a:	4a08      	ldr	r2, [pc, #32]	; (800b27c <shci_init+0x34>)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800b260:	4806      	ldr	r0, [pc, #24]	; (800b27c <shci_init+0x34>)
 800b262:	f000 f911 	bl	800b488 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4618      	mov	r0, r3
 800b26c:	f000 f894 	bl	800b398 <TlInit>

  return;
 800b270:	bf00      	nop
}
 800b272:	3708      	adds	r7, #8
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}
 800b278:	200017e0 	.word	0x200017e0
 800b27c:	200017c0 	.word	0x200017c0

0800b280 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b286:	4822      	ldr	r0, [pc, #136]	; (800b310 <shci_user_evt_proc+0x90>)
 800b288:	f000 fc48 	bl	800bb1c <LST_is_empty>
 800b28c:	4603      	mov	r3, r0
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d12b      	bne.n	800b2ea <shci_user_evt_proc+0x6a>
 800b292:	4b20      	ldr	r3, [pc, #128]	; (800b314 <shci_user_evt_proc+0x94>)
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d027      	beq.n	800b2ea <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b29a:	f107 030c 	add.w	r3, r7, #12
 800b29e:	4619      	mov	r1, r3
 800b2a0:	481b      	ldr	r0, [pc, #108]	; (800b310 <shci_user_evt_proc+0x90>)
 800b2a2:	f000 fcca 	bl	800bc3a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800b2a6:	4b1c      	ldr	r3, [pc, #112]	; (800b318 <shci_user_evt_proc+0x98>)
 800b2a8:	69db      	ldr	r3, [r3, #28]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d00c      	beq.n	800b2c8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b2b6:	4b18      	ldr	r3, [pc, #96]	; (800b318 <shci_user_evt_proc+0x98>)
 800b2b8:	69db      	ldr	r3, [r3, #28]
 800b2ba:	1d3a      	adds	r2, r7, #4
 800b2bc:	4610      	mov	r0, r2
 800b2be:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800b2c0:	793a      	ldrb	r2, [r7, #4]
 800b2c2:	4b14      	ldr	r3, [pc, #80]	; (800b314 <shci_user_evt_proc+0x94>)
 800b2c4:	701a      	strb	r2, [r3, #0]
 800b2c6:	e002      	b.n	800b2ce <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b2c8:	4b12      	ldr	r3, [pc, #72]	; (800b314 <shci_user_evt_proc+0x94>)
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800b2ce:	4b11      	ldr	r3, [pc, #68]	; (800b314 <shci_user_evt_proc+0x94>)
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d004      	beq.n	800b2e0 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f000 fa6d 	bl	800b7b8 <TL_MM_EvtDone>
 800b2de:	e004      	b.n	800b2ea <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	4619      	mov	r1, r3
 800b2e4:	480a      	ldr	r0, [pc, #40]	; (800b310 <shci_user_evt_proc+0x90>)
 800b2e6:	f000 fc3b 	bl	800bb60 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b2ea:	4809      	ldr	r0, [pc, #36]	; (800b310 <shci_user_evt_proc+0x90>)
 800b2ec:	f000 fc16 	bl	800bb1c <LST_is_empty>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d107      	bne.n	800b306 <shci_user_evt_proc+0x86>
 800b2f6:	4b07      	ldr	r3, [pc, #28]	; (800b314 <shci_user_evt_proc+0x94>)
 800b2f8:	781b      	ldrb	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d003      	beq.n	800b306 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800b2fe:	4804      	ldr	r0, [pc, #16]	; (800b310 <shci_user_evt_proc+0x90>)
 800b300:	f7f6 f8f5 	bl	80014ee <shci_notify_asynch_evt>
  }


  return;
 800b304:	bf00      	nop
 800b306:	bf00      	nop
}
 800b308:	3710      	adds	r7, #16
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	20000950 	.word	0x20000950
 800b314:	20000960 	.word	0x20000960
 800b318:	200017c0 	.word	0x200017c0

0800b31c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	60ba      	str	r2, [r7, #8]
 800b324:	607b      	str	r3, [r7, #4]
 800b326:	4603      	mov	r3, r0
 800b328:	81fb      	strh	r3, [r7, #14]
 800b32a:	460b      	mov	r3, r1
 800b32c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800b32e:	2000      	movs	r0, #0
 800b330:	f000 f864 	bl	800b3fc <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800b334:	4b16      	ldr	r3, [pc, #88]	; (800b390 <shci_send+0x74>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	89fa      	ldrh	r2, [r7, #14]
 800b33a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800b33e:	4b14      	ldr	r3, [pc, #80]	; (800b390 <shci_send+0x74>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	7b7a      	ldrb	r2, [r7, #13]
 800b344:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800b346:	4b12      	ldr	r3, [pc, #72]	; (800b390 <shci_send+0x74>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	330c      	adds	r3, #12
 800b34c:	7b7a      	ldrb	r2, [r7, #13]
 800b34e:	68b9      	ldr	r1, [r7, #8]
 800b350:	4618      	mov	r0, r3
 800b352:	f002 fc29 	bl	800dba8 <memcpy>

  shciContext.io.Send(0,0);
 800b356:	4b0f      	ldr	r3, [pc, #60]	; (800b394 <shci_send+0x78>)
 800b358:	691b      	ldr	r3, [r3, #16]
 800b35a:	2100      	movs	r1, #0
 800b35c:	2000      	movs	r0, #0
 800b35e:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800b360:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800b364:	f7f6 f8da 	bl	800151c <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f103 0008 	add.w	r0, r3, #8
 800b36e:	4b08      	ldr	r3, [pc, #32]	; (800b390 <shci_send+0x74>)
 800b370:	6819      	ldr	r1, [r3, #0]
 800b372:	4b07      	ldr	r3, [pc, #28]	; (800b390 <shci_send+0x74>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	789b      	ldrb	r3, [r3, #2]
 800b378:	3303      	adds	r3, #3
 800b37a:	461a      	mov	r2, r3
 800b37c:	f002 fc14 	bl	800dba8 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b380:	2001      	movs	r0, #1
 800b382:	f000 f83b 	bl	800b3fc <Cmd_SetStatus>

  return;
 800b386:	bf00      	nop
}
 800b388:	3710      	adds	r7, #16
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	2000095c 	.word	0x2000095c
 800b394:	200017c0 	.word	0x200017c0

0800b398 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b086      	sub	sp, #24
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800b3a0:	4a10      	ldr	r2, [pc, #64]	; (800b3e4 <TlInit+0x4c>)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800b3a6:	4810      	ldr	r0, [pc, #64]	; (800b3e8 <TlInit+0x50>)
 800b3a8:	f000 fba8 	bl	800bafc <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b3ac:	2001      	movs	r0, #1
 800b3ae:	f000 f825 	bl	800b3fc <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b3b2:	4b0e      	ldr	r3, [pc, #56]	; (800b3ec <TlInit+0x54>)
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800b3b8:	4b0d      	ldr	r3, [pc, #52]	; (800b3f0 <TlInit+0x58>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00c      	beq.n	800b3da <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800b3c4:	4b0b      	ldr	r3, [pc, #44]	; (800b3f4 <TlInit+0x5c>)
 800b3c6:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800b3c8:	4b0b      	ldr	r3, [pc, #44]	; (800b3f8 <TlInit+0x60>)
 800b3ca:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800b3cc:	4b08      	ldr	r3, [pc, #32]	; (800b3f0 <TlInit+0x58>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f107 020c 	add.w	r2, r7, #12
 800b3d4:	4610      	mov	r0, r2
 800b3d6:	4798      	blx	r3
  }

  return;
 800b3d8:	bf00      	nop
 800b3da:	bf00      	nop
}
 800b3dc:	3718      	adds	r7, #24
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	2000095c 	.word	0x2000095c
 800b3e8:	20000950 	.word	0x20000950
 800b3ec:	20000960 	.word	0x20000960
 800b3f0:	200017c0 	.word	0x200017c0
 800b3f4:	0800b44d 	.word	0x0800b44d
 800b3f8:	0800b465 	.word	0x0800b465

0800b3fc <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	4603      	mov	r3, r0
 800b404:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800b406:	79fb      	ldrb	r3, [r7, #7]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d10b      	bne.n	800b424 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800b40c:	4b0d      	ldr	r3, [pc, #52]	; (800b444 <Cmd_SetStatus+0x48>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d003      	beq.n	800b41c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800b414:	4b0b      	ldr	r3, [pc, #44]	; (800b444 <Cmd_SetStatus+0x48>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2000      	movs	r0, #0
 800b41a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800b41c:	4b0a      	ldr	r3, [pc, #40]	; (800b448 <Cmd_SetStatus+0x4c>)
 800b41e:	2200      	movs	r2, #0
 800b420:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800b422:	e00b      	b.n	800b43c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800b424:	4b08      	ldr	r3, [pc, #32]	; (800b448 <Cmd_SetStatus+0x4c>)
 800b426:	2201      	movs	r2, #1
 800b428:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800b42a:	4b06      	ldr	r3, [pc, #24]	; (800b444 <Cmd_SetStatus+0x48>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d004      	beq.n	800b43c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800b432:	4b04      	ldr	r3, [pc, #16]	; (800b444 <Cmd_SetStatus+0x48>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	2001      	movs	r0, #1
 800b438:	4798      	blx	r3
  return;
 800b43a:	bf00      	nop
 800b43c:	bf00      	nop
}
 800b43e:	3708      	adds	r7, #8
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}
 800b444:	200017e0 	.word	0x200017e0
 800b448:	20000958 	.word	0x20000958

0800b44c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800b454:	2000      	movs	r0, #0
 800b456:	f7f6 f856 	bl	8001506 <shci_cmd_resp_release>

  return;
 800b45a:	bf00      	nop
}
 800b45c:	3708      	adds	r7, #8
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
	...

0800b464 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800b46c:	6879      	ldr	r1, [r7, #4]
 800b46e:	4805      	ldr	r0, [pc, #20]	; (800b484 <TlUserEvtReceived+0x20>)
 800b470:	f000 fb9c 	bl	800bbac <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b474:	4803      	ldr	r0, [pc, #12]	; (800b484 <TlUserEvtReceived+0x20>)
 800b476:	f7f6 f83a 	bl	80014ee <shci_notify_asynch_evt>

  return;
 800b47a:	bf00      	nop
}
 800b47c:	3708      	adds	r7, #8
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
 800b482:	bf00      	nop
 800b484:	20000950 	.word	0x20000950

0800b488 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800b488:	b480      	push	{r7}
 800b48a:	b083      	sub	sp, #12
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	4a05      	ldr	r2, [pc, #20]	; (800b4a8 <shci_register_io_bus+0x20>)
 800b494:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4a04      	ldr	r2, [pc, #16]	; (800b4ac <shci_register_io_bus+0x24>)
 800b49a:	611a      	str	r2, [r3, #16]

  return;
 800b49c:	bf00      	nop
}
 800b49e:	370c      	adds	r7, #12
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr
 800b4a8:	0800b645 	.word	0x0800b645
 800b4ac:	0800b699 	.word	0x0800b699

0800b4b0 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800b4b4:	f001 fffc 	bl	800d4b0 <HW_IPCC_Enable>

  return;
 800b4b8:	bf00      	nop
}
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <TL_Init>:


void TL_Init( void )
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800b4c0:	4b10      	ldr	r3, [pc, #64]	; (800b504 <TL_Init+0x48>)
 800b4c2:	4a11      	ldr	r2, [pc, #68]	; (800b508 <TL_Init+0x4c>)
 800b4c4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800b4c6:	4b0f      	ldr	r3, [pc, #60]	; (800b504 <TL_Init+0x48>)
 800b4c8:	4a10      	ldr	r2, [pc, #64]	; (800b50c <TL_Init+0x50>)
 800b4ca:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800b4cc:	4b0d      	ldr	r3, [pc, #52]	; (800b504 <TL_Init+0x48>)
 800b4ce:	4a10      	ldr	r2, [pc, #64]	; (800b510 <TL_Init+0x54>)
 800b4d0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800b4d2:	4b0c      	ldr	r3, [pc, #48]	; (800b504 <TL_Init+0x48>)
 800b4d4:	4a0f      	ldr	r2, [pc, #60]	; (800b514 <TL_Init+0x58>)
 800b4d6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800b4d8:	4b0a      	ldr	r3, [pc, #40]	; (800b504 <TL_Init+0x48>)
 800b4da:	4a0f      	ldr	r2, [pc, #60]	; (800b518 <TL_Init+0x5c>)
 800b4dc:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800b4de:	4b09      	ldr	r3, [pc, #36]	; (800b504 <TL_Init+0x48>)
 800b4e0:	4a0e      	ldr	r2, [pc, #56]	; (800b51c <TL_Init+0x60>)
 800b4e2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800b4e4:	4b07      	ldr	r3, [pc, #28]	; (800b504 <TL_Init+0x48>)
 800b4e6:	4a0e      	ldr	r2, [pc, #56]	; (800b520 <TL_Init+0x64>)
 800b4e8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800b4ea:	4b06      	ldr	r3, [pc, #24]	; (800b504 <TL_Init+0x48>)
 800b4ec:	4a0d      	ldr	r2, [pc, #52]	; (800b524 <TL_Init+0x68>)
 800b4ee:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800b4f0:	4b04      	ldr	r3, [pc, #16]	; (800b504 <TL_Init+0x48>)
 800b4f2:	4a0d      	ldr	r2, [pc, #52]	; (800b528 <TL_Init+0x6c>)
 800b4f4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800b4f6:	4b03      	ldr	r3, [pc, #12]	; (800b504 <TL_Init+0x48>)
 800b4f8:	4a0c      	ldr	r2, [pc, #48]	; (800b52c <TL_Init+0x70>)
 800b4fa:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800b4fc:	f001 ffec 	bl	800d4d8 <HW_IPCC_Init>

  return;
 800b500:	bf00      	nop
}
 800b502:	bd80      	pop	{r7, pc}
 800b504:	20030000 	.word	0x20030000
 800b508:	20030028 	.word	0x20030028
 800b50c:	20030048 	.word	0x20030048
 800b510:	20030058 	.word	0x20030058
 800b514:	20030068 	.word	0x20030068
 800b518:	20030070 	.word	0x20030070
 800b51c:	20030078 	.word	0x20030078
 800b520:	20030080 	.word	0x20030080
 800b524:	2003009c 	.word	0x2003009c
 800b528:	200300a0 	.word	0x200300a0
 800b52c:	200300ac 	.word	0x200300ac

0800b530 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b084      	sub	sp, #16
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800b53c:	4811      	ldr	r0, [pc, #68]	; (800b584 <TL_BLE_Init+0x54>)
 800b53e:	f000 fadd 	bl	800bafc <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800b542:	4b11      	ldr	r3, [pc, #68]	; (800b588 <TL_BLE_Init+0x58>)
 800b544:	685b      	ldr	r3, [r3, #4]
 800b546:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	689a      	ldr	r2, [r3, #8]
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	68da      	ldr	r2, [r3, #12]
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	4a0c      	ldr	r2, [pc, #48]	; (800b58c <TL_BLE_Init+0x5c>)
 800b55c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	4a08      	ldr	r2, [pc, #32]	; (800b584 <TL_BLE_Init+0x54>)
 800b562:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800b564:	f001 ffce 	bl	800d504 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a08      	ldr	r2, [pc, #32]	; (800b590 <TL_BLE_Init+0x60>)
 800b56e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	4a07      	ldr	r2, [pc, #28]	; (800b594 <TL_BLE_Init+0x64>)
 800b576:	6013      	str	r3, [r2, #0]

  return 0;
 800b578:	2300      	movs	r3, #0
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3710      	adds	r7, #16
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	200300c8 	.word	0x200300c8
 800b588:	20030000 	.word	0x20030000
 800b58c:	20000908 	.word	0x20000908
 800b590:	200017ec 	.word	0x200017ec
 800b594:	200017f0 	.word	0x200017f0

0800b598 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b082      	sub	sp, #8
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800b5a4:	4b09      	ldr	r3, [pc, #36]	; (800b5cc <TL_BLE_SendCmd+0x34>)
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800b5ae:	4b07      	ldr	r3, [pc, #28]	; (800b5cc <TL_BLE_SendCmd+0x34>)
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	2001      	movs	r0, #1
 800b5b8:	f000 f96c 	bl	800b894 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800b5bc:	f001 ffac 	bl	800d518 <HW_IPCC_BLE_SendCmd>

  return 0;
 800b5c0:	2300      	movs	r3, #0
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3708      	adds	r7, #8
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	20030000 	.word	0x20030000

0800b5d0 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800b5d6:	e01c      	b.n	800b612 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800b5d8:	1d3b      	adds	r3, r7, #4
 800b5da:	4619      	mov	r1, r3
 800b5dc:	4812      	ldr	r0, [pc, #72]	; (800b628 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b5de:	f000 fb2c 	bl	800bc3a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	7a5b      	ldrb	r3, [r3, #9]
 800b5e6:	2b0f      	cmp	r3, #15
 800b5e8:	d003      	beq.n	800b5f2 <HW_IPCC_BLE_RxEvtNot+0x22>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	7a5b      	ldrb	r3, [r3, #9]
 800b5ee:	2b0e      	cmp	r3, #14
 800b5f0:	d105      	bne.n	800b5fe <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	2002      	movs	r0, #2
 800b5f8:	f000 f94c 	bl	800b894 <OutputDbgTrace>
 800b5fc:	e004      	b.n	800b608 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	4619      	mov	r1, r3
 800b602:	2003      	movs	r0, #3
 800b604:	f000 f946 	bl	800b894 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800b608:	4b08      	ldr	r3, [pc, #32]	; (800b62c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	4610      	mov	r0, r2
 800b610:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800b612:	4805      	ldr	r0, [pc, #20]	; (800b628 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b614:	f000 fa82 	bl	800bb1c <LST_is_empty>
 800b618:	4603      	mov	r3, r0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d0dc      	beq.n	800b5d8 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800b61e:	bf00      	nop
}
 800b620:	3708      	adds	r7, #8
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	200300c8 	.word	0x200300c8
 800b62c:	200017ec 	.word	0x200017ec

0800b630 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800b634:	4b02      	ldr	r3, [pc, #8]	; (800b640 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4798      	blx	r3

  return;
 800b63a:	bf00      	nop
}
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	200017f0 	.word	0x200017f0

0800b644 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800b650:	480d      	ldr	r0, [pc, #52]	; (800b688 <TL_SYS_Init+0x44>)
 800b652:	f000 fa53 	bl	800bafc <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800b656:	4b0d      	ldr	r3, [pc, #52]	; (800b68c <TL_SYS_Init+0x48>)
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	689a      	ldr	r2, [r3, #8]
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	4a08      	ldr	r2, [pc, #32]	; (800b688 <TL_SYS_Init+0x44>)
 800b668:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800b66a:	f001 ff77 	bl	800d55c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4a07      	ldr	r2, [pc, #28]	; (800b690 <TL_SYS_Init+0x4c>)
 800b674:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	4a06      	ldr	r2, [pc, #24]	; (800b694 <TL_SYS_Init+0x50>)
 800b67c:	6013      	str	r3, [r2, #0]

  return 0;
 800b67e:	2300      	movs	r3, #0
}
 800b680:	4618      	mov	r0, r3
 800b682:	3710      	adds	r7, #16
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}
 800b688:	200300d0 	.word	0x200300d0
 800b68c:	20030000 	.word	0x20030000
 800b690:	200017f4 	.word	0x200017f4
 800b694:	200017f8 	.word	0x200017f8

0800b698 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800b6a4:	4b09      	ldr	r3, [pc, #36]	; (800b6cc <TL_SYS_SendCmd+0x34>)
 800b6a6:	68db      	ldr	r3, [r3, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2210      	movs	r2, #16
 800b6ac:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800b6ae:	4b07      	ldr	r3, [pc, #28]	; (800b6cc <TL_SYS_SendCmd+0x34>)
 800b6b0:	68db      	ldr	r3, [r3, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	2004      	movs	r0, #4
 800b6b8:	f000 f8ec 	bl	800b894 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800b6bc:	f001 ff58 	bl	800d570 <HW_IPCC_SYS_SendCmd>

  return 0;
 800b6c0:	2300      	movs	r3, #0
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3708      	adds	r7, #8
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	20030000 	.word	0x20030000

0800b6d0 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b6d4:	4b07      	ldr	r3, [pc, #28]	; (800b6f4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4619      	mov	r1, r3
 800b6dc:	2005      	movs	r0, #5
 800b6de:	f000 f8d9 	bl	800b894 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b6e2:	4b05      	ldr	r3, [pc, #20]	; (800b6f8 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4a03      	ldr	r2, [pc, #12]	; (800b6f4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b6e8:	68d2      	ldr	r2, [r2, #12]
 800b6ea:	6812      	ldr	r2, [r2, #0]
 800b6ec:	4610      	mov	r0, r2
 800b6ee:	4798      	blx	r3

  return;
 800b6f0:	bf00      	nop
}
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	20030000 	.word	0x20030000
 800b6f8:	200017f4 	.word	0x200017f4

0800b6fc <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b702:	e00e      	b.n	800b722 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800b704:	1d3b      	adds	r3, r7, #4
 800b706:	4619      	mov	r1, r3
 800b708:	480b      	ldr	r0, [pc, #44]	; (800b738 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b70a:	f000 fa96 	bl	800bc3a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	4619      	mov	r1, r3
 800b712:	2006      	movs	r0, #6
 800b714:	f000 f8be 	bl	800b894 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800b718:	4b08      	ldr	r3, [pc, #32]	; (800b73c <HW_IPCC_SYS_EvtNot+0x40>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	4610      	mov	r0, r2
 800b720:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b722:	4805      	ldr	r0, [pc, #20]	; (800b738 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b724:	f000 f9fa 	bl	800bb1c <LST_is_empty>
 800b728:	4603      	mov	r3, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d0ea      	beq.n	800b704 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800b72e:	bf00      	nop
}
 800b730:	3708      	adds	r7, #8
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	200300d0 	.word	0x200300d0
 800b73c:	200017f8 	.word	0x200017f8

0800b740 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800b748:	4817      	ldr	r0, [pc, #92]	; (800b7a8 <TL_MM_Init+0x68>)
 800b74a:	f000 f9d7 	bl	800bafc <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800b74e:	4817      	ldr	r0, [pc, #92]	; (800b7ac <TL_MM_Init+0x6c>)
 800b750:	f000 f9d4 	bl	800bafc <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800b754:	4b16      	ldr	r3, [pc, #88]	; (800b7b0 <TL_MM_Init+0x70>)
 800b756:	691b      	ldr	r3, [r3, #16]
 800b758:	4a16      	ldr	r2, [pc, #88]	; (800b7b4 <TL_MM_Init+0x74>)
 800b75a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800b75c:	4b15      	ldr	r3, [pc, #84]	; (800b7b4 <TL_MM_Init+0x74>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	6892      	ldr	r2, [r2, #8]
 800b764:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800b766:	4b13      	ldr	r3, [pc, #76]	; (800b7b4 <TL_MM_Init+0x74>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	687a      	ldr	r2, [r7, #4]
 800b76c:	68d2      	ldr	r2, [r2, #12]
 800b76e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800b770:	4b10      	ldr	r3, [pc, #64]	; (800b7b4 <TL_MM_Init+0x74>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a0c      	ldr	r2, [pc, #48]	; (800b7a8 <TL_MM_Init+0x68>)
 800b776:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800b778:	4b0e      	ldr	r3, [pc, #56]	; (800b7b4 <TL_MM_Init+0x74>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	6812      	ldr	r2, [r2, #0]
 800b780:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800b782:	4b0c      	ldr	r3, [pc, #48]	; (800b7b4 <TL_MM_Init+0x74>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	687a      	ldr	r2, [r7, #4]
 800b788:	6852      	ldr	r2, [r2, #4]
 800b78a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800b78c:	4b09      	ldr	r3, [pc, #36]	; (800b7b4 <TL_MM_Init+0x74>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	6912      	ldr	r2, [r2, #16]
 800b794:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800b796:	4b07      	ldr	r3, [pc, #28]	; (800b7b4 <TL_MM_Init+0x74>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	6952      	ldr	r2, [r2, #20]
 800b79e:	619a      	str	r2, [r3, #24]

  return;
 800b7a0:	bf00      	nop
}
 800b7a2:	3708      	adds	r7, #8
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	200300b8 	.word	0x200300b8
 800b7ac:	200017e4 	.word	0x200017e4
 800b7b0:	20030000 	.word	0x20030000
 800b7b4:	200017fc 	.word	0x200017fc

0800b7b8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800b7c0:	6879      	ldr	r1, [r7, #4]
 800b7c2:	4807      	ldr	r0, [pc, #28]	; (800b7e0 <TL_MM_EvtDone+0x28>)
 800b7c4:	f000 f9f2 	bl	800bbac <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800b7c8:	6879      	ldr	r1, [r7, #4]
 800b7ca:	2000      	movs	r0, #0
 800b7cc:	f000 f862 	bl	800b894 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800b7d0:	4804      	ldr	r0, [pc, #16]	; (800b7e4 <TL_MM_EvtDone+0x2c>)
 800b7d2:	f001 fef3 	bl	800d5bc <HW_IPCC_MM_SendFreeBuf>

  return;
 800b7d6:	bf00      	nop
}
 800b7d8:	3708      	adds	r7, #8
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}
 800b7de:	bf00      	nop
 800b7e0:	200017e4 	.word	0x200017e4
 800b7e4:	0800b7e9 	.word	0x0800b7e9

0800b7e8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b7ee:	e00c      	b.n	800b80a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800b7f0:	1d3b      	adds	r3, r7, #4
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	480a      	ldr	r0, [pc, #40]	; (800b820 <SendFreeBuf+0x38>)
 800b7f6:	f000 fa20 	bl	800bc3a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800b7fa:	4b0a      	ldr	r3, [pc, #40]	; (800b824 <SendFreeBuf+0x3c>)
 800b7fc:	691b      	ldr	r3, [r3, #16]
 800b7fe:	691b      	ldr	r3, [r3, #16]
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	4611      	mov	r1, r2
 800b804:	4618      	mov	r0, r3
 800b806:	f000 f9d1 	bl	800bbac <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b80a:	4805      	ldr	r0, [pc, #20]	; (800b820 <SendFreeBuf+0x38>)
 800b80c:	f000 f986 	bl	800bb1c <LST_is_empty>
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	d0ec      	beq.n	800b7f0 <SendFreeBuf+0x8>
  }

  return;
 800b816:	bf00      	nop
}
 800b818:	3708      	adds	r7, #8
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	200017e4 	.word	0x200017e4
 800b824:	20030000 	.word	0x20030000

0800b828 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800b82c:	4805      	ldr	r0, [pc, #20]	; (800b844 <TL_TRACES_Init+0x1c>)
 800b82e:	f000 f965 	bl	800bafc <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800b832:	4b05      	ldr	r3, [pc, #20]	; (800b848 <TL_TRACES_Init+0x20>)
 800b834:	695b      	ldr	r3, [r3, #20]
 800b836:	4a03      	ldr	r2, [pc, #12]	; (800b844 <TL_TRACES_Init+0x1c>)
 800b838:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800b83a:	f001 fef5 	bl	800d628 <HW_IPCC_TRACES_Init>

  return;
 800b83e:	bf00      	nop
}
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	200300c0 	.word	0x200300c0
 800b848:	20030000 	.word	0x20030000

0800b84c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b852:	e008      	b.n	800b866 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800b854:	1d3b      	adds	r3, r7, #4
 800b856:	4619      	mov	r1, r3
 800b858:	4808      	ldr	r0, [pc, #32]	; (800b87c <HW_IPCC_TRACES_EvtNot+0x30>)
 800b85a:	f000 f9ee 	bl	800bc3a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	4618      	mov	r0, r3
 800b862:	f000 f80d 	bl	800b880 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b866:	4805      	ldr	r0, [pc, #20]	; (800b87c <HW_IPCC_TRACES_EvtNot+0x30>)
 800b868:	f000 f958 	bl	800bb1c <LST_is_empty>
 800b86c:	4603      	mov	r3, r0
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d0f0      	beq.n	800b854 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800b872:	bf00      	nop
}
 800b874:	3708      	adds	r7, #8
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop
 800b87c:	200300c0 	.word	0x200300c0

0800b880 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800b888:	bf00      	nop
 800b88a:	370c      	adds	r7, #12
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	4603      	mov	r3, r0
 800b89c:	6039      	str	r1, [r7, #0]
 800b89e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800b8a0:	79fb      	ldrb	r3, [r7, #7]
 800b8a2:	2b06      	cmp	r3, #6
 800b8a4:	d845      	bhi.n	800b932 <OutputDbgTrace+0x9e>
 800b8a6:	a201      	add	r2, pc, #4	; (adr r2, 800b8ac <OutputDbgTrace+0x18>)
 800b8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8ac:	0800b8c9 	.word	0x0800b8c9
 800b8b0:	0800b8ed 	.word	0x0800b8ed
 800b8b4:	0800b8f3 	.word	0x0800b8f3
 800b8b8:	0800b907 	.word	0x0800b907
 800b8bc:	0800b913 	.word	0x0800b913
 800b8c0:	0800b919 	.word	0x0800b919
 800b8c4:	0800b927 	.word	0x0800b927
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	7a5b      	ldrb	r3, [r3, #9]
 800b8d0:	2bff      	cmp	r3, #255	; 0xff
 800b8d2:	d005      	beq.n	800b8e0 <OutputDbgTrace+0x4c>
 800b8d4:	2bff      	cmp	r3, #255	; 0xff
 800b8d6:	dc05      	bgt.n	800b8e4 <OutputDbgTrace+0x50>
 800b8d8:	2b0e      	cmp	r3, #14
 800b8da:	d005      	beq.n	800b8e8 <OutputDbgTrace+0x54>
 800b8dc:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800b8de:	e001      	b.n	800b8e4 <OutputDbgTrace+0x50>
          break;
 800b8e0:	bf00      	nop
 800b8e2:	e027      	b.n	800b934 <OutputDbgTrace+0xa0>
          break;
 800b8e4:	bf00      	nop
 800b8e6:	e025      	b.n	800b934 <OutputDbgTrace+0xa0>
          break;
 800b8e8:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800b8ea:	e023      	b.n	800b934 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b8f0:	e020      	b.n	800b934 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	7a5b      	ldrb	r3, [r3, #9]
 800b8fa:	2b0e      	cmp	r3, #14
 800b8fc:	d001      	beq.n	800b902 <OutputDbgTrace+0x6e>
 800b8fe:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b900:	e000      	b.n	800b904 <OutputDbgTrace+0x70>
          break;
 800b902:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b904:	e016      	b.n	800b934 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	7a5b      	ldrb	r3, [r3, #9]
 800b90e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b910:	e010      	b.n	800b934 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b916:	e00d      	b.n	800b934 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	7a5b      	ldrb	r3, [r3, #9]
 800b920:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b922:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b924:	e006      	b.n	800b934 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	7a5b      	ldrb	r3, [r3, #9]
 800b92e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b930:	e000      	b.n	800b934 <OutputDbgTrace+0xa0>

    default:
      break;
 800b932:	bf00      	nop
  }

  return;
 800b934:	bf00      	nop
}
 800b936:	3714      	adds	r7, #20
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b086      	sub	sp, #24
 800b944:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b946:	f3ef 8310 	mrs	r3, PRIMASK
 800b94a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b94c:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800b94e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b950:	b672      	cpsid	i
}
 800b952:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800b954:	1cbb      	adds	r3, r7, #2
 800b956:	4619      	mov	r1, r3
 800b958:	4812      	ldr	r0, [pc, #72]	; (800b9a4 <DbgTrace_TxCpltCallback+0x64>)
 800b95a:	f000 fbe6 	bl	800c12a <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800b95e:	1cbb      	adds	r3, r7, #2
 800b960:	4619      	mov	r1, r3
 800b962:	4810      	ldr	r0, [pc, #64]	; (800b9a4 <DbgTrace_TxCpltCallback+0x64>)
 800b964:	f000 fcd2 	bl	800c30c <CircularQueue_Sense>
 800b968:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d00c      	beq.n	800b98a <DbgTrace_TxCpltCallback+0x4a>
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	f383 8810 	msr	PRIMASK, r3
}
 800b97a:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800b97c:	887b      	ldrh	r3, [r7, #2]
 800b97e:	4a0a      	ldr	r2, [pc, #40]	; (800b9a8 <DbgTrace_TxCpltCallback+0x68>)
 800b980:	4619      	mov	r1, r3
 800b982:	6938      	ldr	r0, [r7, #16]
 800b984:	f7f5 f9e5 	bl	8000d52 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800b988:	e008      	b.n	800b99c <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800b98a:	4b08      	ldr	r3, [pc, #32]	; (800b9ac <DbgTrace_TxCpltCallback+0x6c>)
 800b98c:	2201      	movs	r2, #1
 800b98e:	701a      	strb	r2, [r3, #0]
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f383 8810 	msr	PRIMASK, r3
}
 800b99a:	bf00      	nop
}
 800b99c:	bf00      	nop
 800b99e:	3718      	adds	r7, #24
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}
 800b9a4:	20001800 	.word	0x20001800
 800b9a8:	0800b941 	.word	0x0800b941
 800b9ac:	20000015 	.word	0x20000015

0800b9b0 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800b9b6:	f7f5 f9c6 	bl	8000d46 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800b9ba:	2302      	movs	r3, #2
 800b9bc:	9300      	str	r3, [sp, #0]
 800b9be:	2300      	movs	r3, #0
 800b9c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b9c4:	4903      	ldr	r1, [pc, #12]	; (800b9d4 <DbgTraceInit+0x24>)
 800b9c6:	4804      	ldr	r0, [pc, #16]	; (800b9d8 <DbgTraceInit+0x28>)
 800b9c8:	f000 f956 	bl	800bc78 <CircularQueue_Init>
#endif 
#endif
  return;
 800b9cc:	bf00      	nop
}
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	20001820 	.word	0x20001820
 800b9d8:	20001800 	.word	0x20001800

0800b9dc <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	60f8      	str	r0, [r7, #12]
 800b9e4:	60b9      	str	r1, [r7, #8]
 800b9e6:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	68b9      	ldr	r1, [r7, #8]
 800b9ec:	68f8      	ldr	r0, [r7, #12]
 800b9ee:	f000 f805 	bl	800b9fc <DbgTraceWrite>
 800b9f2:	4603      	mov	r3, r0
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3710      	adds	r7, #16
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b08a      	sub	sp, #40	; 0x28
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba0c:	f3ef 8310 	mrs	r3, PRIMASK
 800ba10:	61bb      	str	r3, [r7, #24]
  return(result);
 800ba12:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800ba14:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba1c:	d102      	bne.n	800ba24 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	627b      	str	r3, [r7, #36]	; 0x24
 800ba22:	e037      	b.n	800ba94 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d006      	beq.n	800ba38 <DbgTraceWrite+0x3c>
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2b02      	cmp	r3, #2
 800ba2e:	d003      	beq.n	800ba38 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800ba30:	f04f 33ff 	mov.w	r3, #4294967295
 800ba34:	627b      	str	r3, [r7, #36]	; 0x24
 800ba36:	e02d      	b.n	800ba94 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d02a      	beq.n	800ba94 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800ba42:	b672      	cpsid	i
}
 800ba44:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	b29a      	uxth	r2, r3
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	68b9      	ldr	r1, [r7, #8]
 800ba4e:	4814      	ldr	r0, [pc, #80]	; (800baa0 <DbgTraceWrite+0xa4>)
 800ba50:	f000 f944 	bl	800bcdc <CircularQueue_Add>
 800ba54:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800ba56:	69fb      	ldr	r3, [r7, #28]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d015      	beq.n	800ba88 <DbgTraceWrite+0x8c>
 800ba5c:	4b11      	ldr	r3, [pc, #68]	; (800baa4 <DbgTraceWrite+0xa8>)
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d010      	beq.n	800ba88 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800ba66:	4b0f      	ldr	r3, [pc, #60]	; (800baa4 <DbgTraceWrite+0xa8>)
 800ba68:	2200      	movs	r2, #0
 800ba6a:	701a      	strb	r2, [r3, #0]
 800ba6c:	6a3b      	ldr	r3, [r7, #32]
 800ba6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	f383 8810 	msr	PRIMASK, r3
}
 800ba76:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	4a0a      	ldr	r2, [pc, #40]	; (800baa8 <DbgTraceWrite+0xac>)
 800ba7e:	4619      	mov	r1, r3
 800ba80:	69f8      	ldr	r0, [r7, #28]
 800ba82:	f7f5 f966 	bl	8000d52 <DbgOutputTraces>
 800ba86:	e005      	b.n	800ba94 <DbgTraceWrite+0x98>
 800ba88:	6a3b      	ldr	r3, [r7, #32]
 800ba8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	f383 8810 	msr	PRIMASK, r3
}
 800ba92:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800ba94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba96:	4618      	mov	r0, r3
 800ba98:	3728      	adds	r7, #40	; 0x28
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}
 800ba9e:	bf00      	nop
 800baa0:	20001800 	.word	0x20001800
 800baa4:	20000015 	.word	0x20000015
 800baa8:	0800b941 	.word	0x0800b941

0800baac <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800baac:	b480      	push	{r7}
 800baae:	b085      	sub	sp, #20
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	4603      	mov	r3, r0
 800bab4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800bab6:	4b0f      	ldr	r3, [pc, #60]	; (800baf4 <OTP_Read+0x48>)
 800bab8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800baba:	e002      	b.n	800bac2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	3b08      	subs	r3, #8
 800bac0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	3307      	adds	r3, #7
 800bac6:	781b      	ldrb	r3, [r3, #0]
 800bac8:	79fa      	ldrb	r2, [r7, #7]
 800baca:	429a      	cmp	r2, r3
 800bacc:	d003      	beq.n	800bad6 <OTP_Read+0x2a>
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	4a09      	ldr	r2, [pc, #36]	; (800baf8 <OTP_Read+0x4c>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d1f2      	bne.n	800babc <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	3307      	adds	r3, #7
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	79fa      	ldrb	r2, [r7, #7]
 800bade:	429a      	cmp	r2, r3
 800bae0:	d001      	beq.n	800bae6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800bae2:	2300      	movs	r3, #0
 800bae4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800bae6:	68fb      	ldr	r3, [r7, #12]
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3714      	adds	r7, #20
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr
 800baf4:	1fff73f8 	.word	0x1fff73f8
 800baf8:	1fff7000 	.word	0x1fff7000

0800bafc <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b083      	sub	sp, #12
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	605a      	str	r2, [r3, #4]
}
 800bb10:	bf00      	nop
 800bb12:	370c      	adds	r7, #12
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b087      	sub	sp, #28
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb24:	f3ef 8310 	mrs	r3, PRIMASK
 800bb28:	60fb      	str	r3, [r7, #12]
  return(result);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bb2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800bb2e:	b672      	cpsid	i
}
 800bb30:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	687a      	ldr	r2, [r7, #4]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d102      	bne.n	800bb42 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	75fb      	strb	r3, [r7, #23]
 800bb40:	e001      	b.n	800bb46 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800bb42:	2300      	movs	r3, #0
 800bb44:	75fb      	strb	r3, [r7, #23]
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	f383 8810 	msr	PRIMASK, r3
}
 800bb50:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800bb52:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	371c      	adds	r7, #28
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr

0800bb60 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b087      	sub	sp, #28
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
 800bb68:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb6a:	f3ef 8310 	mrs	r3, PRIMASK
 800bb6e:	60fb      	str	r3, [r7, #12]
  return(result);
 800bb70:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bb72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bb74:	b672      	cpsid	i
}
 800bb76:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681a      	ldr	r2, [r3, #0]
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	687a      	ldr	r2, [r7, #4]
 800bb84:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	683a      	ldr	r2, [r7, #0]
 800bb8a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	683a      	ldr	r2, [r7, #0]
 800bb92:	605a      	str	r2, [r3, #4]
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	f383 8810 	msr	PRIMASK, r3
}
 800bb9e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bba0:	bf00      	nop
 800bba2:	371c      	adds	r7, #28
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b087      	sub	sp, #28
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bbb6:	f3ef 8310 	mrs	r3, PRIMASK
 800bbba:	60fb      	str	r3, [r7, #12]
  return(result);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bbbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bbc0:	b672      	cpsid	i
}
 800bbc2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	685a      	ldr	r2, [r3, #4]
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	683a      	ldr	r2, [r7, #0]
 800bbd6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	683a      	ldr	r2, [r7, #0]
 800bbde:	601a      	str	r2, [r3, #0]
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	f383 8810 	msr	PRIMASK, r3
}
 800bbea:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bbec:	bf00      	nop
 800bbee:	371c      	adds	r7, #28
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b087      	sub	sp, #28
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc00:	f3ef 8310 	mrs	r3, PRIMASK
 800bc04:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc06:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bc08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc0a:	b672      	cpsid	i
}
 800bc0c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	6812      	ldr	r2, [r2, #0]
 800bc16:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	6852      	ldr	r2, [r2, #4]
 800bc20:	605a      	str	r2, [r3, #4]
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	f383 8810 	msr	PRIMASK, r3
}
 800bc2c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bc2e:	bf00      	nop
 800bc30:	371c      	adds	r7, #28
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr

0800bc3a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800bc3a:	b580      	push	{r7, lr}
 800bc3c:	b086      	sub	sp, #24
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
 800bc42:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc44:	f3ef 8310 	mrs	r3, PRIMASK
 800bc48:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bc4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc4e:	b672      	cpsid	i
}
 800bc50:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f7ff ffca 	bl	800bbf8 <LST_remove_node>
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	f383 8810 	msr	PRIMASK, r3
}
 800bc6e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bc70:	bf00      	nop
 800bc72:	3718      	adds	r7, #24
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b085      	sub	sp, #20
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	60b9      	str	r1, [r7, #8]
 800bc82:	607a      	str	r2, [r7, #4]
 800bc84:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	68ba      	ldr	r2, [r7, #8]
 800bc8a:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2200      	movs	r2, #0
 800bc96:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2200      	movs	r2, #0
 800bca2:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	887a      	ldrh	r2, [r7, #2]
 800bcae:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	7e3a      	ldrb	r2, [r7, #24]
 800bcb4:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800bcb6:	7e3b      	ldrb	r3, [r7, #24]
 800bcb8:	f003 0302 	and.w	r3, r3, #2
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d006      	beq.n	800bcce <CircularQueue_Init+0x56>
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	891b      	ldrh	r3, [r3, #8]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d002      	beq.n	800bcce <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800bcc8:	f04f 33ff 	mov.w	r3, #4294967295
 800bccc:	e000      	b.n	800bcd0 <CircularQueue_Init+0x58>
  }
  return 0;
 800bcce:	2300      	movs	r3, #0
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	3714      	adds	r7, #20
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr

0800bcdc <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b08e      	sub	sp, #56	; 0x38
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	603b      	str	r3, [r7, #0]
 800bce8:	4613      	mov	r3, r2
 800bcea:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800bcec:	2300      	movs	r3, #0
 800bcee:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	62bb      	str	r3, [r7, #40]	; 0x28
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800bd00:	2300      	movs	r3, #0
 800bd02:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800bd04:	2300      	movs	r3, #0
 800bd06:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	891b      	ldrh	r3, [r3, #8]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d101      	bne.n	800bd14 <CircularQueue_Add+0x38>
 800bd10:	2302      	movs	r3, #2
 800bd12:	e000      	b.n	800bd16 <CircularQueue_Add+0x3a>
 800bd14:	2300      	movs	r3, #0
 800bd16:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	695b      	ldr	r3, [r3, #20]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d02a      	beq.n	800bd76 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	891b      	ldrh	r3, [r3, #8]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d123      	bne.n	800bd70 <CircularQueue_Add+0x94>
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	691b      	ldr	r3, [r3, #16]
 800bd30:	4413      	add	r3, r2
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	b29a      	uxth	r2, r3
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	6819      	ldr	r1, [r3, #0]
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	691b      	ldr	r3, [r3, #16]
 800bd3e:	1c58      	adds	r0, r3, #1
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	4298      	cmp	r0, r3
 800bd46:	d306      	bcc.n	800bd56 <CircularQueue_Add+0x7a>
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	6918      	ldr	r0, [r3, #16]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	1ac3      	subs	r3, r0, r3
 800bd52:	3301      	adds	r3, #1
 800bd54:	e002      	b.n	800bd5c <CircularQueue_Add+0x80>
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	691b      	ldr	r3, [r3, #16]
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	440b      	add	r3, r1
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	021b      	lsls	r3, r3, #8
 800bd64:	b29b      	uxth	r3, r3
 800bd66:	4413      	add	r3, r2
 800bd68:	b29b      	uxth	r3, r3
 800bd6a:	3302      	adds	r3, #2
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	e001      	b.n	800bd74 <CircularQueue_Add+0x98>
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	891b      	ldrh	r3, [r3, #8]
 800bd74:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	891b      	ldrh	r3, [r3, #8]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d002      	beq.n	800bd84 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	891b      	ldrh	r3, [r3, #8]
 800bd82:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	691a      	ldr	r2, [r3, #16]
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d307      	bcc.n	800bda0 <CircularQueue_Add+0xc4>
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	685a      	ldr	r2, [r3, #4]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	6919      	ldr	r1, [r3, #16]
 800bd98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bd9a:	440b      	add	r3, r1
 800bd9c:	1ad3      	subs	r3, r2, r3
 800bd9e:	e000      	b.n	800bda2 <CircularQueue_Add+0xc6>
 800bda0:	2300      	movs	r3, #0
 800bda2:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800bda4:	88fa      	ldrh	r2, [r7, #6]
 800bda6:	7ffb      	ldrb	r3, [r7, #31]
 800bda8:	4413      	add	r3, r2
 800bdaa:	461a      	mov	r2, r3
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	fb02 f303 	mul.w	r3, r2, r3
 800bdb2:	69ba      	ldr	r2, [r7, #24]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d80b      	bhi.n	800bdd0 <CircularQueue_Add+0xf4>
 800bdb8:	88fa      	ldrh	r2, [r7, #6]
 800bdba:	7ffb      	ldrb	r3, [r7, #31]
 800bdbc:	4413      	add	r3, r2
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	69bb      	ldr	r3, [r7, #24]
 800bdc2:	fbb3 f1f2 	udiv	r1, r3, r2
 800bdc6:	fb01 f202 	mul.w	r2, r1, r2
 800bdca:	1a9b      	subs	r3, r3, r2
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	e000      	b.n	800bdd2 <CircularQueue_Add+0xf6>
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800bdd4:	7dfa      	ldrb	r2, [r7, #23]
 800bdd6:	7ffb      	ldrb	r3, [r7, #31]
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	bf8c      	ite	hi
 800bddc:	2301      	movhi	r3, #1
 800bdde:	2300      	movls	r3, #0
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800bde4:	7fbb      	ldrb	r3, [r7, #30]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d008      	beq.n	800bdfc <CircularQueue_Add+0x120>
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	7f1b      	ldrb	r3, [r3, #28]
 800bdee:	f003 0301 	and.w	r3, r3, #1
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d002      	beq.n	800bdfc <CircularQueue_Add+0x120>
 800bdf6:	7dfb      	ldrb	r3, [r7, #23]
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	e000      	b.n	800bdfe <CircularQueue_Add+0x122>
 800bdfc:	8bbb      	ldrh	r3, [r7, #28]
 800bdfe:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800be00:	7fbb      	ldrb	r3, [r7, #30]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d008      	beq.n	800be18 <CircularQueue_Add+0x13c>
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	7f1b      	ldrb	r3, [r3, #28]
 800be0a:	f003 0302 	and.w	r3, r3, #2
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d002      	beq.n	800be18 <CircularQueue_Add+0x13c>
 800be12:	7ffb      	ldrb	r3, [r7, #31]
 800be14:	b29b      	uxth	r3, r3
 800be16:	e000      	b.n	800be1a <CircularQueue_Add+0x13e>
 800be18:	8bbb      	ldrh	r3, [r7, #28]
 800be1a:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800be1c:	88fb      	ldrh	r3, [r7, #6]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	f000 817e 	beq.w	800c120 <CircularQueue_Add+0x444>
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	695a      	ldr	r2, [r3, #20]
 800be28:	88f9      	ldrh	r1, [r7, #6]
 800be2a:	7ffb      	ldrb	r3, [r7, #31]
 800be2c:	440b      	add	r3, r1
 800be2e:	4619      	mov	r1, r3
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	fb01 f303 	mul.w	r3, r1, r3
 800be36:	441a      	add	r2, r3
 800be38:	8bbb      	ldrh	r3, [r7, #28]
 800be3a:	441a      	add	r2, r3
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	429a      	cmp	r2, r3
 800be42:	f200 816d 	bhi.w	800c120 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800be46:	2300      	movs	r3, #0
 800be48:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be4a:	e14a      	b.n	800c0e2 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	691a      	ldr	r2, [r3, #16]
 800be50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800be52:	441a      	add	r2, r3
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d307      	bcc.n	800be6c <CircularQueue_Add+0x190>
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	691a      	ldr	r2, [r3, #16]
 800be60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800be62:	441a      	add	r2, r3
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	685b      	ldr	r3, [r3, #4]
 800be68:	1ad3      	subs	r3, r2, r3
 800be6a:	e003      	b.n	800be74 <CircularQueue_Add+0x198>
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	691a      	ldr	r2, [r3, #16]
 800be70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800be72:	4413      	add	r3, r2
 800be74:	68fa      	ldr	r2, [r7, #12]
 800be76:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	691b      	ldr	r3, [r3, #16]
 800be7c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	891b      	ldrh	r3, [r3, #8]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d130      	bne.n	800bee8 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681a      	ldr	r2, [r3, #0]
 800be8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8c:	1c59      	adds	r1, r3, #1
 800be8e:	6339      	str	r1, [r7, #48]	; 0x30
 800be90:	4413      	add	r3, r2
 800be92:	88fa      	ldrh	r2, [r7, #6]
 800be94:	b2d2      	uxtb	r2, r2
 800be96:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d304      	bcc.n	800beac <CircularQueue_Add+0x1d0>
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bea8:	1ad3      	subs	r3, r2, r3
 800beaa:	e000      	b.n	800beae <CircularQueue_Add+0x1d2>
 800beac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beae:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800beb0:	88fb      	ldrh	r3, [r7, #6]
 800beb2:	0a1b      	lsrs	r3, r3, #8
 800beb4:	b298      	uxth	r0, r3
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681a      	ldr	r2, [r3, #0]
 800beba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bebc:	1c59      	adds	r1, r3, #1
 800bebe:	6339      	str	r1, [r7, #48]	; 0x30
 800bec0:	4413      	add	r3, r2
 800bec2:	b2c2      	uxtb	r2, r0
 800bec4:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800becc:	429a      	cmp	r2, r3
 800bece:	d304      	bcc.n	800beda <CircularQueue_Add+0x1fe>
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bed6:	1ad3      	subs	r3, r2, r3
 800bed8:	e000      	b.n	800bedc <CircularQueue_Add+0x200>
 800beda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bedc:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	695b      	ldr	r3, [r3, #20]
 800bee2:	1c9a      	adds	r2, r3, #2
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800bee8:	88fa      	ldrh	r2, [r7, #6]
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	6859      	ldr	r1, [r3, #4]
 800beee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef0:	1acb      	subs	r3, r1, r3
 800bef2:	4293      	cmp	r3, r2
 800bef4:	bf28      	it	cs
 800bef6:	4613      	movcs	r3, r2
 800bef8:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800befa:	88fb      	ldrh	r3, [r7, #6]
 800befc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800befe:	429a      	cmp	r2, r3
 800bf00:	d007      	beq.n	800bf12 <CircularQueue_Add+0x236>
 800bf02:	88fb      	ldrh	r3, [r7, #6]
 800bf04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d225      	bcs.n	800bf56 <CircularQueue_Add+0x27a>
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	7f1b      	ldrb	r3, [r3, #28]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d121      	bne.n	800bf56 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681a      	ldr	r2, [r3, #0]
 800bf16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf18:	18d0      	adds	r0, r2, r3
 800bf1a:	88fb      	ldrh	r3, [r7, #6]
 800bf1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf1e:	fb02 f303 	mul.w	r3, r2, r3
 800bf22:	68ba      	ldr	r2, [r7, #8]
 800bf24:	4413      	add	r3, r2
 800bf26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf28:	4619      	mov	r1, r3
 800bf2a:	f001 fe3d 	bl	800dba8 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	695a      	ldr	r2, [r3, #20]
 800bf32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf34:	441a      	add	r2, r3
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800bf3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf40:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800bf42:	88fa      	ldrh	r2, [r7, #6]
 800bf44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf46:	1ad3      	subs	r3, r2, r3
 800bf48:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800bf4a:	7ffb      	ldrb	r3, [r7, #31]
 800bf4c:	b29a      	uxth	r2, r3
 800bf4e:	88fb      	ldrh	r3, [r7, #6]
 800bf50:	4413      	add	r3, r2
 800bf52:	86fb      	strh	r3, [r7, #54]	; 0x36
 800bf54:	e0a4      	b.n	800c0a0 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800bf56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	f000 80a1 	beq.w	800c0a0 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	7f1b      	ldrb	r3, [r3, #28]
 800bf62:	f003 0301 	and.w	r3, r3, #1
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d03a      	beq.n	800bfe0 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	891b      	ldrh	r3, [r3, #8]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d10d      	bne.n	800bf8e <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681a      	ldr	r2, [r3, #0]
 800bf76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf78:	3b02      	subs	r3, #2
 800bf7a:	4413      	add	r3, r2
 800bf7c:	22ff      	movs	r2, #255	; 0xff
 800bf7e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681a      	ldr	r2, [r3, #0]
 800bf84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf86:	3b01      	subs	r3, #1
 800bf88:	4413      	add	r3, r2
 800bf8a:	22ff      	movs	r2, #255	; 0xff
 800bf8c:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	695a      	ldr	r2, [r3, #20]
 800bf92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf94:	441a      	add	r2, r3
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800bf9e:	88fb      	ldrh	r3, [r7, #6]
 800bfa0:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	891b      	ldrh	r3, [r3, #8]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d16f      	bne.n	800c08e <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681a      	ldr	r2, [r3, #0]
 800bfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb4:	1c59      	adds	r1, r3, #1
 800bfb6:	6339      	str	r1, [r7, #48]	; 0x30
 800bfb8:	4413      	add	r3, r2
 800bfba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfbc:	b2d2      	uxtb	r2, r2
 800bfbe:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800bfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc2:	0a18      	lsrs	r0, r3, #8
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfca:	1c59      	adds	r1, r3, #1
 800bfcc:	6339      	str	r1, [r7, #48]	; 0x30
 800bfce:	4413      	add	r3, r2
 800bfd0:	b2c2      	uxtb	r2, r0
 800bfd2:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	695b      	ldr	r3, [r3, #20]
 800bfd8:	1c9a      	adds	r2, r3, #2
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	615a      	str	r2, [r3, #20]
 800bfde:	e056      	b.n	800c08e <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	7f1b      	ldrb	r3, [r3, #28]
 800bfe4:	f003 0302 	and.w	r3, r3, #2
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d050      	beq.n	800c08e <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	891b      	ldrh	r3, [r3, #8]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d14a      	bne.n	800c08a <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffa:	3b02      	subs	r3, #2
 800bffc:	4413      	add	r3, r2
 800bffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c000:	b2d2      	uxtb	r2, r2
 800c002:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800c004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c006:	0a19      	lsrs	r1, r3, #8
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00e:	3b01      	subs	r3, #1
 800c010:	4413      	add	r3, r2
 800c012:	b2ca      	uxtb	r2, r1
 800c014:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681a      	ldr	r2, [r3, #0]
 800c01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01c:	18d0      	adds	r0, r2, r3
 800c01e:	88fb      	ldrh	r3, [r7, #6]
 800c020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c022:	fb02 f303 	mul.w	r3, r2, r3
 800c026:	68ba      	ldr	r2, [r7, #8]
 800c028:	4413      	add	r3, r2
 800c02a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c02c:	4619      	mov	r1, r3
 800c02e:	f001 fdbb 	bl	800dba8 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	695a      	ldr	r2, [r3, #20]
 800c036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c038:	441a      	add	r2, r3
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800c03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c040:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800c042:	88fa      	ldrh	r2, [r7, #6]
 800c044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c046:	1ad3      	subs	r3, r2, r3
 800c048:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	699b      	ldr	r3, [r3, #24]
 800c04e:	1c5a      	adds	r2, r3, #1
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800c054:	2300      	movs	r3, #0
 800c056:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681a      	ldr	r2, [r3, #0]
 800c05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05e:	1c59      	adds	r1, r3, #1
 800c060:	6339      	str	r1, [r7, #48]	; 0x30
 800c062:	4413      	add	r3, r2
 800c064:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c066:	b2d2      	uxtb	r2, r2
 800c068:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800c06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06c:	0a18      	lsrs	r0, r3, #8
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c074:	1c59      	adds	r1, r3, #1
 800c076:	6339      	str	r1, [r7, #48]	; 0x30
 800c078:	4413      	add	r3, r2
 800c07a:	b2c2      	uxtb	r2, r0
 800c07c:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	695b      	ldr	r3, [r3, #20]
 800c082:	1c9a      	adds	r2, r3, #2
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	615a      	str	r2, [r3, #20]
 800c088:	e001      	b.n	800c08e <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800c08a:	2300      	movs	r3, #0
 800c08c:	e049      	b.n	800c122 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800c08e:	7ffb      	ldrb	r3, [r7, #31]
 800c090:	b29a      	uxth	r2, r3
 800c092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c094:	b29b      	uxth	r3, r3
 800c096:	4413      	add	r3, r2
 800c098:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2200      	movs	r2, #0
 800c09e:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800c0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d015      	beq.n	800c0d2 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681a      	ldr	r2, [r3, #0]
 800c0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ac:	18d0      	adds	r0, r2, r3
 800c0ae:	88fb      	ldrh	r3, [r7, #6]
 800c0b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0b2:	fb03 f202 	mul.w	r2, r3, r2
 800c0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b8:	4413      	add	r3, r2
 800c0ba:	68ba      	ldr	r2, [r7, #8]
 800c0bc:	4413      	add	r3, r2
 800c0be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	f001 fd71 	bl	800dba8 <memcpy>
        q->byteCount += NbBytesToCopy;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	695a      	ldr	r2, [r3, #20]
 800c0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0cc:	441a      	add	r2, r3
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	699b      	ldr	r3, [r3, #24]
 800c0d6:	1c5a      	adds	r2, r3, #1
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800c0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0de:	3301      	adds	r3, #1
 800c0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	f4ff aeb0 	bcc.w	800be4c <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681a      	ldr	r2, [r3, #0]
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	6919      	ldr	r1, [r3, #16]
 800c0f4:	7ffb      	ldrb	r3, [r7, #31]
 800c0f6:	4419      	add	r1, r3
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	4299      	cmp	r1, r3
 800c0fe:	d307      	bcc.n	800c110 <CircularQueue_Add+0x434>
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	6919      	ldr	r1, [r3, #16]
 800c104:	7ffb      	ldrb	r3, [r7, #31]
 800c106:	4419      	add	r1, r3
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	1acb      	subs	r3, r1, r3
 800c10e:	e003      	b.n	800c118 <CircularQueue_Add+0x43c>
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	6919      	ldr	r1, [r3, #16]
 800c114:	7ffb      	ldrb	r3, [r7, #31]
 800c116:	440b      	add	r3, r1
 800c118:	4413      	add	r3, r2
 800c11a:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800c11c:	6a3b      	ldr	r3, [r7, #32]
 800c11e:	e000      	b.n	800c122 <CircularQueue_Add+0x446>
    return NULL;
 800c120:	2300      	movs	r3, #0
}
 800c122:	4618      	mov	r0, r3
 800c124:	3738      	adds	r7, #56	; 0x38
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}

0800c12a <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800c12a:	b480      	push	{r7}
 800c12c:	b085      	sub	sp, #20
 800c12e:	af00      	add	r7, sp, #0
 800c130:	6078      	str	r0, [r7, #4]
 800c132:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800c134:	2300      	movs	r3, #0
 800c136:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800c138:	2300      	movs	r3, #0
 800c13a:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	891b      	ldrh	r3, [r3, #8]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d101      	bne.n	800c148 <CircularQueue_Remove+0x1e>
 800c144:	2302      	movs	r3, #2
 800c146:	e000      	b.n	800c14a <CircularQueue_Remove+0x20>
 800c148:	2300      	movs	r3, #0
 800c14a:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800c14c:	2300      	movs	r3, #0
 800c14e:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	695b      	ldr	r3, [r3, #20]
 800c154:	2b00      	cmp	r3, #0
 800c156:	f000 80cc 	beq.w	800c2f2 <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	891b      	ldrh	r3, [r3, #8]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d121      	bne.n	800c1a6 <CircularQueue_Remove+0x7c>
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681a      	ldr	r2, [r3, #0]
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	4413      	add	r3, r2
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	b29a      	uxth	r2, r3
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6819      	ldr	r1, [r3, #0]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	1c58      	adds	r0, r3, #1
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	4298      	cmp	r0, r3
 800c180:	d306      	bcc.n	800c190 <CircularQueue_Remove+0x66>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	68d8      	ldr	r0, [r3, #12]
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	685b      	ldr	r3, [r3, #4]
 800c18a:	1ac3      	subs	r3, r0, r3
 800c18c:	3301      	adds	r3, #1
 800c18e:	e002      	b.n	800c196 <CircularQueue_Remove+0x6c>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	3301      	adds	r3, #1
 800c196:	440b      	add	r3, r1
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	021b      	lsls	r3, r3, #8
 800c19e:	b29b      	uxth	r3, r3
 800c1a0:	4413      	add	r3, r2
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	e001      	b.n	800c1aa <CircularQueue_Remove+0x80>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	891b      	ldrh	r3, [r3, #8]
 800c1aa:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	7f1b      	ldrb	r3, [r3, #28]
 800c1b0:	f003 0301 	and.w	r3, r3, #1
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d057      	beq.n	800c268 <CircularQueue_Remove+0x13e>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	7f1b      	ldrb	r3, [r3, #28]
 800c1bc:	f003 0302 	and.w	r3, r3, #2
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d151      	bne.n	800c268 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c1c4:	897b      	ldrh	r3, [r7, #10]
 800c1c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d103      	bne.n	800c1d6 <CircularQueue_Remove+0xac>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	891b      	ldrh	r3, [r3, #8]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d012      	beq.n	800c1fc <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	68da      	ldr	r2, [r3, #12]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d942      	bls.n	800c268 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	891b      	ldrh	r3, [r3, #8]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d03e      	beq.n	800c268 <CircularQueue_Remove+0x13e>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	685a      	ldr	r2, [r3, #4]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	68db      	ldr	r3, [r3, #12]
 800c1f2:	1ad3      	subs	r3, r2, r3
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	8912      	ldrh	r2, [r2, #8]
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d235      	bcs.n	800c268 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	695a      	ldr	r2, [r3, #20]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	68d9      	ldr	r1, [r3, #12]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	1acb      	subs	r3, r1, r3
 800c20a:	441a      	add	r2, r3
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2200      	movs	r2, #0
 800c214:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	891b      	ldrh	r3, [r3, #8]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d121      	bne.n	800c262 <CircularQueue_Remove+0x138>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681a      	ldr	r2, [r3, #0]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	68db      	ldr	r3, [r3, #12]
 800c226:	4413      	add	r3, r2
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	b29a      	uxth	r2, r3
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6819      	ldr	r1, [r3, #0]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	68db      	ldr	r3, [r3, #12]
 800c234:	1c58      	adds	r0, r3, #1
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	4298      	cmp	r0, r3
 800c23c:	d306      	bcc.n	800c24c <CircularQueue_Remove+0x122>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	68d8      	ldr	r0, [r3, #12]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	1ac3      	subs	r3, r0, r3
 800c248:	3301      	adds	r3, #1
 800c24a:	e002      	b.n	800c252 <CircularQueue_Remove+0x128>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	68db      	ldr	r3, [r3, #12]
 800c250:	3301      	adds	r3, #1
 800c252:	440b      	add	r3, r1
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	b29b      	uxth	r3, r3
 800c258:	021b      	lsls	r3, r3, #8
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	4413      	add	r3, r2
 800c25e:	b29b      	uxth	r3, r3
 800c260:	e001      	b.n	800c266 <CircularQueue_Remove+0x13c>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	891b      	ldrh	r3, [r3, #8]
 800c266:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681a      	ldr	r2, [r3, #0]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	68d9      	ldr	r1, [r3, #12]
 800c270:	7a7b      	ldrb	r3, [r7, #9]
 800c272:	4419      	add	r1, r3
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	4299      	cmp	r1, r3
 800c27a:	d307      	bcc.n	800c28c <CircularQueue_Remove+0x162>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	68d9      	ldr	r1, [r3, #12]
 800c280:	7a7b      	ldrb	r3, [r7, #9]
 800c282:	4419      	add	r1, r3
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	1acb      	subs	r3, r1, r3
 800c28a:	e003      	b.n	800c294 <CircularQueue_Remove+0x16a>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	68d9      	ldr	r1, [r3, #12]
 800c290:	7a7b      	ldrb	r3, [r7, #9]
 800c292:	440b      	add	r3, r1
 800c294:	4413      	add	r3, r2
 800c296:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	695b      	ldr	r3, [r3, #20]
 800c29c:	8979      	ldrh	r1, [r7, #10]
 800c29e:	7a7a      	ldrb	r2, [r7, #9]
 800c2a0:	440a      	add	r2, r1
 800c2a2:	1a9a      	subs	r2, r3, r2
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	695b      	ldr	r3, [r3, #20]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d01b      	beq.n	800c2e8 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	68da      	ldr	r2, [r3, #12]
 800c2b4:	897b      	ldrh	r3, [r7, #10]
 800c2b6:	441a      	add	r2, r3
 800c2b8:	7a7b      	ldrb	r3, [r7, #9]
 800c2ba:	441a      	add	r2, r3
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d309      	bcc.n	800c2d8 <CircularQueue_Remove+0x1ae>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	68da      	ldr	r2, [r3, #12]
 800c2c8:	897b      	ldrh	r3, [r7, #10]
 800c2ca:	441a      	add	r2, r3
 800c2cc:	7a7b      	ldrb	r3, [r7, #9]
 800c2ce:	441a      	add	r2, r3
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	1ad3      	subs	r3, r2, r3
 800c2d6:	e005      	b.n	800c2e4 <CircularQueue_Remove+0x1ba>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	68da      	ldr	r2, [r3, #12]
 800c2dc:	897b      	ldrh	r3, [r7, #10]
 800c2de:	441a      	add	r2, r3
 800c2e0:	7a7b      	ldrb	r3, [r7, #9]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	699b      	ldr	r3, [r3, #24]
 800c2ec:	1e5a      	subs	r2, r3, #1
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d002      	beq.n	800c2fe <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	897a      	ldrh	r2, [r7, #10]
 800c2fc:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
}
 800c300:	4618      	mov	r0, r3
 800c302:	3714      	adds	r7, #20
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr

0800c30c <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b087      	sub	sp, #28
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800c316:	2300      	movs	r3, #0
 800c318:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800c31a:	2300      	movs	r3, #0
 800c31c:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	891b      	ldrh	r3, [r3, #8]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d101      	bne.n	800c32a <CircularQueue_Sense+0x1e>
 800c326:	2302      	movs	r3, #2
 800c328:	e000      	b.n	800c32c <CircularQueue_Sense+0x20>
 800c32a:	2300      	movs	r3, #0
 800c32c:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800c32e:	2300      	movs	r3, #0
 800c330:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800c332:	2300      	movs	r3, #0
 800c334:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	695b      	ldr	r3, [r3, #20]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	f000 8090 	beq.w	800c460 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	891b      	ldrh	r3, [r3, #8]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d121      	bne.n	800c392 <CircularQueue_Sense+0x86>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	68db      	ldr	r3, [r3, #12]
 800c356:	4413      	add	r3, r2
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	b29a      	uxth	r2, r3
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6819      	ldr	r1, [r3, #0]
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	68db      	ldr	r3, [r3, #12]
 800c364:	1c58      	adds	r0, r3, #1
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	4298      	cmp	r0, r3
 800c36c:	d306      	bcc.n	800c37c <CircularQueue_Sense+0x70>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	68d8      	ldr	r0, [r3, #12]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	1ac3      	subs	r3, r0, r3
 800c378:	3301      	adds	r3, #1
 800c37a:	e002      	b.n	800c382 <CircularQueue_Sense+0x76>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	68db      	ldr	r3, [r3, #12]
 800c380:	3301      	adds	r3, #1
 800c382:	440b      	add	r3, r1
 800c384:	781b      	ldrb	r3, [r3, #0]
 800c386:	b29b      	uxth	r3, r3
 800c388:	021b      	lsls	r3, r3, #8
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	4413      	add	r3, r2
 800c38e:	b29b      	uxth	r3, r3
 800c390:	e001      	b.n	800c396 <CircularQueue_Sense+0x8a>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	891b      	ldrh	r3, [r3, #8]
 800c396:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	7f1b      	ldrb	r3, [r3, #28]
 800c39c:	f003 0301 	and.w	r3, r3, #1
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d048      	beq.n	800c436 <CircularQueue_Sense+0x12a>
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	7f1b      	ldrb	r3, [r3, #28]
 800c3a8:	f003 0302 	and.w	r3, r3, #2
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d142      	bne.n	800c436 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c3b0:	8a7b      	ldrh	r3, [r7, #18]
 800c3b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d103      	bne.n	800c3c2 <CircularQueue_Sense+0xb6>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	891b      	ldrh	r3, [r3, #8]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d012      	beq.n	800c3e8 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	68da      	ldr	r2, [r3, #12]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d933      	bls.n	800c436 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	891b      	ldrh	r3, [r3, #8]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d02f      	beq.n	800c436 <CircularQueue_Sense+0x12a>
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	685a      	ldr	r2, [r3, #4]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	68db      	ldr	r3, [r3, #12]
 800c3de:	1ad3      	subs	r3, r2, r3
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	8912      	ldrh	r2, [r2, #8]
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d226      	bcs.n	800c436 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	891b      	ldrh	r3, [r3, #8]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d11d      	bne.n	800c430 <CircularQueue_Sense+0x124>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681a      	ldr	r2, [r3, #0]
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	4413      	add	r3, r2
 800c3fc:	781b      	ldrb	r3, [r3, #0]
 800c3fe:	b29a      	uxth	r2, r3
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6819      	ldr	r1, [r3, #0]
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	1c58      	adds	r0, r3, #1
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	4298      	cmp	r0, r3
 800c40e:	d305      	bcc.n	800c41c <CircularQueue_Sense+0x110>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	68f8      	ldr	r0, [r7, #12]
 800c416:	1ac3      	subs	r3, r0, r3
 800c418:	3301      	adds	r3, #1
 800c41a:	e001      	b.n	800c420 <CircularQueue_Sense+0x114>
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	3301      	adds	r3, #1
 800c420:	440b      	add	r3, r1
 800c422:	781b      	ldrb	r3, [r3, #0]
 800c424:	b29b      	uxth	r3, r3
 800c426:	021b      	lsls	r3, r3, #8
 800c428:	b29b      	uxth	r3, r3
 800c42a:	4413      	add	r3, r2
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	e001      	b.n	800c434 <CircularQueue_Sense+0x128>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	891b      	ldrh	r3, [r3, #8]
 800c434:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681a      	ldr	r2, [r3, #0]
 800c43a:	7af9      	ldrb	r1, [r7, #11]
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	4419      	add	r1, r3
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	685b      	ldr	r3, [r3, #4]
 800c444:	4299      	cmp	r1, r3
 800c446:	d306      	bcc.n	800c456 <CircularQueue_Sense+0x14a>
 800c448:	7af9      	ldrb	r1, [r7, #11]
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	4419      	add	r1, r3
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	1acb      	subs	r3, r1, r3
 800c454:	e002      	b.n	800c45c <CircularQueue_Sense+0x150>
 800c456:	7af9      	ldrb	r1, [r7, #11]
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	440b      	add	r3, r1
 800c45c:	4413      	add	r3, r2
 800c45e:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d002      	beq.n	800c46c <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	8a7a      	ldrh	r2, [r7, #18]
 800c46a:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800c46c:	697b      	ldr	r3, [r7, #20]
}
 800c46e:	4618      	mov	r0, r3
 800c470:	371c      	adds	r7, #28
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr
	...

0800c47c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800c47c:	b480      	push	{r7}
 800c47e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800c480:	4b03      	ldr	r3, [pc, #12]	; (800c490 <LL_FLASH_GetUDN+0x14>)
 800c482:	681b      	ldr	r3, [r3, #0]
}
 800c484:	4618      	mov	r0, r3
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr
 800c48e:	bf00      	nop
 800c490:	1fff7580 	.word	0x1fff7580

0800c494 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800c494:	b480      	push	{r7}
 800c496:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800c498:	4b03      	ldr	r3, [pc, #12]	; (800c4a8 <LL_FLASH_GetDeviceID+0x14>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	b2db      	uxtb	r3, r3
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr
 800c4a8:	1fff7584 	.word	0x1fff7584

0800c4ac <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800c4b0:	4b03      	ldr	r3, [pc, #12]	; (800c4c0 <LL_FLASH_GetSTCompanyID+0x14>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	0a1b      	lsrs	r3, r3, #8
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr
 800c4c0:	1fff7584 	.word	0x1fff7584

0800c4c4 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800c4c4:	b5b0      	push	{r4, r5, r7, lr}
 800c4c6:	b090      	sub	sp, #64	; 0x40
 800c4c8:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c4ca:	2392      	movs	r3, #146	; 0x92
 800c4cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800c4d0:	4b31      	ldr	r3, [pc, #196]	; (800c598 <APP_BLE_Init+0xd4>)
 800c4d2:	1d3c      	adds	r4, r7, #4
 800c4d4:	461d      	mov	r5, r3
 800c4d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c4d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c4da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c4dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c4de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c4e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c4e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c4e6:	c403      	stmia	r4!, {r0, r1}
 800c4e8:	7022      	strb	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800c4ea:	f000 fa29 	bl	800c940 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800c4ee:	2101      	movs	r1, #1
 800c4f0:	2002      	movs	r0, #2
 800c4f2:	f001 f8c1 	bl	800d678 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800c4f6:	4a29      	ldr	r2, [pc, #164]	; (800c59c <APP_BLE_Init+0xd8>)
 800c4f8:	2100      	movs	r1, #0
 800c4fa:	2002      	movs	r0, #2
 800c4fc:	f001 f9e8 	bl	800d8d0 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800c500:	1d3b      	adds	r3, r7, #4
 800c502:	4618      	mov	r0, r3
 800c504:	f7fe fc18 	bl	800ad38 <SHCI_C2_BLE_Init>
 800c508:	4603      	mov	r3, r0
 800c50a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800c50e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800c512:	2b00      	cmp	r3, #0
 800c514:	d008      	beq.n	800c528 <APP_BLE_Init+0x64>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800c516:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800c51a:	4619      	mov	r1, r3
 800c51c:	4820      	ldr	r0, [pc, #128]	; (800c5a0 <APP_BLE_Init+0xdc>)
 800c51e:	f001 fb59 	bl	800dbd4 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800c522:	f7f6 fb71 	bl	8002c08 <Error_Handler>
 800c526:	e002      	b.n	800c52e <APP_BLE_Init+0x6a>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800c528:	481e      	ldr	r0, [pc, #120]	; (800c5a4 <APP_BLE_Init+0xe0>)
 800c52a:	f001 fb53 	bl	800dbd4 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800c52e:	f000 fa1d 	bl	800c96c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800c532:	f7fe fb5b 	bl	800abec <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c536:	4b1c      	ldr	r3, [pc, #112]	; (800c5a8 <APP_BLE_Init+0xe4>)
 800c538:	2200      	movs	r2, #0
 800c53a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800c53e:	4b1a      	ldr	r3, [pc, #104]	; (800c5a8 <APP_BLE_Init+0xe4>)
 800c540:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c544:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800c546:	4a19      	ldr	r2, [pc, #100]	; (800c5ac <APP_BLE_Init+0xe8>)
 800c548:	2100      	movs	r1, #0
 800c54a:	2001      	movs	r0, #1
 800c54c:	f001 f9c0 	bl	800d8d0 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800c550:	2006      	movs	r0, #6
 800c552:	f7fe f9be 	bl	800a8d2 <aci_hal_set_radio_activity_mask>
 800c556:	4603      	mov	r3, r0
 800c558:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800c55c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c560:	2b00      	cmp	r3, #0
 800c562:	d006      	beq.n	800c572 <APP_BLE_Init+0xae>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800c564:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c568:	4619      	mov	r1, r3
 800c56a:	4811      	ldr	r0, [pc, #68]	; (800c5b0 <APP_BLE_Init+0xec>)
 800c56c:	f001 fb32 	bl	800dbd4 <iprintf>
 800c570:	e002      	b.n	800c578 <APP_BLE_Init+0xb4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800c572:	4810      	ldr	r0, [pc, #64]	; (800c5b4 <APP_BLE_Init+0xf0>)
 800c574:	f001 fb2e 	bl	800dbd4 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800c578:	f000 fcda 	bl	800cf30 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800c57c:	4b0a      	ldr	r3, [pc, #40]	; (800c5a8 <APP_BLE_Init+0xe4>)
 800c57e:	2200      	movs	r2, #0
 800c580:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800c582:	4b09      	ldr	r3, [pc, #36]	; (800c5a8 <APP_BLE_Init+0xe4>)
 800c584:	2200      	movs	r2, #0
 800c586:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800c588:	2001      	movs	r0, #1
 800c58a:	f000 fb7d 	bl	800cc88 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800c58e:	bf00      	nop
}
 800c590:	3740      	adds	r7, #64	; 0x40
 800c592:	46bd      	mov	sp, r7
 800c594:	bdb0      	pop	{r4, r5, r7, pc}
 800c596:	bf00      	nop
 800c598:	0800f114 	.word	0x0800f114
 800c59c:	0800af55 	.word	0x0800af55
 800c5a0:	0800f038 	.word	0x0800f038
 800c5a4:	0800f070 	.word	0x0800f070
 800c5a8:	20002828 	.word	0x20002828
 800c5ac:	0800cdb1 	.word	0x0800cdb1
 800c5b0:	0800f098 	.word	0x0800f098
 800c5b4:	0800f0dc 	.word	0x0800f0dc

0800c5b8 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800c5b8:	b5b0      	push	{r4, r5, r7, lr}
 800c5ba:	b08e      	sub	sp, #56	; 0x38
 800c5bc:	af04      	add	r7, sp, #16
 800c5be:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800c5c0:	2392      	movs	r3, #146	; 0x92
 800c5c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800c5cc:	6a3b      	ldr	r3, [r7, #32]
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	2bff      	cmp	r3, #255	; 0xff
 800c5d2:	f000 80d7 	beq.w	800c784 <SVCCTL_App_Notification+0x1cc>
 800c5d6:	2bff      	cmp	r3, #255	; 0xff
 800c5d8:	f300 81aa 	bgt.w	800c930 <SVCCTL_App_Notification+0x378>
 800c5dc:	2b05      	cmp	r3, #5
 800c5de:	d002      	beq.n	800c5e6 <SVCCTL_App_Notification+0x2e>
 800c5e0:	2b3e      	cmp	r3, #62	; 0x3e
 800c5e2:	d02e      	beq.n	800c642 <SVCCTL_App_Notification+0x8a>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800c5e4:	e1a4      	b.n	800c930 <SVCCTL_App_Notification+0x378>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800c5e6:	6a3b      	ldr	r3, [r7, #32]
 800c5e8:	3302      	adds	r3, #2
 800c5ea:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c5f2:	b29a      	uxth	r2, r3
 800c5f4:	4bb5      	ldr	r3, [pc, #724]	; (800c8cc <SVCCTL_App_Notification+0x314>)
 800c5f6:	8adb      	ldrh	r3, [r3, #22]
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d114      	bne.n	800c626 <SVCCTL_App_Notification+0x6e>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800c5fc:	4bb3      	ldr	r3, [pc, #716]	; (800c8cc <SVCCTL_App_Notification+0x314>)
 800c5fe:	2200      	movs	r2, #0
 800c600:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c602:	4bb2      	ldr	r3, [pc, #712]	; (800c8cc <SVCCTL_App_Notification+0x314>)
 800c604:	2200      	movs	r2, #0
 800c606:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800c60a:	48b1      	ldr	r0, [pc, #708]	; (800c8d0 <SVCCTL_App_Notification+0x318>)
 800c60c:	f001 fb7e 	bl	800dd0c <puts>
                    p_disconnection_complete_event->Connection_Handle,
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c616:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800c618:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800c61e:	461a      	mov	r2, r3
 800c620:	48ac      	ldr	r0, [pc, #688]	; (800c8d4 <SVCCTL_App_Notification+0x31c>)
 800c622:	f001 fad7 	bl	800dbd4 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800c626:	2001      	movs	r0, #1
 800c628:	f000 fb2e 	bl	800cc88 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800c62c:	4baa      	ldr	r3, [pc, #680]	; (800c8d8 <SVCCTL_App_Notification+0x320>)
 800c62e:	2201      	movs	r2, #1
 800c630:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800c632:	4ba6      	ldr	r3, [pc, #664]	; (800c8cc <SVCCTL_App_Notification+0x314>)
 800c634:	8ada      	ldrh	r2, [r3, #22]
 800c636:	4ba8      	ldr	r3, [pc, #672]	; (800c8d8 <SVCCTL_App_Notification+0x320>)
 800c638:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800c63a:	48a7      	ldr	r0, [pc, #668]	; (800c8d8 <SVCCTL_App_Notification+0x320>)
 800c63c:	f000 fc5a 	bl	800cef4 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800c640:	e179      	b.n	800c936 <SVCCTL_App_Notification+0x37e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800c642:	6a3b      	ldr	r3, [r7, #32]
 800c644:	3302      	adds	r3, #2
 800c646:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d02e      	beq.n	800c6ae <SVCCTL_App_Notification+0xf6>
 800c650:	2b03      	cmp	r3, #3
 800c652:	f040 8095 	bne.w	800c780 <SVCCTL_App_Notification+0x1c8>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	3301      	adds	r3, #1
 800c65a:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800c65c:	489f      	ldr	r0, [pc, #636]	; (800c8dc <SVCCTL_App_Notification+0x324>)
 800c65e:	f001 fb55 	bl	800dd0c <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800c668:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7f4 f85c 	bl	8000728 <__aeabi_i2d>
 800c670:	f04f 0200 	mov.w	r2, #0
 800c674:	4b9a      	ldr	r3, [pc, #616]	; (800c8e0 <SVCCTL_App_Notification+0x328>)
 800c676:	f7f3 fddb 	bl	8000230 <__aeabi_dmul>
 800c67a:	4602      	mov	r2, r0
 800c67c:	460b      	mov	r3, r1
 800c67e:	4610      	mov	r0, r2
 800c680:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800c688:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800c68a:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c692:	b29b      	uxth	r3, r3
 800c694:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800c696:	4613      	mov	r3, r2
 800c698:	009b      	lsls	r3, r3, #2
 800c69a:	4413      	add	r3, r2
 800c69c:	005b      	lsls	r3, r3, #1
 800c69e:	9301      	str	r3, [sp, #4]
 800c6a0:	9400      	str	r4, [sp, #0]
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	460b      	mov	r3, r1
 800c6a6:	488f      	ldr	r0, [pc, #572]	; (800c8e4 <SVCCTL_App_Notification+0x32c>)
 800c6a8:	f001 fa94 	bl	800dbd4 <iprintf>
          break;
 800c6ac:	e069      	b.n	800c782 <SVCCTL_App_Notification+0x1ca>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	4619      	mov	r1, r3
 800c6be:	488a      	ldr	r0, [pc, #552]	; (800c8e8 <SVCCTL_App_Notification+0x330>)
 800c6c0:	f001 fa88 	bl	800dbd4 <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800c6c8:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800c6ce:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800c6d4:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800c6da:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800c6e0:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800c6e6:	9302      	str	r3, [sp, #8]
 800c6e8:	9101      	str	r1, [sp, #4]
 800c6ea:	9200      	str	r2, [sp, #0]
 800c6ec:	462b      	mov	r3, r5
 800c6ee:	4622      	mov	r2, r4
 800c6f0:	4601      	mov	r1, r0
 800c6f2:	487e      	ldr	r0, [pc, #504]	; (800c8ec <SVCCTL_App_Notification+0x334>)
 800c6f4:	f001 fa6e 	bl	800dbd4 <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800c6fe:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800c700:	4618      	mov	r0, r3
 800c702:	f7f4 f811 	bl	8000728 <__aeabi_i2d>
 800c706:	f04f 0200 	mov.w	r2, #0
 800c70a:	4b75      	ldr	r3, [pc, #468]	; (800c8e0 <SVCCTL_App_Notification+0x328>)
 800c70c:	f7f3 fd90 	bl	8000230 <__aeabi_dmul>
 800c710:	4602      	mov	r2, r0
 800c712:	460b      	mov	r3, r1
 800c714:	4610      	mov	r0, r2
 800c716:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800c71e:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800c720:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800c728:	b29b      	uxth	r3, r3
 800c72a:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800c72c:	4613      	mov	r3, r2
 800c72e:	009b      	lsls	r3, r3, #2
 800c730:	4413      	add	r3, r2
 800c732:	005b      	lsls	r3, r3, #1
 800c734:	9301      	str	r3, [sp, #4]
 800c736:	9400      	str	r4, [sp, #0]
 800c738:	4602      	mov	r2, r0
 800c73a:	460b      	mov	r3, r1
 800c73c:	4869      	ldr	r0, [pc, #420]	; (800c8e4 <SVCCTL_App_Notification+0x32c>)
 800c73e:	f001 fa49 	bl	800dbd4 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800c742:	4b62      	ldr	r3, [pc, #392]	; (800c8cc <SVCCTL_App_Notification+0x314>)
 800c744:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c748:	2b04      	cmp	r3, #4
 800c74a:	d104      	bne.n	800c756 <SVCCTL_App_Notification+0x19e>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800c74c:	4b5f      	ldr	r3, [pc, #380]	; (800c8cc <SVCCTL_App_Notification+0x314>)
 800c74e:	2206      	movs	r2, #6
 800c750:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800c754:	e003      	b.n	800c75e <SVCCTL_App_Notification+0x1a6>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800c756:	4b5d      	ldr	r3, [pc, #372]	; (800c8cc <SVCCTL_App_Notification+0x314>)
 800c758:	2205      	movs	r2, #5
 800c75a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c764:	b29a      	uxth	r2, r3
 800c766:	4b59      	ldr	r3, [pc, #356]	; (800c8cc <SVCCTL_App_Notification+0x314>)
 800c768:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800c76a:	4b5b      	ldr	r3, [pc, #364]	; (800c8d8 <SVCCTL_App_Notification+0x320>)
 800c76c:	2200      	movs	r2, #0
 800c76e:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800c770:	4b56      	ldr	r3, [pc, #344]	; (800c8cc <SVCCTL_App_Notification+0x314>)
 800c772:	8ada      	ldrh	r2, [r3, #22]
 800c774:	4b58      	ldr	r3, [pc, #352]	; (800c8d8 <SVCCTL_App_Notification+0x320>)
 800c776:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800c778:	4857      	ldr	r0, [pc, #348]	; (800c8d8 <SVCCTL_App_Notification+0x320>)
 800c77a:	f000 fbbb 	bl	800cef4 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800c77e:	e000      	b.n	800c782 <SVCCTL_App_Notification+0x1ca>
          break;
 800c780:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800c782:	e0d8      	b.n	800c936 <SVCCTL_App_Notification+0x37e>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800c784:	6a3b      	ldr	r3, [r7, #32]
 800c786:	3302      	adds	r3, #2
 800c788:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800c78a:	69fb      	ldr	r3, [r7, #28]
 800c78c:	881b      	ldrh	r3, [r3, #0]
 800c78e:	b29b      	uxth	r3, r3
 800c790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c794:	f000 80c8 	beq.w	800c928 <SVCCTL_App_Notification+0x370>
 800c798:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c79c:	f300 80ca 	bgt.w	800c934 <SVCCTL_App_Notification+0x37c>
 800c7a0:	2b04      	cmp	r3, #4
 800c7a2:	f000 80c3 	beq.w	800c92c <SVCCTL_App_Notification+0x374>
 800c7a6:	2b04      	cmp	r3, #4
 800c7a8:	f2c0 80c4 	blt.w	800c934 <SVCCTL_App_Notification+0x37c>
 800c7ac:	f240 420a 	movw	r2, #1034	; 0x40a
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	f300 80bf 	bgt.w	800c934 <SVCCTL_App_Notification+0x37c>
 800c7b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7ba:	f340 80bb 	ble.w	800c934 <SVCCTL_App_Notification+0x37c>
 800c7be:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800c7c2:	2b09      	cmp	r3, #9
 800c7c4:	f200 80b6 	bhi.w	800c934 <SVCCTL_App_Notification+0x37c>
 800c7c8:	a201      	add	r2, pc, #4	; (adr r2, 800c7d0 <SVCCTL_App_Notification+0x218>)
 800c7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ce:	bf00      	nop
 800c7d0:	0800c895 	.word	0x0800c895
 800c7d4:	0800c809 	.word	0x0800c809
 800c7d8:	0800c935 	.word	0x0800c935
 800c7dc:	0800c935 	.word	0x0800c935
 800c7e0:	0800c935 	.word	0x0800c935
 800c7e4:	0800c935 	.word	0x0800c935
 800c7e8:	0800c7f9 	.word	0x0800c7f9
 800c7ec:	0800c935 	.word	0x0800c935
 800c7f0:	0800c83f 	.word	0x0800c83f
 800c7f4:	0800c801 	.word	0x0800c801
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800c7f8:	483d      	ldr	r0, [pc, #244]	; (800c8f0 <SVCCTL_App_Notification+0x338>)
 800c7fa:	f001 f9eb 	bl	800dbd4 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800c7fe:	e096      	b.n	800c92e <SVCCTL_App_Notification+0x376>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800c800:	483c      	ldr	r0, [pc, #240]	; (800c8f4 <SVCCTL_App_Notification+0x33c>)
 800c802:	f001 fa83 	bl	800dd0c <puts>
          break;
 800c806:	e092      	b.n	800c92e <SVCCTL_App_Notification+0x376>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800c808:	483b      	ldr	r0, [pc, #236]	; (800c8f8 <SVCCTL_App_Notification+0x340>)
 800c80a:	f001 fa7f 	bl	800dd0c <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800c80e:	4b2f      	ldr	r3, [pc, #188]	; (800c8cc <SVCCTL_App_Notification+0x314>)
 800c810:	8adb      	ldrh	r3, [r3, #22]
 800c812:	493a      	ldr	r1, [pc, #232]	; (800c8fc <SVCCTL_App_Notification+0x344>)
 800c814:	4618      	mov	r0, r3
 800c816:	f7fd fab3 	bl	8009d80 <aci_gap_pass_key_resp>
 800c81a:	4603      	mov	r3, r0
 800c81c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800c820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c824:	2b00      	cmp	r3, #0
 800c826:	d006      	beq.n	800c836 <SVCCTL_App_Notification+0x27e>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800c828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c82c:	4619      	mov	r1, r3
 800c82e:	4834      	ldr	r0, [pc, #208]	; (800c900 <SVCCTL_App_Notification+0x348>)
 800c830:	f001 f9d0 	bl	800dbd4 <iprintf>
          break;
 800c834:	e07b      	b.n	800c92e <SVCCTL_App_Notification+0x376>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800c836:	4833      	ldr	r0, [pc, #204]	; (800c904 <SVCCTL_App_Notification+0x34c>)
 800c838:	f001 fa68 	bl	800dd0c <puts>
          break;
 800c83c:	e077      	b.n	800c92e <SVCCTL_App_Notification+0x376>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800c83e:	4832      	ldr	r0, [pc, #200]	; (800c908 <SVCCTL_App_Notification+0x350>)
 800c840:	f001 fa64 	bl	800dd0c <puts>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	3302      	adds	r3, #2
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800c848:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800c84c:	4619      	mov	r1, r3
 800c84e:	482f      	ldr	r0, [pc, #188]	; (800c90c <SVCCTL_App_Notification+0x354>)
 800c850:	f001 f9c0 	bl	800dbd4 <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800c854:	69fb      	ldr	r3, [r7, #28]
 800c856:	3302      	adds	r3, #2
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800c858:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800c85c:	4619      	mov	r1, r3
 800c85e:	482c      	ldr	r0, [pc, #176]	; (800c910 <SVCCTL_App_Notification+0x358>)
 800c860:	f001 f9b8 	bl	800dbd4 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800c864:	4b19      	ldr	r3, [pc, #100]	; (800c8cc <SVCCTL_App_Notification+0x314>)
 800c866:	8adb      	ldrh	r3, [r3, #22]
 800c868:	2101      	movs	r1, #1
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7fd fc32 	bl	800a0d4 <aci_gap_numeric_comparison_value_confirm_yesno>
 800c870:	4603      	mov	r3, r0
 800c872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800c876:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d006      	beq.n	800c88c <SVCCTL_App_Notification+0x2d4>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800c87e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c882:	4619      	mov	r1, r3
 800c884:	4823      	ldr	r0, [pc, #140]	; (800c914 <SVCCTL_App_Notification+0x35c>)
 800c886:	f001 f9a5 	bl	800dbd4 <iprintf>
          break;
 800c88a:	e050      	b.n	800c92e <SVCCTL_App_Notification+0x376>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800c88c:	4822      	ldr	r0, [pc, #136]	; (800c918 <SVCCTL_App_Notification+0x360>)
 800c88e:	f001 fa3d 	bl	800dd0c <puts>
          break;
 800c892:	e04c      	b.n	800c92e <SVCCTL_App_Notification+0x376>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800c894:	69fb      	ldr	r3, [r7, #28]
 800c896:	3302      	adds	r3, #2
 800c898:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800c89a:	4820      	ldr	r0, [pc, #128]	; (800c91c <SVCCTL_App_Notification+0x364>)
 800c89c:	f001 fa36 	bl	800dd0c <puts>
          if (p_pairing_complete->Status != 0)
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	789b      	ldrb	r3, [r3, #2]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d009      	beq.n	800c8bc <SVCCTL_App_Notification+0x304>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800c8a8:	69bb      	ldr	r3, [r7, #24]
 800c8aa:	789b      	ldrb	r3, [r3, #2]
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	69bb      	ldr	r3, [r7, #24]
 800c8b0:	78db      	ldrb	r3, [r3, #3]
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	481a      	ldr	r0, [pc, #104]	; (800c920 <SVCCTL_App_Notification+0x368>)
 800c8b6:	f001 f98d 	bl	800dbd4 <iprintf>
 800c8ba:	e002      	b.n	800c8c2 <SVCCTL_App_Notification+0x30a>
            APP_DBG_MSG("     - Pairing Success\n");
 800c8bc:	4819      	ldr	r0, [pc, #100]	; (800c924 <SVCCTL_App_Notification+0x36c>)
 800c8be:	f001 fa25 	bl	800dd0c <puts>
          APP_DBG_MSG("\n");
 800c8c2:	200a      	movs	r0, #10
 800c8c4:	f001 f99e 	bl	800dc04 <putchar>
          break;
 800c8c8:	e031      	b.n	800c92e <SVCCTL_App_Notification+0x376>
 800c8ca:	bf00      	nop
 800c8cc:	20002828 	.word	0x20002828
 800c8d0:	0800f150 	.word	0x0800f150
 800c8d4:	0800f17c 	.word	0x0800f17c
 800c8d8:	200028ac 	.word	0x200028ac
 800c8dc:	0800f1b8 	.word	0x0800f1b8
 800c8e0:	3ff40000 	.word	0x3ff40000
 800c8e4:	0800f1ec 	.word	0x0800f1ec
 800c8e8:	0800f258 	.word	0x0800f258
 800c8ec:	0800f2a0 	.word	0x0800f2a0
 800c8f0:	0800f2f0 	.word	0x0800f2f0
 800c8f4:	0800f318 	.word	0x0800f318
 800c8f8:	0800f348 	.word	0x0800f348
 800c8fc:	0001b207 	.word	0x0001b207
 800c900:	0800f370 	.word	0x0800f370
 800c904:	0800f3a4 	.word	0x0800f3a4
 800c908:	0800f3cc 	.word	0x0800f3cc
 800c90c:	0800f400 	.word	0x0800f400
 800c910:	0800f41c 	.word	0x0800f41c
 800c914:	0800f434 	.word	0x0800f434
 800c918:	0800f484 	.word	0x0800f484
 800c91c:	0800f4cc 	.word	0x0800f4cc
 800c920:	0800f4f8 	.word	0x0800f4f8
 800c924:	0800f534 	.word	0x0800f534
          break;
 800c928:	bf00      	nop
 800c92a:	e003      	b.n	800c934 <SVCCTL_App_Notification+0x37c>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800c92c:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800c92e:	e001      	b.n	800c934 <SVCCTL_App_Notification+0x37c>
      break;
 800c930:	bf00      	nop
 800c932:	e000      	b.n	800c936 <SVCCTL_App_Notification+0x37e>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800c934:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800c936:	2301      	movs	r3, #1
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3728      	adds	r7, #40	; 0x28
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bdb0      	pop	{r4, r5, r7, pc}

0800c940 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b082      	sub	sp, #8
 800c944:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800c946:	4b06      	ldr	r3, [pc, #24]	; (800c960 <Ble_Tl_Init+0x20>)
 800c948:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800c94a:	4b06      	ldr	r3, [pc, #24]	; (800c964 <Ble_Tl_Init+0x24>)
 800c94c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800c94e:	463b      	mov	r3, r7
 800c950:	4619      	mov	r1, r3
 800c952:	4805      	ldr	r0, [pc, #20]	; (800c968 <Ble_Tl_Init+0x28>)
 800c954:	f7fe fae2 	bl	800af1c <hci_init>

  return;
 800c958:	bf00      	nop
}
 800c95a:	3708      	adds	r7, #8
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	200300d8 	.word	0x200300d8
 800c964:	0800ce85 	.word	0x0800ce85
 800c968:	0800ce4d 	.word	0x0800ce4d

0800c96c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800c96c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c96e:	b08d      	sub	sp, #52	; 0x34
 800c970:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800c972:	2300      	movs	r3, #0
 800c974:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c976:	2392      	movs	r3, #146	; 0x92
 800c978:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800c97a:	48a5      	ldr	r0, [pc, #660]	; (800cc10 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c97c:	f001 f9c6 	bl	800dd0c <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800c980:	f7fd fffb 	bl	800a97a <hci_reset>
 800c984:	4603      	mov	r3, r0
 800c986:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c988:	7dfb      	ldrb	r3, [r7, #23]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d005      	beq.n	800c99a <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800c98e:	7dfb      	ldrb	r3, [r7, #23]
 800c990:	4619      	mov	r1, r3
 800c992:	48a0      	ldr	r0, [pc, #640]	; (800cc14 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800c994:	f001 f91e 	bl	800dbd4 <iprintf>
 800c998:	e002      	b.n	800c9a0 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800c99a:	489f      	ldr	r0, [pc, #636]	; (800cc18 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800c99c:	f001 f9b6 	bl	800dd0c <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800c9a0:	f000 f9c2 	bl	800cd28 <BleGetBdAddress>
 800c9a4:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800c9a6:	693a      	ldr	r2, [r7, #16]
 800c9a8:	2106      	movs	r1, #6
 800c9aa:	2000      	movs	r0, #0
 800c9ac:	f7fd fea5 	bl	800a6fa <aci_hal_write_config_data>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c9b4:	7dfb      	ldrb	r3, [r7, #23]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d005      	beq.n	800c9c6 <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800c9ba:	7dfb      	ldrb	r3, [r7, #23]
 800c9bc:	4619      	mov	r1, r3
 800c9be:	4897      	ldr	r0, [pc, #604]	; (800cc1c <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800c9c0:	f001 f908 	bl	800dbd4 <iprintf>
 800c9c4:	e021      	b.n	800ca0a <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800c9c6:	4896      	ldr	r0, [pc, #600]	; (800cc20 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800c9c8:	f001 f9a0 	bl	800dd0c <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	3305      	adds	r3, #5
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	3304      	adds	r3, #4
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	461c      	mov	r4, r3
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	3303      	adds	r3, #3
 800c9e0:	781b      	ldrb	r3, [r3, #0]
 800c9e2:	461d      	mov	r5, r3
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	3302      	adds	r3, #2
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	4619      	mov	r1, r3
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	9302      	str	r3, [sp, #8]
 800c9fa:	9101      	str	r1, [sp, #4]
 800c9fc:	9200      	str	r2, [sp, #0]
 800c9fe:	462b      	mov	r3, r5
 800ca00:	4622      	mov	r2, r4
 800ca02:	4601      	mov	r1, r0
 800ca04:	4887      	ldr	r0, [pc, #540]	; (800cc24 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800ca06:	f001 f8e5 	bl	800dbd4 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800ca0a:	4a87      	ldr	r2, [pc, #540]	; (800cc28 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800ca0c:	2110      	movs	r1, #16
 800ca0e:	2018      	movs	r0, #24
 800ca10:	f7fd fe73 	bl	800a6fa <aci_hal_write_config_data>
 800ca14:	4603      	mov	r3, r0
 800ca16:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800ca18:	7dfb      	ldrb	r3, [r7, #23]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d005      	beq.n	800ca2a <Ble_Hci_Gap_Gatt_Init+0xbe>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800ca1e:	7dfb      	ldrb	r3, [r7, #23]
 800ca20:	4619      	mov	r1, r3
 800ca22:	4882      	ldr	r0, [pc, #520]	; (800cc2c <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800ca24:	f001 f8d6 	bl	800dbd4 <iprintf>
 800ca28:	e002      	b.n	800ca30 <Ble_Hci_Gap_Gatt_Init+0xc4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800ca2a:	4881      	ldr	r0, [pc, #516]	; (800cc30 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800ca2c:	f001 f96e 	bl	800dd0c <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800ca30:	4a80      	ldr	r2, [pc, #512]	; (800cc34 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800ca32:	2110      	movs	r1, #16
 800ca34:	2008      	movs	r0, #8
 800ca36:	f7fd fe60 	bl	800a6fa <aci_hal_write_config_data>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800ca3e:	7dfb      	ldrb	r3, [r7, #23]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d005      	beq.n	800ca50 <Ble_Hci_Gap_Gatt_Init+0xe4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800ca44:	7dfb      	ldrb	r3, [r7, #23]
 800ca46:	4619      	mov	r1, r3
 800ca48:	487b      	ldr	r0, [pc, #492]	; (800cc38 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800ca4a:	f001 f8c3 	bl	800dbd4 <iprintf>
 800ca4e:	e002      	b.n	800ca56 <Ble_Hci_Gap_Gatt_Init+0xea>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800ca50:	487a      	ldr	r0, [pc, #488]	; (800cc3c <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800ca52:	f001 f95b 	bl	800dd0c <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800ca56:	2118      	movs	r1, #24
 800ca58:	2001      	movs	r0, #1
 800ca5a:	f7fd fed3 	bl	800a804 <aci_hal_set_tx_power_level>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800ca62:	7dfb      	ldrb	r3, [r7, #23]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d005      	beq.n	800ca74 <Ble_Hci_Gap_Gatt_Init+0x108>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800ca68:	7dfb      	ldrb	r3, [r7, #23]
 800ca6a:	4619      	mov	r1, r3
 800ca6c:	4874      	ldr	r0, [pc, #464]	; (800cc40 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800ca6e:	f001 f8b1 	bl	800dbd4 <iprintf>
 800ca72:	e002      	b.n	800ca7a <Ble_Hci_Gap_Gatt_Init+0x10e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800ca74:	4873      	ldr	r0, [pc, #460]	; (800cc44 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800ca76:	f001 f949 	bl	800dd0c <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800ca7a:	f7fd fb92 	bl	800a1a2 <aci_gatt_init>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800ca82:	7dfb      	ldrb	r3, [r7, #23]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d005      	beq.n	800ca94 <Ble_Hci_Gap_Gatt_Init+0x128>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800ca88:	7dfb      	ldrb	r3, [r7, #23]
 800ca8a:	4619      	mov	r1, r3
 800ca8c:	486e      	ldr	r0, [pc, #440]	; (800cc48 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800ca8e:	f001 f8a1 	bl	800dbd4 <iprintf>
 800ca92:	e002      	b.n	800ca9a <Ble_Hci_Gap_Gatt_Init+0x12e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800ca94:	486d      	ldr	r0, [pc, #436]	; (800cc4c <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800ca96:	f001 f939 	bl	800dd0c <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800ca9e:	7bfb      	ldrb	r3, [r7, #15]
 800caa0:	f043 0301 	orr.w	r3, r3, #1
 800caa4:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800caa6:	7bfb      	ldrb	r3, [r7, #15]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d02b      	beq.n	800cb04 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800caac:	4b68      	ldr	r3, [pc, #416]	; (800cc50 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800caae:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800cab0:	1dba      	adds	r2, r7, #6
 800cab2:	7bf8      	ldrb	r0, [r7, #15]
 800cab4:	1cbb      	adds	r3, r7, #2
 800cab6:	9301      	str	r3, [sp, #4]
 800cab8:	1d3b      	adds	r3, r7, #4
 800caba:	9300      	str	r3, [sp, #0]
 800cabc:	4613      	mov	r3, r2
 800cabe:	2208      	movs	r2, #8
 800cac0:	2100      	movs	r1, #0
 800cac2:	f7fd f9c4 	bl	8009e4e <aci_gap_init>
 800cac6:	4603      	mov	r3, r0
 800cac8:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800caca:	7dfb      	ldrb	r3, [r7, #23]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d005      	beq.n	800cadc <Ble_Hci_Gap_Gatt_Init+0x170>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800cad0:	7dfb      	ldrb	r3, [r7, #23]
 800cad2:	4619      	mov	r1, r3
 800cad4:	485f      	ldr	r0, [pc, #380]	; (800cc54 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800cad6:	f001 f87d 	bl	800dbd4 <iprintf>
 800cada:	e002      	b.n	800cae2 <Ble_Hci_Gap_Gatt_Init+0x176>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800cadc:	485e      	ldr	r0, [pc, #376]	; (800cc58 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800cade:	f001 f915 	bl	800dd0c <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800cae2:	88fc      	ldrh	r4, [r7, #6]
 800cae4:	88bd      	ldrh	r5, [r7, #4]
 800cae6:	68b8      	ldr	r0, [r7, #8]
 800cae8:	f7f3 fb4a 	bl	8000180 <strlen>
 800caec:	4603      	mov	r3, r0
 800caee:	b2da      	uxtb	r2, r3
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	9300      	str	r3, [sp, #0]
 800caf4:	4613      	mov	r3, r2
 800caf6:	2200      	movs	r2, #0
 800caf8:	4629      	mov	r1, r5
 800cafa:	4620      	mov	r0, r4
 800cafc:	f7fd fd54 	bl	800a5a8 <aci_gatt_update_char_value>
 800cb00:	4603      	mov	r3, r0
 800cb02:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800cb04:	88f8      	ldrh	r0, [r7, #6]
 800cb06:	8879      	ldrh	r1, [r7, #2]
 800cb08:	463b      	mov	r3, r7
 800cb0a:	9300      	str	r3, [sp, #0]
 800cb0c:	2302      	movs	r3, #2
 800cb0e:	2200      	movs	r2, #0
 800cb10:	f7fd fd4a 	bl	800a5a8 <aci_gatt_update_char_value>
 800cb14:	4603      	mov	r3, r0
 800cb16:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800cb18:	2202      	movs	r2, #2
 800cb1a:	2102      	movs	r1, #2
 800cb1c:	2000      	movs	r0, #0
 800cb1e:	f7fd ff50 	bl	800a9c2 <hci_le_set_default_phy>
 800cb22:	4603      	mov	r3, r0
 800cb24:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cb26:	7dfb      	ldrb	r3, [r7, #23]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d005      	beq.n	800cb38 <Ble_Hci_Gap_Gatt_Init+0x1cc>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800cb2c:	7dfb      	ldrb	r3, [r7, #23]
 800cb2e:	4619      	mov	r1, r3
 800cb30:	484a      	ldr	r0, [pc, #296]	; (800cc5c <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800cb32:	f001 f84f 	bl	800dbd4 <iprintf>
 800cb36:	e002      	b.n	800cb3e <Ble_Hci_Gap_Gatt_Init+0x1d2>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800cb38:	4849      	ldr	r0, [pc, #292]	; (800cc60 <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 800cb3a:	f001 f8e7 	bl	800dd0c <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800cb3e:	4b49      	ldr	r3, [pc, #292]	; (800cc64 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800cb40:	2201      	movs	r2, #1
 800cb42:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800cb44:	4b47      	ldr	r3, [pc, #284]	; (800cc64 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f7fd f801 	bl	8009b50 <aci_gap_set_io_capability>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cb52:	7dfb      	ldrb	r3, [r7, #23]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d005      	beq.n	800cb64 <Ble_Hci_Gap_Gatt_Init+0x1f8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800cb58:	7dfb      	ldrb	r3, [r7, #23]
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	4842      	ldr	r0, [pc, #264]	; (800cc68 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800cb5e:	f001 f839 	bl	800dbd4 <iprintf>
 800cb62:	e002      	b.n	800cb6a <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800cb64:	4841      	ldr	r0, [pc, #260]	; (800cc6c <Ble_Hci_Gap_Gatt_Init+0x300>)
 800cb66:	f001 f8d1 	bl	800dd0c <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800cb6a:	4b3e      	ldr	r3, [pc, #248]	; (800cc64 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800cb6c:	2201      	movs	r2, #1
 800cb6e:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800cb70:	4b3c      	ldr	r3, [pc, #240]	; (800cc64 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800cb72:	2208      	movs	r2, #8
 800cb74:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800cb76:	4b3b      	ldr	r3, [pc, #236]	; (800cc64 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800cb78:	2210      	movs	r2, #16
 800cb7a:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800cb7c:	4b39      	ldr	r3, [pc, #228]	; (800cc64 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800cb7e:	2200      	movs	r2, #0
 800cb80:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800cb82:	4b38      	ldr	r3, [pc, #224]	; (800cc64 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800cb84:	4a3a      	ldr	r2, [pc, #232]	; (800cc70 <Ble_Hci_Gap_Gatt_Init+0x304>)
 800cb86:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800cb88:	4b36      	ldr	r3, [pc, #216]	; (800cc64 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800cb8e:	4b35      	ldr	r3, [pc, #212]	; (800cc64 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800cb90:	789c      	ldrb	r4, [r3, #2]
 800cb92:	4b34      	ldr	r3, [pc, #208]	; (800cc64 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800cb94:	785d      	ldrb	r5, [r3, #1]
 800cb96:	4b33      	ldr	r3, [pc, #204]	; (800cc64 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800cb98:	791b      	ldrb	r3, [r3, #4]
 800cb9a:	4a32      	ldr	r2, [pc, #200]	; (800cc64 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800cb9c:	7952      	ldrb	r2, [r2, #5]
 800cb9e:	4931      	ldr	r1, [pc, #196]	; (800cc64 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800cba0:	78c9      	ldrb	r1, [r1, #3]
 800cba2:	4830      	ldr	r0, [pc, #192]	; (800cc64 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800cba4:	6880      	ldr	r0, [r0, #8]
 800cba6:	2600      	movs	r6, #0
 800cba8:	9604      	str	r6, [sp, #16]
 800cbaa:	9003      	str	r0, [sp, #12]
 800cbac:	9102      	str	r1, [sp, #8]
 800cbae:	9201      	str	r2, [sp, #4]
 800cbb0:	9300      	str	r3, [sp, #0]
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	4629      	mov	r1, r5
 800cbb8:	4620      	mov	r0, r4
 800cbba:	f7fd f81d 	bl	8009bf8 <aci_gap_set_authentication_requirement>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800cbc2:	7dfb      	ldrb	r3, [r7, #23]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d005      	beq.n	800cbd4 <Ble_Hci_Gap_Gatt_Init+0x268>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800cbc8:	7dfb      	ldrb	r3, [r7, #23]
 800cbca:	4619      	mov	r1, r3
 800cbcc:	4829      	ldr	r0, [pc, #164]	; (800cc74 <Ble_Hci_Gap_Gatt_Init+0x308>)
 800cbce:	f001 f801 	bl	800dbd4 <iprintf>
 800cbd2:	e002      	b.n	800cbda <Ble_Hci_Gap_Gatt_Init+0x26e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800cbd4:	4828      	ldr	r0, [pc, #160]	; (800cc78 <Ble_Hci_Gap_Gatt_Init+0x30c>)
 800cbd6:	f001 f899 	bl	800dd0c <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800cbda:	4b22      	ldr	r3, [pc, #136]	; (800cc64 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800cbdc:	789b      	ldrb	r3, [r3, #2]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d00f      	beq.n	800cc02 <Ble_Hci_Gap_Gatt_Init+0x296>
  {
    ret = aci_gap_configure_whitelist();
 800cbe2:	f7fd fa53 	bl	800a08c <aci_gap_configure_whitelist>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800cbea:	7dfb      	ldrb	r3, [r7, #23]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d005      	beq.n	800cbfc <Ble_Hci_Gap_Gatt_Init+0x290>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800cbf0:	7dfb      	ldrb	r3, [r7, #23]
 800cbf2:	4619      	mov	r1, r3
 800cbf4:	4821      	ldr	r0, [pc, #132]	; (800cc7c <Ble_Hci_Gap_Gatt_Init+0x310>)
 800cbf6:	f000 ffed 	bl	800dbd4 <iprintf>
 800cbfa:	e002      	b.n	800cc02 <Ble_Hci_Gap_Gatt_Init+0x296>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800cbfc:	4820      	ldr	r0, [pc, #128]	; (800cc80 <Ble_Hci_Gap_Gatt_Init+0x314>)
 800cbfe:	f001 f885 	bl	800dd0c <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800cc02:	4820      	ldr	r0, [pc, #128]	; (800cc84 <Ble_Hci_Gap_Gatt_Init+0x318>)
 800cc04:	f000 ffe6 	bl	800dbd4 <iprintf>
}
 800cc08:	bf00      	nop
 800cc0a:	371c      	adds	r7, #28
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc10:	0800f54c 	.word	0x0800f54c
 800cc14:	0800f578 	.word	0x0800f578
 800cc18:	0800f5a8 	.word	0x0800f5a8
 800cc1c:	0800f5c8 	.word	0x0800f5c8
 800cc20:	0800f624 	.word	0x0800f624
 800cc24:	0800f670 	.word	0x0800f670
 800cc28:	0800ff94 	.word	0x0800ff94
 800cc2c:	0800f6ac 	.word	0x0800f6ac
 800cc30:	0800f704 	.word	0x0800f704
 800cc34:	0800ffa4 	.word	0x0800ffa4
 800cc38:	0800f74c 	.word	0x0800f74c
 800cc3c:	0800f7a4 	.word	0x0800f7a4
 800cc40:	0800f7ec 	.word	0x0800f7ec
 800cc44:	0800f82c 	.word	0x0800f82c
 800cc48:	0800f85c 	.word	0x0800f85c
 800cc4c:	0800f890 	.word	0x0800f890
 800cc50:	0800f8b4 	.word	0x0800f8b4
 800cc54:	0800f8c0 	.word	0x0800f8c0
 800cc58:	0800f8f0 	.word	0x0800f8f0
 800cc5c:	0800f910 	.word	0x0800f910
 800cc60:	0800f94c 	.word	0x0800f94c
 800cc64:	20002828 	.word	0x20002828
 800cc68:	0800f978 	.word	0x0800f978
 800cc6c:	0800f9b8 	.word	0x0800f9b8
 800cc70:	0001b207 	.word	0x0001b207
 800cc74:	0800f9e8 	.word	0x0800f9e8
 800cc78:	0800fa34 	.word	0x0800fa34
 800cc7c:	0800fa70 	.word	0x0800fa70
 800cc80:	0800fab0 	.word	0x0800fab0
 800cc84:	0800fae0 	.word	0x0800fae0

0800cc88 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b08c      	sub	sp, #48	; 0x30
 800cc8c:	af08      	add	r7, sp, #32
 800cc8e:	4603      	mov	r3, r0
 800cc90:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800cc92:	2392      	movs	r3, #146	; 0x92
 800cc94:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800cc96:	4a1e      	ldr	r2, [pc, #120]	; (800cd10 <Adv_Request+0x88>)
 800cc98:	79fb      	ldrb	r3, [r7, #7]
 800cc9a:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800cc9e:	2300      	movs	r3, #0
 800cca0:	9306      	str	r3, [sp, #24]
 800cca2:	2300      	movs	r3, #0
 800cca4:	9305      	str	r3, [sp, #20]
 800cca6:	2300      	movs	r3, #0
 800cca8:	9304      	str	r3, [sp, #16]
 800ccaa:	2300      	movs	r3, #0
 800ccac:	9303      	str	r3, [sp, #12]
 800ccae:	2300      	movs	r3, #0
 800ccb0:	9302      	str	r3, [sp, #8]
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	9301      	str	r3, [sp, #4]
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	9300      	str	r3, [sp, #0]
 800ccba:	2300      	movs	r3, #0
 800ccbc:	22a0      	movs	r2, #160	; 0xa0
 800ccbe:	2180      	movs	r1, #128	; 0x80
 800ccc0:	2000      	movs	r0, #0
 800ccc2:	f7fc fe4b 	bl	800995c <aci_gap_set_discoverable>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800ccca:	7bfb      	ldrb	r3, [r7, #15]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d005      	beq.n	800ccdc <Adv_Request+0x54>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800ccd0:	7bfb      	ldrb	r3, [r7, #15]
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	480f      	ldr	r0, [pc, #60]	; (800cd14 <Adv_Request+0x8c>)
 800ccd6:	f000 ff7d 	bl	800dbd4 <iprintf>
 800ccda:	e002      	b.n	800cce2 <Adv_Request+0x5a>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800ccdc:	480e      	ldr	r0, [pc, #56]	; (800cd18 <Adv_Request+0x90>)
 800ccde:	f001 f815 	bl	800dd0c <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800cce2:	490e      	ldr	r1, [pc, #56]	; (800cd1c <Adv_Request+0x94>)
 800cce4:	200c      	movs	r0, #12
 800cce6:	f7fd f95f 	bl	8009fa8 <aci_gap_update_adv_data>
 800ccea:	4603      	mov	r3, r0
 800ccec:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800ccee:	7bfb      	ldrb	r3, [r7, #15]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d005      	beq.n	800cd00 <Adv_Request+0x78>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800ccf4:	7bfb      	ldrb	r3, [r7, #15]
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	4809      	ldr	r0, [pc, #36]	; (800cd20 <Adv_Request+0x98>)
 800ccfa:	f000 ff6b 	bl	800dbd4 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800ccfe:	e003      	b.n	800cd08 <Adv_Request+0x80>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800cd00:	4808      	ldr	r0, [pc, #32]	; (800cd24 <Adv_Request+0x9c>)
 800cd02:	f000 ff67 	bl	800dbd4 <iprintf>
  return;
 800cd06:	bf00      	nop
}
 800cd08:	3710      	adds	r7, #16
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	20002828 	.word	0x20002828
 800cd14:	0800fb0c 	.word	0x0800fb0c
 800cd18:	0800fb44 	.word	0x0800fb44
 800cd1c:	20000018 	.word	0x20000018
 800cd20:	0800fb6c 	.word	0x0800fb6c
 800cd24:	0800fba0 	.word	0x0800fba0

0800cd28 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b086      	sub	sp, #24
 800cd2c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800cd2e:	f7ff fba5 	bl	800c47c <LL_FLASH_GetUDN>
 800cd32:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd3a:	d023      	beq.n	800cd84 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800cd3c:	f7ff fbb6 	bl	800c4ac <LL_FLASH_GetSTCompanyID>
 800cd40:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800cd42:	f7ff fba7 	bl	800c494 <LL_FLASH_GetDeviceID>
 800cd46:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	b2da      	uxtb	r2, r3
 800cd4c:	4b16      	ldr	r3, [pc, #88]	; (800cda8 <BleGetBdAddress+0x80>)
 800cd4e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	0a1b      	lsrs	r3, r3, #8
 800cd54:	b2da      	uxtb	r2, r3
 800cd56:	4b14      	ldr	r3, [pc, #80]	; (800cda8 <BleGetBdAddress+0x80>)
 800cd58:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	b2da      	uxtb	r2, r3
 800cd5e:	4b12      	ldr	r3, [pc, #72]	; (800cda8 <BleGetBdAddress+0x80>)
 800cd60:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	b2da      	uxtb	r2, r3
 800cd66:	4b10      	ldr	r3, [pc, #64]	; (800cda8 <BleGetBdAddress+0x80>)
 800cd68:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	0a1b      	lsrs	r3, r3, #8
 800cd6e:	b2da      	uxtb	r2, r3
 800cd70:	4b0d      	ldr	r3, [pc, #52]	; (800cda8 <BleGetBdAddress+0x80>)
 800cd72:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	0c1b      	lsrs	r3, r3, #16
 800cd78:	b2da      	uxtb	r2, r3
 800cd7a:	4b0b      	ldr	r3, [pc, #44]	; (800cda8 <BleGetBdAddress+0x80>)
 800cd7c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800cd7e:	4b0a      	ldr	r3, [pc, #40]	; (800cda8 <BleGetBdAddress+0x80>)
 800cd80:	617b      	str	r3, [r7, #20]
 800cd82:	e00b      	b.n	800cd9c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800cd84:	2000      	movs	r0, #0
 800cd86:	f7fe fe91 	bl	800baac <OTP_Read>
 800cd8a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d002      	beq.n	800cd98 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	617b      	str	r3, [r7, #20]
 800cd96:	e001      	b.n	800cd9c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800cd98:	4b04      	ldr	r3, [pc, #16]	; (800cdac <BleGetBdAddress+0x84>)
 800cd9a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800cd9c:	697b      	ldr	r3, [r7, #20]
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3718      	adds	r7, #24
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}
 800cda6:	bf00      	nop
 800cda8:	20002820 	.word	0x20002820
 800cdac:	0800ff8c 	.word	0x0800ff8c

0800cdb0 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800cdb6:	4b10      	ldr	r3, [pc, #64]	; (800cdf8 <Adv_Cancel+0x48>)
 800cdb8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cdbc:	2b05      	cmp	r3, #5
 800cdbe:	d017      	beq.n	800cdf0 <Adv_Cancel+0x40>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800cdc0:	2392      	movs	r3, #146	; 0x92
 800cdc2:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800cdc4:	f7fc fda6 	bl	8009914 <aci_gap_set_non_discoverable>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800cdcc:	4b0a      	ldr	r3, [pc, #40]	; (800cdf8 <Adv_Cancel+0x48>)
 800cdce:	2200      	movs	r2, #0
 800cdd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800cdd4:	79fb      	ldrb	r3, [r7, #7]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d003      	beq.n	800cde2 <Adv_Cancel+0x32>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800cdda:	4808      	ldr	r0, [pc, #32]	; (800cdfc <Adv_Cancel+0x4c>)
 800cddc:	f000 fefa 	bl	800dbd4 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800cde0:	e006      	b.n	800cdf0 <Adv_Cancel+0x40>
      APP_DBG_MSG("  \r\n\r");
 800cde2:	4807      	ldr	r0, [pc, #28]	; (800ce00 <Adv_Cancel+0x50>)
 800cde4:	f000 fef6 	bl	800dbd4 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800cde8:	4806      	ldr	r0, [pc, #24]	; (800ce04 <Adv_Cancel+0x54>)
 800cdea:	f000 fef3 	bl	800dbd4 <iprintf>
  return;
 800cdee:	bf00      	nop
 800cdf0:	bf00      	nop
}
 800cdf2:	3708      	adds	r7, #8
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}
 800cdf8:	20002828 	.word	0x20002828
 800cdfc:	0800fbc8 	.word	0x0800fbc8
 800ce00:	0800fbec 	.word	0x0800fbec
 800ce04:	0800fbf4 	.word	0x0800fbf4

0800ce08 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800ce10:	2100      	movs	r1, #0
 800ce12:	2002      	movs	r0, #2
 800ce14:	f000 fd7e 	bl	800d914 <UTIL_SEQ_SetTask>

  return;
 800ce18:	bf00      	nop
}
 800ce1a:	3708      	adds	r7, #8
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}

0800ce20 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b082      	sub	sp, #8
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800ce28:	2001      	movs	r0, #1
 800ce2a:	f000 fddf 	bl	800d9ec <UTIL_SEQ_SetEvt>

  return;
 800ce2e:	bf00      	nop
}
 800ce30:	3708      	adds	r7, #8
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800ce36:	b580      	push	{r7, lr}
 800ce38:	b082      	sub	sp, #8
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800ce3e:	2001      	movs	r0, #1
 800ce40:	f000 fdf4 	bl	800da2c <UTIL_SEQ_WaitEvt>

  return;
 800ce44:	bf00      	nop
}
 800ce46:	3708      	adds	r7, #8
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}

0800ce4c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b084      	sub	sp, #16
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	685b      	ldr	r3, [r3, #4]
 800ce5c:	3308      	adds	r3, #8
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7fd ff16 	bl	800ac90 <SVCCTL_UserEvtRx>
 800ce64:	4603      	mov	r3, r0
 800ce66:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800ce68:	7afb      	ldrb	r3, [r7, #11]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d003      	beq.n	800ce76 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2201      	movs	r2, #1
 800ce72:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800ce74:	e003      	b.n	800ce7e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	701a      	strb	r2, [r3, #0]
  return;
 800ce7c:	bf00      	nop
}
 800ce7e:	3710      	adds	r7, #16
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b084      	sub	sp, #16
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800ce8e:	79fb      	ldrb	r3, [r7, #7]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d002      	beq.n	800ce9a <BLE_StatusNot+0x16>
 800ce94:	2b01      	cmp	r3, #1
 800ce96:	d006      	beq.n	800cea6 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800ce98:	e00b      	b.n	800ceb2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800ce9a:	2303      	movs	r3, #3
 800ce9c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800ce9e:	68f8      	ldr	r0, [r7, #12]
 800cea0:	f000 fd64 	bl	800d96c <UTIL_SEQ_PauseTask>
      break;
 800cea4:	e005      	b.n	800ceb2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800cea6:	2303      	movs	r3, #3
 800cea8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800ceaa:	68f8      	ldr	r0, [r7, #12]
 800ceac:	f000 fd7e 	bl	800d9ac <UTIL_SEQ_ResumeTask>
      break;
 800ceb0:	bf00      	nop
  }

  return;
 800ceb2:	bf00      	nop
}
 800ceb4:	3710      	adds	r7, #16
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}
	...

0800cebc <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b083      	sub	sp, #12
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	781b      	ldrb	r3, [r3, #0]
 800cec8:	2b03      	cmp	r3, #3
 800ceca:	d80b      	bhi.n	800cee4 <Custom_STM_App_Notification+0x28>
 800cecc:	a201      	add	r2, pc, #4	; (adr r2, 800ced4 <Custom_STM_App_Notification+0x18>)
 800cece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ced2:	bf00      	nop
 800ced4:	0800cee5 	.word	0x0800cee5
 800ced8:	0800cee5 	.word	0x0800cee5
 800cedc:	0800cee5 	.word	0x0800cee5
 800cee0:	0800cee5 	.word	0x0800cee5

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800cee4:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800cee6:	bf00      	nop
}
 800cee8:	370c      	adds	r7, #12
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr
 800cef2:	bf00      	nop

0800cef4 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d002      	beq.n	800cf0a <Custom_APP_Notification+0x16>
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d006      	beq.n	800cf16 <Custom_APP_Notification+0x22>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800cf08:	e00b      	b.n	800cf22 <Custom_APP_Notification+0x2e>
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	2102      	movs	r1, #2
 800cf0e:	4807      	ldr	r0, [pc, #28]	; (800cf2c <Custom_APP_Notification+0x38>)
 800cf10:	f7f8 fb06 	bl	8005520 <HAL_GPIO_WritePin>
      break;
 800cf14:	e005      	b.n	800cf22 <Custom_APP_Notification+0x2e>
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800cf16:	2200      	movs	r2, #0
 800cf18:	2102      	movs	r1, #2
 800cf1a:	4804      	ldr	r0, [pc, #16]	; (800cf2c <Custom_APP_Notification+0x38>)
 800cf1c:	f7f8 fb00 	bl	8005520 <HAL_GPIO_WritePin>
      break;
 800cf20:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800cf22:	bf00      	nop
}
 800cf24:	3708      	adds	r7, #8
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	48000400 	.word	0x48000400

0800cf30 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800cf30:	b480      	push	{r7}
 800cf32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800cf34:	bf00      	nop
}
 800cf36:	46bd      	mov	sp, r7
 800cf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3c:	4770      	bx	lr
	...

0800cf40 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b08a      	sub	sp, #40	; 0x28
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	3301      	adds	r3, #1
 800cf52:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800cf54:	6a3b      	ldr	r3, [r7, #32]
 800cf56:	781b      	ldrb	r3, [r3, #0]
 800cf58:	2bff      	cmp	r3, #255	; 0xff
 800cf5a:	d156      	bne.n	800d00a <Custom_STM_Event_Handler+0xca>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800cf5c:	6a3b      	ldr	r3, [r7, #32]
 800cf5e:	3302      	adds	r3, #2
 800cf60:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 800cf62:	69fb      	ldr	r3, [r7, #28]
 800cf64:	881b      	ldrh	r3, [r3, #0]
 800cf66:	b29b      	uxth	r3, r3
 800cf68:	f640 4214 	movw	r2, #3092	; 0xc14
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d046      	beq.n	800cffe <Custom_STM_Event_Handler+0xbe>
 800cf70:	f640 4214 	movw	r2, #3092	; 0xc14
 800cf74:	4293      	cmp	r3, r2
 800cf76:	dc44      	bgt.n	800d002 <Custom_STM_Event_Handler+0xc2>
 800cf78:	f640 4201 	movw	r2, #3073	; 0xc01
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	d003      	beq.n	800cf88 <Custom_STM_Event_Handler+0x48>
 800cf80:	f640 4213 	movw	r2, #3091	; 0xc13
 800cf84:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800cf86:	e03f      	b.n	800d008 <Custom_STM_Event_Handler+0xc8>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800cf88:	69fb      	ldr	r3, [r7, #28]
 800cf8a:	3302      	adds	r3, #2
 800cf8c:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMy_CharHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800cf8e:	69bb      	ldr	r3, [r7, #24]
 800cf90:	885b      	ldrh	r3, [r3, #2]
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	461a      	mov	r2, r3
 800cf96:	4b20      	ldr	r3, [pc, #128]	; (800d018 <Custom_STM_Event_Handler+0xd8>)
 800cf98:	885b      	ldrh	r3, [r3, #2]
 800cf9a:	3302      	adds	r3, #2
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d119      	bne.n	800cfd4 <Custom_STM_Event_Handler+0x94>
            return_value = SVCCTL_EvtAckFlowEnable;
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 800cfa6:	69bb      	ldr	r3, [r7, #24]
 800cfa8:	7a1b      	ldrb	r3, [r3, #8]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d002      	beq.n	800cfb4 <Custom_STM_Event_Handler+0x74>
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	d008      	beq.n	800cfc4 <Custom_STM_Event_Handler+0x84>
              break;
 800cfb2:	e023      	b.n	800cffc <Custom_STM_Event_Handler+0xbc>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MY_CHAR_NOTIFY_DISABLED_EVT;
 800cfb4:	2303      	movs	r3, #3
 800cfb6:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800cfb8:	f107 0308 	add.w	r3, r7, #8
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f7ff ff7d 	bl	800cebc <Custom_STM_App_Notification>
                break;
 800cfc2:	e01b      	b.n	800cffc <Custom_STM_Event_Handler+0xbc>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MY_CHAR_NOTIFY_ENABLED_EVT;
 800cfc4:	2302      	movs	r3, #2
 800cfc6:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800cfc8:	f107 0308 	add.w	r3, r7, #8
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f7ff ff75 	bl	800cebc <Custom_STM_App_Notification>
                break;
 800cfd2:	e013      	b.n	800cffc <Custom_STM_Event_Handler+0xbc>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomMy_CharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800cfd4:	69bb      	ldr	r3, [r7, #24]
 800cfd6:	885b      	ldrh	r3, [r3, #2]
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	461a      	mov	r2, r3
 800cfdc:	4b0e      	ldr	r3, [pc, #56]	; (800d018 <Custom_STM_Event_Handler+0xd8>)
 800cfde:	885b      	ldrh	r3, [r3, #2]
 800cfe0:	3301      	adds	r3, #1
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d10f      	bne.n	800d006 <Custom_STM_Event_Handler+0xc6>
            return_value = SVCCTL_EvtAckFlowEnable;
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800cfec:	2101      	movs	r1, #1
 800cfee:	480b      	ldr	r0, [pc, #44]	; (800d01c <Custom_STM_Event_Handler+0xdc>)
 800cff0:	f7f8 faae 	bl	8005550 <HAL_GPIO_TogglePin>
            val_read =1;
 800cff4:	4b0a      	ldr	r3, [pc, #40]	; (800d020 <Custom_STM_Event_Handler+0xe0>)
 800cff6:	2201      	movs	r2, #1
 800cff8:	701a      	strb	r2, [r3, #0]
          break;
 800cffa:	e004      	b.n	800d006 <Custom_STM_Event_Handler+0xc6>
 800cffc:	e003      	b.n	800d006 <Custom_STM_Event_Handler+0xc6>
          break;
 800cffe:	bf00      	nop
 800d000:	e004      	b.n	800d00c <Custom_STM_Event_Handler+0xcc>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800d002:	bf00      	nop
 800d004:	e002      	b.n	800d00c <Custom_STM_Event_Handler+0xcc>
          break;
 800d006:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800d008:	e000      	b.n	800d00c <Custom_STM_Event_Handler+0xcc>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800d00a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800d00c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 800d010:	4618      	mov	r0, r3
 800d012:	3728      	adds	r7, #40	; 0x28
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}
 800d018:	200028b0 	.word	0x200028b0
 800d01c:	48000400 	.word	0x48000400
 800d020:	20000f84 	.word	0x20000f84

0800d024 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b08c      	sub	sp, #48	; 0x30
 800d028:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d02a:	2392      	movs	r3, #146	; 0x92
 800d02c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800d02e:	4840      	ldr	r0, [pc, #256]	; (800d130 <SVCCTL_InitCustomSvc+0x10c>)
 800d030:	f7fd fe14 	bl	800ac5c <SVCCTL_RegisterSvcHandler>
   *                                2 for MY_CHAR +
   *                                1 for MY_CHAR configuration descriptor +
   *                              = 4
   */

  COPY_MY_CUSTOM_SVC_UUID(uuid.Char_UUID_128);
 800d034:	238f      	movs	r3, #143	; 0x8f
 800d036:	713b      	strb	r3, [r7, #4]
 800d038:	23e5      	movs	r3, #229	; 0xe5
 800d03a:	717b      	strb	r3, [r7, #5]
 800d03c:	23b3      	movs	r3, #179	; 0xb3
 800d03e:	71bb      	strb	r3, [r7, #6]
 800d040:	23d5      	movs	r3, #213	; 0xd5
 800d042:	71fb      	strb	r3, [r7, #7]
 800d044:	232e      	movs	r3, #46	; 0x2e
 800d046:	723b      	strb	r3, [r7, #8]
 800d048:	237f      	movs	r3, #127	; 0x7f
 800d04a:	727b      	strb	r3, [r7, #9]
 800d04c:	234a      	movs	r3, #74	; 0x4a
 800d04e:	72bb      	strb	r3, [r7, #10]
 800d050:	2398      	movs	r3, #152	; 0x98
 800d052:	72fb      	strb	r3, [r7, #11]
 800d054:	232a      	movs	r3, #42	; 0x2a
 800d056:	733b      	strb	r3, [r7, #12]
 800d058:	2348      	movs	r3, #72	; 0x48
 800d05a:	737b      	strb	r3, [r7, #13]
 800d05c:	237a      	movs	r3, #122	; 0x7a
 800d05e:	73bb      	strb	r3, [r7, #14]
 800d060:	23cc      	movs	r3, #204	; 0xcc
 800d062:	73fb      	strb	r3, [r7, #15]
 800d064:	2300      	movs	r3, #0
 800d066:	743b      	strb	r3, [r7, #16]
 800d068:	2300      	movs	r3, #0
 800d06a:	747b      	strb	r3, [r7, #17]
 800d06c:	2300      	movs	r3, #0
 800d06e:	74bb      	strb	r3, [r7, #18]
 800d070:	2300      	movs	r3, #0
 800d072:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800d074:	1d39      	adds	r1, r7, #4
 800d076:	4b2f      	ldr	r3, [pc, #188]	; (800d134 <SVCCTL_InitCustomSvc+0x110>)
 800d078:	9300      	str	r3, [sp, #0]
 800d07a:	2304      	movs	r3, #4
 800d07c:	2201      	movs	r2, #1
 800d07e:	2002      	movs	r0, #2
 800d080:	f7fd f8b4 	bl	800a1ec <aci_gatt_add_service>
 800d084:	4603      	mov	r3, r0
 800d086:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             4,
                             &(CustomContext.CustomMy_Custom_SvcHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800d088:	7dfb      	ldrb	r3, [r7, #23]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d005      	beq.n	800d09a <SVCCTL_InitCustomSvc+0x76>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: MY_CUSTOM_SVC, error code: 0x%x \n\r", ret);
 800d08e:	7dfb      	ldrb	r3, [r7, #23]
 800d090:	4619      	mov	r1, r3
 800d092:	4829      	ldr	r0, [pc, #164]	; (800d138 <SVCCTL_InitCustomSvc+0x114>)
 800d094:	f000 fd9e 	bl	800dbd4 <iprintf>
 800d098:	e002      	b.n	800d0a0 <SVCCTL_InitCustomSvc+0x7c>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: MY_CUSTOM_SVC \n\r");
 800d09a:	4828      	ldr	r0, [pc, #160]	; (800d13c <SVCCTL_InitCustomSvc+0x118>)
 800d09c:	f000 fd9a 	bl	800dbd4 <iprintf>
  }

  /**
   *  MY_CHAR
   */
  COPY_MY_CHAR_UUID(uuid.Char_UUID_128);
 800d0a0:	2319      	movs	r3, #25
 800d0a2:	713b      	strb	r3, [r7, #4]
 800d0a4:	23ed      	movs	r3, #237	; 0xed
 800d0a6:	717b      	strb	r3, [r7, #5]
 800d0a8:	2382      	movs	r3, #130	; 0x82
 800d0aa:	71bb      	strb	r3, [r7, #6]
 800d0ac:	23ae      	movs	r3, #174	; 0xae
 800d0ae:	71fb      	strb	r3, [r7, #7]
 800d0b0:	23ed      	movs	r3, #237	; 0xed
 800d0b2:	723b      	strb	r3, [r7, #8]
 800d0b4:	2321      	movs	r3, #33	; 0x21
 800d0b6:	727b      	strb	r3, [r7, #9]
 800d0b8:	234c      	movs	r3, #76	; 0x4c
 800d0ba:	72bb      	strb	r3, [r7, #10]
 800d0bc:	239d      	movs	r3, #157	; 0x9d
 800d0be:	72fb      	strb	r3, [r7, #11]
 800d0c0:	2341      	movs	r3, #65	; 0x41
 800d0c2:	733b      	strb	r3, [r7, #12]
 800d0c4:	2345      	movs	r3, #69	; 0x45
 800d0c6:	737b      	strb	r3, [r7, #13]
 800d0c8:	2322      	movs	r3, #34	; 0x22
 800d0ca:	73bb      	strb	r3, [r7, #14]
 800d0cc:	238e      	movs	r3, #142	; 0x8e
 800d0ce:	73fb      	strb	r3, [r7, #15]
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	743b      	strb	r3, [r7, #16]
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	747b      	strb	r3, [r7, #17]
 800d0d8:	2300      	movs	r3, #0
 800d0da:	74bb      	strb	r3, [r7, #18]
 800d0dc:	2300      	movs	r3, #0
 800d0de:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMy_Custom_SvcHdle,
 800d0e0:	4b14      	ldr	r3, [pc, #80]	; (800d134 <SVCCTL_InitCustomSvc+0x110>)
 800d0e2:	8818      	ldrh	r0, [r3, #0]
 800d0e4:	4b16      	ldr	r3, [pc, #88]	; (800d140 <SVCCTL_InitCustomSvc+0x11c>)
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	b29b      	uxth	r3, r3
 800d0ea:	1d3a      	adds	r2, r7, #4
 800d0ec:	4915      	ldr	r1, [pc, #84]	; (800d144 <SVCCTL_InitCustomSvc+0x120>)
 800d0ee:	9105      	str	r1, [sp, #20]
 800d0f0:	2100      	movs	r1, #0
 800d0f2:	9104      	str	r1, [sp, #16]
 800d0f4:	2110      	movs	r1, #16
 800d0f6:	9103      	str	r1, [sp, #12]
 800d0f8:	2101      	movs	r1, #1
 800d0fa:	9102      	str	r1, [sp, #8]
 800d0fc:	2100      	movs	r1, #0
 800d0fe:	9101      	str	r1, [sp, #4]
 800d100:	211a      	movs	r1, #26
 800d102:	9100      	str	r1, [sp, #0]
 800d104:	2102      	movs	r1, #2
 800d106:	f7fd f947 	bl	800a398 <aci_gatt_add_char>
 800d10a:	4603      	mov	r3, r0
 800d10c:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomMy_CharHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800d10e:	7dfb      	ldrb	r3, [r7, #23]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d005      	beq.n	800d120 <SVCCTL_InitCustomSvc+0xfc>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : MY_CHAR, error code: 0x%x \n\r", ret);
 800d114:	7dfb      	ldrb	r3, [r7, #23]
 800d116:	4619      	mov	r1, r3
 800d118:	480b      	ldr	r0, [pc, #44]	; (800d148 <SVCCTL_InitCustomSvc+0x124>)
 800d11a:	f000 fd5b 	bl	800dbd4 <iprintf>
  //aci_gatt_add_char_desc(&(CustomContext.CustomMy_Custom_SvcHdle), &(CustomContext.CustomMy_CharHdle), UUID_TYPE_128, 0x72, 16, 1,3 , ATTR_PERMISSION_NONE, ATTR_ACCESS_READ_WRITE, GATT_NOTIFY_ATTRIBUTE_WRITE, 10, 1, &(CustomContext.CustomMy_CharDesHdle));


  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800d11e:	e003      	b.n	800d128 <SVCCTL_InitCustomSvc+0x104>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : MY_CHAR \n\r");
 800d120:	480a      	ldr	r0, [pc, #40]	; (800d14c <SVCCTL_InitCustomSvc+0x128>)
 800d122:	f000 fd57 	bl	800dbd4 <iprintf>
  return;
 800d126:	bf00      	nop
}
 800d128:	3718      	adds	r7, #24
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	0800cf41 	.word	0x0800cf41
 800d134:	200028b0 	.word	0x200028b0
 800d138:	0800fc10 	.word	0x0800fc10
 800d13c:	0800fc5c 	.word	0x0800fc5c
 800d140:	20000024 	.word	0x20000024
 800d144:	200028b2 	.word	0x200028b2
 800d148:	0800fc98 	.word	0x0800fc98
 800d14c:	0800fce0 	.word	0x0800fce0

0800d150 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b086      	sub	sp, #24
 800d154:	af02      	add	r7, sp, #8
 800d156:	4603      	mov	r3, r0
 800d158:	6039      	str	r1, [r7, #0]
 800d15a:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d15c:	2392      	movs	r3, #146	; 0x92
 800d15e:	73fb      	strb	r3, [r7, #15]
//  pPayload[0]=(uint8_t)(*payload_send);
//  pPayload[1]=(uint8_t)(*payload_send>>8);

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800d160:	79fb      	ldrb	r3, [r7, #7]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d11a      	bne.n	800d19c <Custom_STM_App_Update_Char+0x4c>
  {

    case CUSTOM_STM_MY_CHAR:
      ret = aci_gatt_update_char_value(CustomContext.CustomMy_Custom_SvcHdle,
 800d166:	4b10      	ldr	r3, [pc, #64]	; (800d1a8 <Custom_STM_App_Update_Char+0x58>)
 800d168:	8818      	ldrh	r0, [r3, #0]
 800d16a:	4b0f      	ldr	r3, [pc, #60]	; (800d1a8 <Custom_STM_App_Update_Char+0x58>)
 800d16c:	8859      	ldrh	r1, [r3, #2]
 800d16e:	4b0f      	ldr	r3, [pc, #60]	; (800d1ac <Custom_STM_App_Update_Char+0x5c>)
 800d170:	781a      	ldrb	r2, [r3, #0]
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	9300      	str	r3, [sp, #0]
 800d176:	4613      	mov	r3, r2
 800d178:	2200      	movs	r2, #0
 800d17a:	f7fd fa15 	bl	800a5a8 <aci_gatt_update_char_value>
 800d17e:	4603      	mov	r3, r0
 800d180:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomMy_CharHdle,
                                       0, /* charValOffset */
                                       SizeMy_Char, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800d182:	7bfb      	ldrb	r3, [r7, #15]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d005      	beq.n	800d194 <Custom_STM_App_Update_Char+0x44>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value MY_CHAR command, result : 0x%x \n\r", ret);
 800d188:	7bfb      	ldrb	r3, [r7, #15]
 800d18a:	4619      	mov	r1, r3
 800d18c:	4808      	ldr	r0, [pc, #32]	; (800d1b0 <Custom_STM_App_Update_Char+0x60>)
 800d18e:	f000 fd21 	bl	800dbd4 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value MY_CHAR command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 800d192:	e004      	b.n	800d19e <Custom_STM_App_Update_Char+0x4e>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value MY_CHAR command\n\r");
 800d194:	4807      	ldr	r0, [pc, #28]	; (800d1b4 <Custom_STM_App_Update_Char+0x64>)
 800d196:	f000 fd1d 	bl	800dbd4 <iprintf>
      break;
 800d19a:	e000      	b.n	800d19e <Custom_STM_App_Update_Char+0x4e>

    default:
      break;
 800d19c:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800d19e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3710      	adds	r7, #16
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}
 800d1a8:	200028b0 	.word	0x200028b0
 800d1ac:	20000024 	.word	0x20000024
 800d1b0:	0800fd14 	.word	0x0800fd14
 800d1b4:	0800fd5c 	.word	0x0800fd5c

0800d1b8 <LL_PWR_EnableBootC2>:
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800d1bc:	4b05      	ldr	r3, [pc, #20]	; (800d1d4 <LL_PWR_EnableBootC2+0x1c>)
 800d1be:	68db      	ldr	r3, [r3, #12]
 800d1c0:	4a04      	ldr	r2, [pc, #16]	; (800d1d4 <LL_PWR_EnableBootC2+0x1c>)
 800d1c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d1c6:	60d3      	str	r3, [r2, #12]
}
 800d1c8:	bf00      	nop
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d0:	4770      	bx	lr
 800d1d2:	bf00      	nop
 800d1d4:	58000400 	.word	0x58000400

0800d1d8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b083      	sub	sp, #12
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800d1e0:	4b06      	ldr	r3, [pc, #24]	; (800d1fc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800d1e2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800d1e6:	4905      	ldr	r1, [pc, #20]	; (800d1fc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800d1f0:	bf00      	nop
 800d1f2:	370c      	adds	r7, #12
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr
 800d1fc:	58000800 	.word	0x58000800

0800d200 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800d200:	b480      	push	{r7}
 800d202:	b083      	sub	sp, #12
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800d208:	4b05      	ldr	r3, [pc, #20]	; (800d220 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d20a:	6a1a      	ldr	r2, [r3, #32]
 800d20c:	4904      	ldr	r1, [pc, #16]	; (800d220 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	4313      	orrs	r3, r2
 800d212:	620b      	str	r3, [r1, #32]
}
 800d214:	bf00      	nop
 800d216:	370c      	adds	r7, #12
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr
 800d220:	58000800 	.word	0x58000800

0800d224 <LL_AHB3_GRP1_EnableClock>:
{
 800d224:	b480      	push	{r7}
 800d226:	b085      	sub	sp, #20
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800d22c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d230:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d232:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	4313      	orrs	r3, r2
 800d23a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800d23c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d240:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	4013      	ands	r3, r2
 800d246:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d248:	68fb      	ldr	r3, [r7, #12]
}
 800d24a:	bf00      	nop
 800d24c:	3714      	adds	r7, #20
 800d24e:	46bd      	mov	sp, r7
 800d250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d254:	4770      	bx	lr

0800d256 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800d256:	b480      	push	{r7}
 800d258:	b085      	sub	sp, #20
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800d25e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d262:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800d266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	4313      	orrs	r3, r2
 800d26e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800d272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d276:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	4013      	ands	r3, r2
 800d27e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d280:	68fb      	ldr	r3, [r7, #12]
}
 800d282:	bf00      	nop
 800d284:	3714      	adds	r7, #20
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr

0800d28e <LL_C1_IPCC_EnableIT_TXF>:
{
 800d28e:	b480      	push	{r7}
 800d290:	b083      	sub	sp, #12
 800d292:	af00      	add	r7, sp, #0
 800d294:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	601a      	str	r2, [r3, #0]
}
 800d2a2:	bf00      	nop
 800d2a4:	370c      	adds	r7, #12
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ac:	4770      	bx	lr

0800d2ae <LL_C1_IPCC_EnableIT_RXO>:
{
 800d2ae:	b480      	push	{r7}
 800d2b0:	b083      	sub	sp, #12
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f043 0201 	orr.w	r2, r3, #1
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	601a      	str	r2, [r3, #0]
}
 800d2c2:	bf00      	nop
 800d2c4:	370c      	adds	r7, #12
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr

0800d2ce <LL_C1_IPCC_EnableTransmitChannel>:
{
 800d2ce:	b480      	push	{r7}
 800d2d0:	b083      	sub	sp, #12
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	6078      	str	r0, [r7, #4]
 800d2d6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	685a      	ldr	r2, [r3, #4]
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	041b      	lsls	r3, r3, #16
 800d2e0:	43db      	mvns	r3, r3
 800d2e2:	401a      	ands	r2, r3
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	605a      	str	r2, [r3, #4]
}
 800d2e8:	bf00      	nop
 800d2ea:	370c      	adds	r7, #12
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr

0800d2f4 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b083      	sub	sp, #12
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	685a      	ldr	r2, [r3, #4]
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	041b      	lsls	r3, r3, #16
 800d306:	431a      	orrs	r2, r3
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	605a      	str	r2, [r3, #4]
}
 800d30c:	bf00      	nop
 800d30e:	370c      	adds	r7, #12
 800d310:	46bd      	mov	sp, r7
 800d312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d316:	4770      	bx	lr

0800d318 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800d318:	b480      	push	{r7}
 800d31a:	b083      	sub	sp, #12
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	685a      	ldr	r2, [r3, #4]
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	43db      	mvns	r3, r3
 800d32a:	401a      	ands	r2, r3
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	605a      	str	r2, [r3, #4]
}
 800d330:	bf00      	nop
 800d332:	370c      	adds	r7, #12
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <LL_C1_IPCC_ClearFlag_CHx>:
{
 800d33c:	b480      	push	{r7}
 800d33e:	b083      	sub	sp, #12
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	683a      	ldr	r2, [r7, #0]
 800d34a:	609a      	str	r2, [r3, #8]
}
 800d34c:	bf00      	nop
 800d34e:	370c      	adds	r7, #12
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr

0800d358 <LL_C1_IPCC_SetFlag_CHx>:
{
 800d358:	b480      	push	{r7}
 800d35a:	b083      	sub	sp, #12
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	041a      	lsls	r2, r3, #16
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	609a      	str	r2, [r3, #8]
}
 800d36a:	bf00      	nop
 800d36c:	370c      	adds	r7, #12
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr

0800d376 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800d376:	b480      	push	{r7}
 800d378:	b083      	sub	sp, #12
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
 800d37e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	68da      	ldr	r2, [r3, #12]
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	4013      	ands	r3, r2
 800d388:	683a      	ldr	r2, [r7, #0]
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d101      	bne.n	800d392 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800d38e:	2301      	movs	r3, #1
 800d390:	e000      	b.n	800d394 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800d392:	2300      	movs	r3, #0
}
 800d394:	4618      	mov	r0, r3
 800d396:	370c      	adds	r7, #12
 800d398:	46bd      	mov	sp, r7
 800d39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39e:	4770      	bx	lr

0800d3a0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	b083      	sub	sp, #12
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
 800d3a8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	69da      	ldr	r2, [r3, #28]
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	4013      	ands	r3, r2
 800d3b2:	683a      	ldr	r2, [r7, #0]
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d101      	bne.n	800d3bc <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	e000      	b.n	800d3be <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800d3bc:	2300      	movs	r3, #0
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	370c      	adds	r7, #12
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c8:	4770      	bx	lr
	...

0800d3cc <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800d3d0:	2102      	movs	r1, #2
 800d3d2:	4819      	ldr	r0, [pc, #100]	; (800d438 <HW_IPCC_Rx_Handler+0x6c>)
 800d3d4:	f7ff ffe4 	bl	800d3a0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d009      	beq.n	800d3f2 <HW_IPCC_Rx_Handler+0x26>
 800d3de:	4b16      	ldr	r3, [pc, #88]	; (800d438 <HW_IPCC_Rx_Handler+0x6c>)
 800d3e0:	685b      	ldr	r3, [r3, #4]
 800d3e2:	43db      	mvns	r3, r3
 800d3e4:	f003 0302 	and.w	r3, r3, #2
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d002      	beq.n	800d3f2 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800d3ec:	f000 f8da 	bl	800d5a4 <HW_IPCC_SYS_EvtHandler>
 800d3f0:	e01f      	b.n	800d432 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800d3f2:	2101      	movs	r1, #1
 800d3f4:	4810      	ldr	r0, [pc, #64]	; (800d438 <HW_IPCC_Rx_Handler+0x6c>)
 800d3f6:	f7ff ffd3 	bl	800d3a0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d008      	beq.n	800d412 <HW_IPCC_Rx_Handler+0x46>
 800d400:	4b0d      	ldr	r3, [pc, #52]	; (800d438 <HW_IPCC_Rx_Handler+0x6c>)
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	f003 0301 	and.w	r3, r3, #1
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d102      	bne.n	800d412 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800d40c:	f000 f88e 	bl	800d52c <HW_IPCC_BLE_EvtHandler>
 800d410:	e00f      	b.n	800d432 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800d412:	2108      	movs	r1, #8
 800d414:	4808      	ldr	r0, [pc, #32]	; (800d438 <HW_IPCC_Rx_Handler+0x6c>)
 800d416:	f7ff ffc3 	bl	800d3a0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d41a:	4603      	mov	r3, r0
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d009      	beq.n	800d434 <HW_IPCC_Rx_Handler+0x68>
 800d420:	4b05      	ldr	r3, [pc, #20]	; (800d438 <HW_IPCC_Rx_Handler+0x6c>)
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	43db      	mvns	r3, r3
 800d426:	f003 0308 	and.w	r3, r3, #8
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d002      	beq.n	800d434 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800d42e:	f000 f905 	bl	800d63c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800d432:	bf00      	nop
 800d434:	bf00      	nop
}
 800d436:	bd80      	pop	{r7, pc}
 800d438:	58000c00 	.word	0x58000c00

0800d43c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d440:	2102      	movs	r1, #2
 800d442:	481a      	ldr	r0, [pc, #104]	; (800d4ac <HW_IPCC_Tx_Handler+0x70>)
 800d444:	f7ff ff97 	bl	800d376 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d109      	bne.n	800d462 <HW_IPCC_Tx_Handler+0x26>
 800d44e:	4b17      	ldr	r3, [pc, #92]	; (800d4ac <HW_IPCC_Tx_Handler+0x70>)
 800d450:	685b      	ldr	r3, [r3, #4]
 800d452:	43db      	mvns	r3, r3
 800d454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d002      	beq.n	800d462 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d45c:	f000 f896 	bl	800d58c <HW_IPCC_SYS_CmdEvtHandler>
 800d460:	e020      	b.n	800d4a4 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800d462:	2108      	movs	r1, #8
 800d464:	4811      	ldr	r0, [pc, #68]	; (800d4ac <HW_IPCC_Tx_Handler+0x70>)
 800d466:	f7ff ff86 	bl	800d376 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d46a:	4603      	mov	r3, r0
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d109      	bne.n	800d484 <HW_IPCC_Tx_Handler+0x48>
 800d470:	4b0e      	ldr	r3, [pc, #56]	; (800d4ac <HW_IPCC_Tx_Handler+0x70>)
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	43db      	mvns	r3, r3
 800d476:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d002      	beq.n	800d484 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 800d47e:	f000 f8bf 	bl	800d600 <HW_IPCC_MM_FreeBufHandler>
 800d482:	e00f      	b.n	800d4a4 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800d484:	2120      	movs	r1, #32
 800d486:	4809      	ldr	r0, [pc, #36]	; (800d4ac <HW_IPCC_Tx_Handler+0x70>)
 800d488:	f7ff ff75 	bl	800d376 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d48c:	4603      	mov	r3, r0
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d109      	bne.n	800d4a6 <HW_IPCC_Tx_Handler+0x6a>
 800d492:	4b06      	ldr	r3, [pc, #24]	; (800d4ac <HW_IPCC_Tx_Handler+0x70>)
 800d494:	685b      	ldr	r3, [r3, #4]
 800d496:	43db      	mvns	r3, r3
 800d498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d002      	beq.n	800d4a6 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800d4a0:	f000 f850 	bl	800d544 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800d4a4:	bf00      	nop
 800d4a6:	bf00      	nop
}
 800d4a8:	bd80      	pop	{r7, pc}
 800d4aa:	bf00      	nop
 800d4ac:	58000c00 	.word	0x58000c00

0800d4b0 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800d4b4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d4b8:	f7ff fecd 	bl	800d256 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800d4bc:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d4c0:	f7ff fe9e 	bl	800d200 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800d4c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d4c8:	f7ff fe86 	bl	800d1d8 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800d4cc:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800d4ce:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800d4d0:	f7ff fe72 	bl	800d1b8 <LL_PWR_EnableBootC2>

  return;
 800d4d4:	bf00      	nop
}
 800d4d6:	bd80      	pop	{r7, pc}

0800d4d8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800d4dc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d4e0:	f7ff fea0 	bl	800d224 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800d4e4:	4806      	ldr	r0, [pc, #24]	; (800d500 <HW_IPCC_Init+0x28>)
 800d4e6:	f7ff fee2 	bl	800d2ae <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800d4ea:	4805      	ldr	r0, [pc, #20]	; (800d500 <HW_IPCC_Init+0x28>)
 800d4ec:	f7ff fecf 	bl	800d28e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800d4f0:	202c      	movs	r0, #44	; 0x2c
 800d4f2:	f7f7 fb2e 	bl	8004b52 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800d4f6:	202d      	movs	r0, #45	; 0x2d
 800d4f8:	f7f7 fb2b 	bl	8004b52 <HAL_NVIC_EnableIRQ>

  return;
 800d4fc:	bf00      	nop
}
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	58000c00 	.word	0x58000c00

0800d504 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800d504:	b580      	push	{r7, lr}
 800d506:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d508:	2101      	movs	r1, #1
 800d50a:	4802      	ldr	r0, [pc, #8]	; (800d514 <HW_IPCC_BLE_Init+0x10>)
 800d50c:	f7ff ff04 	bl	800d318 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d510:	bf00      	nop
}
 800d512:	bd80      	pop	{r7, pc}
 800d514:	58000c00 	.word	0x58000c00

0800d518 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800d51c:	2101      	movs	r1, #1
 800d51e:	4802      	ldr	r0, [pc, #8]	; (800d528 <HW_IPCC_BLE_SendCmd+0x10>)
 800d520:	f7ff ff1a 	bl	800d358 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d524:	bf00      	nop
}
 800d526:	bd80      	pop	{r7, pc}
 800d528:	58000c00 	.word	0x58000c00

0800d52c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800d530:	f7fe f84e 	bl	800b5d0 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d534:	2101      	movs	r1, #1
 800d536:	4802      	ldr	r0, [pc, #8]	; (800d540 <HW_IPCC_BLE_EvtHandler+0x14>)
 800d538:	f7ff ff00 	bl	800d33c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d53c:	bf00      	nop
}
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	58000c00 	.word	0x58000c00

0800d544 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800d544:	b580      	push	{r7, lr}
 800d546:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800d548:	2120      	movs	r1, #32
 800d54a:	4803      	ldr	r0, [pc, #12]	; (800d558 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800d54c:	f7ff fed2 	bl	800d2f4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800d550:	f7fe f86e 	bl	800b630 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800d554:	bf00      	nop
}
 800d556:	bd80      	pop	{r7, pc}
 800d558:	58000c00 	.word	0x58000c00

0800d55c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d560:	2102      	movs	r1, #2
 800d562:	4802      	ldr	r0, [pc, #8]	; (800d56c <HW_IPCC_SYS_Init+0x10>)
 800d564:	f7ff fed8 	bl	800d318 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d568:	bf00      	nop
}
 800d56a:	bd80      	pop	{r7, pc}
 800d56c:	58000c00 	.word	0x58000c00

0800d570 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800d570:	b580      	push	{r7, lr}
 800d572:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d574:	2102      	movs	r1, #2
 800d576:	4804      	ldr	r0, [pc, #16]	; (800d588 <HW_IPCC_SYS_SendCmd+0x18>)
 800d578:	f7ff feee 	bl	800d358 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d57c:	2102      	movs	r1, #2
 800d57e:	4802      	ldr	r0, [pc, #8]	; (800d588 <HW_IPCC_SYS_SendCmd+0x18>)
 800d580:	f7ff fea5 	bl	800d2ce <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800d584:	bf00      	nop
}
 800d586:	bd80      	pop	{r7, pc}
 800d588:	58000c00 	.word	0x58000c00

0800d58c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d590:	2102      	movs	r1, #2
 800d592:	4803      	ldr	r0, [pc, #12]	; (800d5a0 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800d594:	f7ff feae 	bl	800d2f4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800d598:	f7fe f89a 	bl	800b6d0 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800d59c:	bf00      	nop
}
 800d59e:	bd80      	pop	{r7, pc}
 800d5a0:	58000c00 	.word	0x58000c00

0800d5a4 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800d5a8:	f7fe f8a8 	bl	800b6fc <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d5ac:	2102      	movs	r1, #2
 800d5ae:	4802      	ldr	r0, [pc, #8]	; (800d5b8 <HW_IPCC_SYS_EvtHandler+0x14>)
 800d5b0:	f7ff fec4 	bl	800d33c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d5b4:	bf00      	nop
}
 800d5b6:	bd80      	pop	{r7, pc}
 800d5b8:	58000c00 	.word	0x58000c00

0800d5bc <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b082      	sub	sp, #8
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800d5c4:	2108      	movs	r1, #8
 800d5c6:	480c      	ldr	r0, [pc, #48]	; (800d5f8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d5c8:	f7ff fed5 	bl	800d376 <LL_C1_IPCC_IsActiveFlag_CHx>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d007      	beq.n	800d5e2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800d5d2:	4a0a      	ldr	r2, [pc, #40]	; (800d5fc <HW_IPCC_MM_SendFreeBuf+0x40>)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d5d8:	2108      	movs	r1, #8
 800d5da:	4807      	ldr	r0, [pc, #28]	; (800d5f8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d5dc:	f7ff fe77 	bl	800d2ce <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800d5e0:	e006      	b.n	800d5f0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d5e6:	2108      	movs	r1, #8
 800d5e8:	4803      	ldr	r0, [pc, #12]	; (800d5f8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d5ea:	f7ff feb5 	bl	800d358 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800d5ee:	bf00      	nop
}
 800d5f0:	3708      	adds	r7, #8
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop
 800d5f8:	58000c00 	.word	0x58000c00
 800d5fc:	200028b4 	.word	0x200028b4

0800d600 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800d600:	b580      	push	{r7, lr}
 800d602:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d604:	2108      	movs	r1, #8
 800d606:	4806      	ldr	r0, [pc, #24]	; (800d620 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d608:	f7ff fe74 	bl	800d2f4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800d60c:	4b05      	ldr	r3, [pc, #20]	; (800d624 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d612:	2108      	movs	r1, #8
 800d614:	4802      	ldr	r0, [pc, #8]	; (800d620 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d616:	f7ff fe9f 	bl	800d358 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d61a:	bf00      	nop
}
 800d61c:	bd80      	pop	{r7, pc}
 800d61e:	bf00      	nop
 800d620:	58000c00 	.word	0x58000c00
 800d624:	200028b4 	.word	0x200028b4

0800d628 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d62c:	2108      	movs	r1, #8
 800d62e:	4802      	ldr	r0, [pc, #8]	; (800d638 <HW_IPCC_TRACES_Init+0x10>)
 800d630:	f7ff fe72 	bl	800d318 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d634:	bf00      	nop
}
 800d636:	bd80      	pop	{r7, pc}
 800d638:	58000c00 	.word	0x58000c00

0800d63c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800d640:	f7fe f904 	bl	800b84c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d644:	2108      	movs	r1, #8
 800d646:	4802      	ldr	r0, [pc, #8]	; (800d650 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800d648:	f7ff fe78 	bl	800d33c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d64c:	bf00      	nop
}
 800d64e:	bd80      	pop	{r7, pc}
 800d650:	58000c00 	.word	0x58000c00

0800d654 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800d654:	b480      	push	{r7}
 800d656:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800d658:	4b05      	ldr	r3, [pc, #20]	; (800d670 <UTIL_LPM_Init+0x1c>)
 800d65a:	2200      	movs	r2, #0
 800d65c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800d65e:	4b05      	ldr	r3, [pc, #20]	; (800d674 <UTIL_LPM_Init+0x20>)
 800d660:	2200      	movs	r2, #0
 800d662:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800d664:	bf00      	nop
 800d666:	46bd      	mov	sp, r7
 800d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66c:	4770      	bx	lr
 800d66e:	bf00      	nop
 800d670:	200028b8 	.word	0x200028b8
 800d674:	200028bc 	.word	0x200028bc

0800d678 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800d678:	b480      	push	{r7}
 800d67a:	b087      	sub	sp, #28
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
 800d680:	460b      	mov	r3, r1
 800d682:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d684:	f3ef 8310 	mrs	r3, PRIMASK
 800d688:	613b      	str	r3, [r7, #16]
  return(result);
 800d68a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800d68c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d68e:	b672      	cpsid	i
}
 800d690:	bf00      	nop
  
  switch(state)
 800d692:	78fb      	ldrb	r3, [r7, #3]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d008      	beq.n	800d6aa <UTIL_LPM_SetOffMode+0x32>
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d10e      	bne.n	800d6ba <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800d69c:	4b0d      	ldr	r3, [pc, #52]	; (800d6d4 <UTIL_LPM_SetOffMode+0x5c>)
 800d69e:	681a      	ldr	r2, [r3, #0]
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	4313      	orrs	r3, r2
 800d6a4:	4a0b      	ldr	r2, [pc, #44]	; (800d6d4 <UTIL_LPM_SetOffMode+0x5c>)
 800d6a6:	6013      	str	r3, [r2, #0]
      break;
 800d6a8:	e008      	b.n	800d6bc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	43da      	mvns	r2, r3
 800d6ae:	4b09      	ldr	r3, [pc, #36]	; (800d6d4 <UTIL_LPM_SetOffMode+0x5c>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	4013      	ands	r3, r2
 800d6b4:	4a07      	ldr	r2, [pc, #28]	; (800d6d4 <UTIL_LPM_SetOffMode+0x5c>)
 800d6b6:	6013      	str	r3, [r2, #0]
      break;
 800d6b8:	e000      	b.n	800d6bc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800d6ba:	bf00      	nop
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f383 8810 	msr	PRIMASK, r3
}
 800d6c6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800d6c8:	bf00      	nop
 800d6ca:	371c      	adds	r7, #28
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d2:	4770      	bx	lr
 800d6d4:	200028bc 	.word	0x200028bc

0800d6d8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b090      	sub	sp, #64	; 0x40
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800d6e0:	4b73      	ldr	r3, [pc, #460]	; (800d8b0 <UTIL_SEQ_Run+0x1d8>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800d6e6:	4b72      	ldr	r3, [pc, #456]	; (800d8b0 <UTIL_SEQ_Run+0x1d8>)
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	4013      	ands	r3, r2
 800d6ee:	4a70      	ldr	r2, [pc, #448]	; (800d8b0 <UTIL_SEQ_Run+0x1d8>)
 800d6f0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800d6f2:	4b70      	ldr	r3, [pc, #448]	; (800d8b4 <UTIL_SEQ_Run+0x1dc>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800d6f8:	4b6f      	ldr	r3, [pc, #444]	; (800d8b8 <UTIL_SEQ_Run+0x1e0>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800d6fe:	4b6f      	ldr	r3, [pc, #444]	; (800d8bc <UTIL_SEQ_Run+0x1e4>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800d704:	4b6e      	ldr	r3, [pc, #440]	; (800d8c0 <UTIL_SEQ_Run+0x1e8>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800d70a:	e08d      	b.n	800d828 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800d70c:	2300      	movs	r3, #0
 800d70e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800d710:	e002      	b.n	800d718 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800d712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d714:	3301      	adds	r3, #1
 800d716:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800d718:	4a6a      	ldr	r2, [pc, #424]	; (800d8c4 <UTIL_SEQ_Run+0x1ec>)
 800d71a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d71c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d722:	401a      	ands	r2, r3
 800d724:	4b62      	ldr	r3, [pc, #392]	; (800d8b0 <UTIL_SEQ_Run+0x1d8>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	4013      	ands	r3, r2
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d0f1      	beq.n	800d712 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800d72e:	4a65      	ldr	r2, [pc, #404]	; (800d8c4 <UTIL_SEQ_Run+0x1ec>)
 800d730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d732:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d738:	401a      	ands	r2, r3
 800d73a:	4b5d      	ldr	r3, [pc, #372]	; (800d8b0 <UTIL_SEQ_Run+0x1d8>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	4013      	ands	r3, r2
 800d740:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800d742:	4a60      	ldr	r2, [pc, #384]	; (800d8c4 <UTIL_SEQ_Run+0x1ec>)
 800d744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d746:	00db      	lsls	r3, r3, #3
 800d748:	4413      	add	r3, r2
 800d74a:	685a      	ldr	r2, [r3, #4]
 800d74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74e:	4013      	ands	r3, r2
 800d750:	2b00      	cmp	r3, #0
 800d752:	d106      	bne.n	800d762 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800d754:	4a5b      	ldr	r2, [pc, #364]	; (800d8c4 <UTIL_SEQ_Run+0x1ec>)
 800d756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d758:	00db      	lsls	r3, r3, #3
 800d75a:	4413      	add	r3, r2
 800d75c:	f04f 32ff 	mov.w	r2, #4294967295
 800d760:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800d762:	4a58      	ldr	r2, [pc, #352]	; (800d8c4 <UTIL_SEQ_Run+0x1ec>)
 800d764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d766:	00db      	lsls	r3, r3, #3
 800d768:	4413      	add	r3, r2
 800d76a:	685a      	ldr	r2, [r3, #4]
 800d76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76e:	4013      	ands	r3, r2
 800d770:	4618      	mov	r0, r3
 800d772:	f000 f9b3 	bl	800dadc <SEQ_BitPosition>
 800d776:	4603      	mov	r3, r0
 800d778:	461a      	mov	r2, r3
 800d77a:	4b53      	ldr	r3, [pc, #332]	; (800d8c8 <UTIL_SEQ_Run+0x1f0>)
 800d77c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800d77e:	4a51      	ldr	r2, [pc, #324]	; (800d8c4 <UTIL_SEQ_Run+0x1ec>)
 800d780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d782:	00db      	lsls	r3, r3, #3
 800d784:	4413      	add	r3, r2
 800d786:	685a      	ldr	r2, [r3, #4]
 800d788:	4b4f      	ldr	r3, [pc, #316]	; (800d8c8 <UTIL_SEQ_Run+0x1f0>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	2101      	movs	r1, #1
 800d78e:	fa01 f303 	lsl.w	r3, r1, r3
 800d792:	43db      	mvns	r3, r3
 800d794:	401a      	ands	r2, r3
 800d796:	494b      	ldr	r1, [pc, #300]	; (800d8c4 <UTIL_SEQ_Run+0x1ec>)
 800d798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d79a:	00db      	lsls	r3, r3, #3
 800d79c:	440b      	add	r3, r1
 800d79e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7a0:	f3ef 8310 	mrs	r3, PRIMASK
 800d7a4:	61bb      	str	r3, [r7, #24]
  return(result);
 800d7a6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d7a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800d7aa:	b672      	cpsid	i
}
 800d7ac:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800d7ae:	4b46      	ldr	r3, [pc, #280]	; (800d8c8 <UTIL_SEQ_Run+0x1f0>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	fa02 f303 	lsl.w	r3, r2, r3
 800d7b8:	43da      	mvns	r2, r3
 800d7ba:	4b3e      	ldr	r3, [pc, #248]	; (800d8b4 <UTIL_SEQ_Run+0x1dc>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	4013      	ands	r3, r2
 800d7c0:	4a3c      	ldr	r2, [pc, #240]	; (800d8b4 <UTIL_SEQ_Run+0x1dc>)
 800d7c2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d7c4:	2302      	movs	r3, #2
 800d7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d7c8:	e013      	b.n	800d7f2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800d7ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7cc:	3b01      	subs	r3, #1
 800d7ce:	4a3d      	ldr	r2, [pc, #244]	; (800d8c4 <UTIL_SEQ_Run+0x1ec>)
 800d7d0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800d7d4:	4b3c      	ldr	r3, [pc, #240]	; (800d8c8 <UTIL_SEQ_Run+0x1f0>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	2201      	movs	r2, #1
 800d7da:	fa02 f303 	lsl.w	r3, r2, r3
 800d7de:	43da      	mvns	r2, r3
 800d7e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7e2:	3b01      	subs	r3, #1
 800d7e4:	400a      	ands	r2, r1
 800d7e6:	4937      	ldr	r1, [pc, #220]	; (800d8c4 <UTIL_SEQ_Run+0x1ec>)
 800d7e8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7ee:	3b01      	subs	r3, #1
 800d7f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d7f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d1e8      	bne.n	800d7ca <UTIL_SEQ_Run+0xf2>
 800d7f8:	6a3b      	ldr	r3, [r7, #32]
 800d7fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	f383 8810 	msr	PRIMASK, r3
}
 800d802:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800d804:	4b30      	ldr	r3, [pc, #192]	; (800d8c8 <UTIL_SEQ_Run+0x1f0>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	4a30      	ldr	r2, [pc, #192]	; (800d8cc <UTIL_SEQ_Run+0x1f4>)
 800d80a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d80e:	4798      	blx	r3

    local_taskset = TaskSet;
 800d810:	4b28      	ldr	r3, [pc, #160]	; (800d8b4 <UTIL_SEQ_Run+0x1dc>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800d816:	4b28      	ldr	r3, [pc, #160]	; (800d8b8 <UTIL_SEQ_Run+0x1e0>)
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800d81c:	4b27      	ldr	r3, [pc, #156]	; (800d8bc <UTIL_SEQ_Run+0x1e4>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800d822:	4b27      	ldr	r3, [pc, #156]	; (800d8c0 <UTIL_SEQ_Run+0x1e8>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800d828:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d82c:	401a      	ands	r2, r3
 800d82e:	4b20      	ldr	r3, [pc, #128]	; (800d8b0 <UTIL_SEQ_Run+0x1d8>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	4013      	ands	r3, r2
 800d834:	2b00      	cmp	r3, #0
 800d836:	d005      	beq.n	800d844 <UTIL_SEQ_Run+0x16c>
 800d838:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d83c:	4013      	ands	r3, r2
 800d83e:	2b00      	cmp	r3, #0
 800d840:	f43f af64 	beq.w	800d70c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800d844:	4b20      	ldr	r3, [pc, #128]	; (800d8c8 <UTIL_SEQ_Run+0x1f0>)
 800d846:	f04f 32ff 	mov.w	r2, #4294967295
 800d84a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800d84c:	f000 f938 	bl	800dac0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d850:	f3ef 8310 	mrs	r3, PRIMASK
 800d854:	613b      	str	r3, [r7, #16]
  return(result);
 800d856:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800d858:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d85a:	b672      	cpsid	i
}
 800d85c:	bf00      	nop
  local_taskset = TaskSet;
 800d85e:	4b15      	ldr	r3, [pc, #84]	; (800d8b4 <UTIL_SEQ_Run+0x1dc>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800d864:	4b14      	ldr	r3, [pc, #80]	; (800d8b8 <UTIL_SEQ_Run+0x1e0>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800d86a:	4b14      	ldr	r3, [pc, #80]	; (800d8bc <UTIL_SEQ_Run+0x1e4>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800d870:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d874:	401a      	ands	r2, r3
 800d876:	4b0e      	ldr	r3, [pc, #56]	; (800d8b0 <UTIL_SEQ_Run+0x1d8>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	4013      	ands	r3, r2
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d107      	bne.n	800d890 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800d880:	4b0f      	ldr	r3, [pc, #60]	; (800d8c0 <UTIL_SEQ_Run+0x1e8>)
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d886:	4013      	ands	r3, r2
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d101      	bne.n	800d890 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800d88c:	f7f3 fe1b 	bl	80014c6 <UTIL_SEQ_Idle>
 800d890:	69fb      	ldr	r3, [r7, #28]
 800d892:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	f383 8810 	msr	PRIMASK, r3
}
 800d89a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800d89c:	f000 f917 	bl	800dace <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800d8a0:	4a03      	ldr	r2, [pc, #12]	; (800d8b0 <UTIL_SEQ_Run+0x1d8>)
 800d8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a4:	6013      	str	r3, [r2, #0]

  return;
 800d8a6:	bf00      	nop
}
 800d8a8:	3740      	adds	r7, #64	; 0x40
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}
 800d8ae:	bf00      	nop
 800d8b0:	2000002c 	.word	0x2000002c
 800d8b4:	200028c0 	.word	0x200028c0
 800d8b8:	200028c4 	.word	0x200028c4
 800d8bc:	20000028 	.word	0x20000028
 800d8c0:	200028c8 	.word	0x200028c8
 800d8c4:	20002950 	.word	0x20002950
 800d8c8:	200028cc 	.word	0x200028cc
 800d8cc:	200028d0 	.word	0x200028d0

0800d8d0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b088      	sub	sp, #32
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	60f8      	str	r0, [r7, #12]
 800d8d8:	60b9      	str	r1, [r7, #8]
 800d8da:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8dc:	f3ef 8310 	mrs	r3, PRIMASK
 800d8e0:	617b      	str	r3, [r7, #20]
  return(result);
 800d8e2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800d8e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d8e6:	b672      	cpsid	i
}
 800d8e8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800d8ea:	68f8      	ldr	r0, [r7, #12]
 800d8ec:	f000 f8f6 	bl	800dadc <SEQ_BitPosition>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	4a06      	ldr	r2, [pc, #24]	; (800d910 <UTIL_SEQ_RegTask+0x40>)
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d8fc:	69fb      	ldr	r3, [r7, #28]
 800d8fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d900:	69bb      	ldr	r3, [r7, #24]
 800d902:	f383 8810 	msr	PRIMASK, r3
}
 800d906:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800d908:	bf00      	nop
}
 800d90a:	3720      	adds	r7, #32
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}
 800d910:	200028d0 	.word	0x200028d0

0800d914 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800d914:	b480      	push	{r7}
 800d916:	b087      	sub	sp, #28
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
 800d91c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d91e:	f3ef 8310 	mrs	r3, PRIMASK
 800d922:	60fb      	str	r3, [r7, #12]
  return(result);
 800d924:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d926:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d928:	b672      	cpsid	i
}
 800d92a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800d92c:	4b0d      	ldr	r3, [pc, #52]	; (800d964 <UTIL_SEQ_SetTask+0x50>)
 800d92e:	681a      	ldr	r2, [r3, #0]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	4313      	orrs	r3, r2
 800d934:	4a0b      	ldr	r2, [pc, #44]	; (800d964 <UTIL_SEQ_SetTask+0x50>)
 800d936:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800d938:	4a0b      	ldr	r2, [pc, #44]	; (800d968 <UTIL_SEQ_SetTask+0x54>)
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	431a      	orrs	r2, r3
 800d944:	4908      	ldr	r1, [pc, #32]	; (800d968 <UTIL_SEQ_SetTask+0x54>)
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	f383 8810 	msr	PRIMASK, r3
}
 800d956:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d958:	bf00      	nop
}
 800d95a:	371c      	adds	r7, #28
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr
 800d964:	200028c0 	.word	0x200028c0
 800d968:	20002950 	.word	0x20002950

0800d96c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800d96c:	b480      	push	{r7}
 800d96e:	b087      	sub	sp, #28
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d974:	f3ef 8310 	mrs	r3, PRIMASK
 800d978:	60fb      	str	r3, [r7, #12]
  return(result);
 800d97a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d97c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d97e:	b672      	cpsid	i
}
 800d980:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	43da      	mvns	r2, r3
 800d986:	4b08      	ldr	r3, [pc, #32]	; (800d9a8 <UTIL_SEQ_PauseTask+0x3c>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4013      	ands	r3, r2
 800d98c:	4a06      	ldr	r2, [pc, #24]	; (800d9a8 <UTIL_SEQ_PauseTask+0x3c>)
 800d98e:	6013      	str	r3, [r2, #0]
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d994:	693b      	ldr	r3, [r7, #16]
 800d996:	f383 8810 	msr	PRIMASK, r3
}
 800d99a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d99c:	bf00      	nop
}
 800d99e:	371c      	adds	r7, #28
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a6:	4770      	bx	lr
 800d9a8:	20000028 	.word	0x20000028

0800d9ac <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b087      	sub	sp, #28
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9b4:	f3ef 8310 	mrs	r3, PRIMASK
 800d9b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d9ba:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d9bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d9be:	b672      	cpsid	i
}
 800d9c0:	bf00      	nop

  TaskMask |= TaskId_bm;
 800d9c2:	4b09      	ldr	r3, [pc, #36]	; (800d9e8 <UTIL_SEQ_ResumeTask+0x3c>)
 800d9c4:	681a      	ldr	r2, [r3, #0]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	4313      	orrs	r3, r2
 800d9ca:	4a07      	ldr	r2, [pc, #28]	; (800d9e8 <UTIL_SEQ_ResumeTask+0x3c>)
 800d9cc:	6013      	str	r3, [r2, #0]
 800d9ce:	697b      	ldr	r3, [r7, #20]
 800d9d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	f383 8810 	msr	PRIMASK, r3
}
 800d9d8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d9da:	bf00      	nop
}
 800d9dc:	371c      	adds	r7, #28
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e4:	4770      	bx	lr
 800d9e6:	bf00      	nop
 800d9e8:	20000028 	.word	0x20000028

0800d9ec <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b087      	sub	sp, #28
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9f4:	f3ef 8310 	mrs	r3, PRIMASK
 800d9f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d9fa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d9fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d9fe:	b672      	cpsid	i
}
 800da00:	bf00      	nop

  EvtSet |= EvtId_bm;
 800da02:	4b09      	ldr	r3, [pc, #36]	; (800da28 <UTIL_SEQ_SetEvt+0x3c>)
 800da04:	681a      	ldr	r2, [r3, #0]
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	4313      	orrs	r3, r2
 800da0a:	4a07      	ldr	r2, [pc, #28]	; (800da28 <UTIL_SEQ_SetEvt+0x3c>)
 800da0c:	6013      	str	r3, [r2, #0]
 800da0e:	697b      	ldr	r3, [r7, #20]
 800da10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da12:	693b      	ldr	r3, [r7, #16]
 800da14:	f383 8810 	msr	PRIMASK, r3
}
 800da18:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800da1a:	bf00      	nop
}
 800da1c:	371c      	adds	r7, #28
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr
 800da26:	bf00      	nop
 800da28:	200028c4 	.word	0x200028c4

0800da2c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b088      	sub	sp, #32
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800da34:	4b1f      	ldr	r3, [pc, #124]	; (800dab4 <UTIL_SEQ_WaitEvt+0x88>)
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800da3a:	4b1e      	ldr	r3, [pc, #120]	; (800dab4 <UTIL_SEQ_WaitEvt+0x88>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da42:	d102      	bne.n	800da4a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800da44:	2300      	movs	r3, #0
 800da46:	61fb      	str	r3, [r7, #28]
 800da48:	e005      	b.n	800da56 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800da4a:	4b1a      	ldr	r3, [pc, #104]	; (800dab4 <UTIL_SEQ_WaitEvt+0x88>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	2201      	movs	r2, #1
 800da50:	fa02 f303 	lsl.w	r3, r2, r3
 800da54:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800da56:	4b18      	ldr	r3, [pc, #96]	; (800dab8 <UTIL_SEQ_WaitEvt+0x8c>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800da5c:	4a16      	ldr	r2, [pc, #88]	; (800dab8 <UTIL_SEQ_WaitEvt+0x8c>)
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800da62:	e003      	b.n	800da6c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800da64:	6879      	ldr	r1, [r7, #4]
 800da66:	69f8      	ldr	r0, [r7, #28]
 800da68:	f7f3 fd34 	bl	80014d4 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800da6c:	4b13      	ldr	r3, [pc, #76]	; (800dabc <UTIL_SEQ_WaitEvt+0x90>)
 800da6e:	681a      	ldr	r2, [r3, #0]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	4013      	ands	r3, r2
 800da74:	2b00      	cmp	r3, #0
 800da76:	d0f5      	beq.n	800da64 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800da78:	4a0e      	ldr	r2, [pc, #56]	; (800dab4 <UTIL_SEQ_WaitEvt+0x88>)
 800da7a:	69bb      	ldr	r3, [r7, #24]
 800da7c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da7e:	f3ef 8310 	mrs	r3, PRIMASK
 800da82:	60bb      	str	r3, [r7, #8]
  return(result);
 800da84:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800da86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800da88:	b672      	cpsid	i
}
 800da8a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	43da      	mvns	r2, r3
 800da90:	4b0a      	ldr	r3, [pc, #40]	; (800dabc <UTIL_SEQ_WaitEvt+0x90>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4013      	ands	r3, r2
 800da96:	4a09      	ldr	r2, [pc, #36]	; (800dabc <UTIL_SEQ_WaitEvt+0x90>)
 800da98:	6013      	str	r3, [r2, #0]
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	f383 8810 	msr	PRIMASK, r3
}
 800daa4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800daa6:	4a04      	ldr	r2, [pc, #16]	; (800dab8 <UTIL_SEQ_WaitEvt+0x8c>)
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	6013      	str	r3, [r2, #0]
  return;
 800daac:	bf00      	nop
}
 800daae:	3720      	adds	r7, #32
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}
 800dab4:	200028cc 	.word	0x200028cc
 800dab8:	200028c8 	.word	0x200028c8
 800dabc:	200028c4 	.word	0x200028c4

0800dac0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800dac0:	b480      	push	{r7}
 800dac2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800dac4:	bf00      	nop
}
 800dac6:	46bd      	mov	sp, r7
 800dac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dacc:	4770      	bx	lr

0800dace <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800dace:	b480      	push	{r7}
 800dad0:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800dad2:	bf00      	nop
}
 800dad4:	46bd      	mov	sp, r7
 800dad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dada:	4770      	bx	lr

0800dadc <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800dadc:	b480      	push	{r7}
 800dade:	b085      	sub	sp, #20
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800dae4:	2300      	movs	r3, #0
 800dae6:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	0c1b      	lsrs	r3, r3, #16
 800daf0:	041b      	lsls	r3, r3, #16
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d104      	bne.n	800db00 <SEQ_BitPosition+0x24>
 800daf6:	2310      	movs	r3, #16
 800daf8:	73fb      	strb	r3, [r7, #15]
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	041b      	lsls	r3, r3, #16
 800dafe:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800db06:	2b00      	cmp	r3, #0
 800db08:	d105      	bne.n	800db16 <SEQ_BitPosition+0x3a>
 800db0a:	7bfb      	ldrb	r3, [r7, #15]
 800db0c:	3308      	adds	r3, #8
 800db0e:	73fb      	strb	r3, [r7, #15]
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	021b      	lsls	r3, r3, #8
 800db14:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d105      	bne.n	800db2c <SEQ_BitPosition+0x50>
 800db20:	7bfb      	ldrb	r3, [r7, #15]
 800db22:	3304      	adds	r3, #4
 800db24:	73fb      	strb	r3, [r7, #15]
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	011b      	lsls	r3, r3, #4
 800db2a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	0f1b      	lsrs	r3, r3, #28
 800db30:	4a07      	ldr	r2, [pc, #28]	; (800db50 <SEQ_BitPosition+0x74>)
 800db32:	5cd2      	ldrb	r2, [r2, r3]
 800db34:	7bfb      	ldrb	r3, [r7, #15]
 800db36:	4413      	add	r3, r2
 800db38:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800db3a:	7bfb      	ldrb	r3, [r7, #15]
 800db3c:	f1c3 031f 	rsb	r3, r3, #31
 800db40:	b2db      	uxtb	r3, r3
}
 800db42:	4618      	mov	r0, r3
 800db44:	3714      	adds	r7, #20
 800db46:	46bd      	mov	sp, r7
 800db48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4c:	4770      	bx	lr
 800db4e:	bf00      	nop
 800db50:	0800ffb4 	.word	0x0800ffb4

0800db54 <__errno>:
 800db54:	4b01      	ldr	r3, [pc, #4]	; (800db5c <__errno+0x8>)
 800db56:	6818      	ldr	r0, [r3, #0]
 800db58:	4770      	bx	lr
 800db5a:	bf00      	nop
 800db5c:	20000030 	.word	0x20000030

0800db60 <__libc_init_array>:
 800db60:	b570      	push	{r4, r5, r6, lr}
 800db62:	4d0d      	ldr	r5, [pc, #52]	; (800db98 <__libc_init_array+0x38>)
 800db64:	4c0d      	ldr	r4, [pc, #52]	; (800db9c <__libc_init_array+0x3c>)
 800db66:	1b64      	subs	r4, r4, r5
 800db68:	10a4      	asrs	r4, r4, #2
 800db6a:	2600      	movs	r6, #0
 800db6c:	42a6      	cmp	r6, r4
 800db6e:	d109      	bne.n	800db84 <__libc_init_array+0x24>
 800db70:	4d0b      	ldr	r5, [pc, #44]	; (800dba0 <__libc_init_array+0x40>)
 800db72:	4c0c      	ldr	r4, [pc, #48]	; (800dba4 <__libc_init_array+0x44>)
 800db74:	f001 f890 	bl	800ec98 <_init>
 800db78:	1b64      	subs	r4, r4, r5
 800db7a:	10a4      	asrs	r4, r4, #2
 800db7c:	2600      	movs	r6, #0
 800db7e:	42a6      	cmp	r6, r4
 800db80:	d105      	bne.n	800db8e <__libc_init_array+0x2e>
 800db82:	bd70      	pop	{r4, r5, r6, pc}
 800db84:	f855 3b04 	ldr.w	r3, [r5], #4
 800db88:	4798      	blx	r3
 800db8a:	3601      	adds	r6, #1
 800db8c:	e7ee      	b.n	800db6c <__libc_init_array+0xc>
 800db8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800db92:	4798      	blx	r3
 800db94:	3601      	adds	r6, #1
 800db96:	e7f2      	b.n	800db7e <__libc_init_array+0x1e>
 800db98:	08010064 	.word	0x08010064
 800db9c:	08010064 	.word	0x08010064
 800dba0:	08010064 	.word	0x08010064
 800dba4:	08010068 	.word	0x08010068

0800dba8 <memcpy>:
 800dba8:	440a      	add	r2, r1
 800dbaa:	4291      	cmp	r1, r2
 800dbac:	f100 33ff 	add.w	r3, r0, #4294967295
 800dbb0:	d100      	bne.n	800dbb4 <memcpy+0xc>
 800dbb2:	4770      	bx	lr
 800dbb4:	b510      	push	{r4, lr}
 800dbb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dbbe:	4291      	cmp	r1, r2
 800dbc0:	d1f9      	bne.n	800dbb6 <memcpy+0xe>
 800dbc2:	bd10      	pop	{r4, pc}

0800dbc4 <memset>:
 800dbc4:	4402      	add	r2, r0
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	d100      	bne.n	800dbce <memset+0xa>
 800dbcc:	4770      	bx	lr
 800dbce:	f803 1b01 	strb.w	r1, [r3], #1
 800dbd2:	e7f9      	b.n	800dbc8 <memset+0x4>

0800dbd4 <iprintf>:
 800dbd4:	b40f      	push	{r0, r1, r2, r3}
 800dbd6:	4b0a      	ldr	r3, [pc, #40]	; (800dc00 <iprintf+0x2c>)
 800dbd8:	b513      	push	{r0, r1, r4, lr}
 800dbda:	681c      	ldr	r4, [r3, #0]
 800dbdc:	b124      	cbz	r4, 800dbe8 <iprintf+0x14>
 800dbde:	69a3      	ldr	r3, [r4, #24]
 800dbe0:	b913      	cbnz	r3, 800dbe8 <iprintf+0x14>
 800dbe2:	4620      	mov	r0, r4
 800dbe4:	f000 fa74 	bl	800e0d0 <__sinit>
 800dbe8:	ab05      	add	r3, sp, #20
 800dbea:	9a04      	ldr	r2, [sp, #16]
 800dbec:	68a1      	ldr	r1, [r4, #8]
 800dbee:	9301      	str	r3, [sp, #4]
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	f000 fc7d 	bl	800e4f0 <_vfiprintf_r>
 800dbf6:	b002      	add	sp, #8
 800dbf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbfc:	b004      	add	sp, #16
 800dbfe:	4770      	bx	lr
 800dc00:	20000030 	.word	0x20000030

0800dc04 <putchar>:
 800dc04:	4b09      	ldr	r3, [pc, #36]	; (800dc2c <putchar+0x28>)
 800dc06:	b513      	push	{r0, r1, r4, lr}
 800dc08:	681c      	ldr	r4, [r3, #0]
 800dc0a:	4601      	mov	r1, r0
 800dc0c:	b134      	cbz	r4, 800dc1c <putchar+0x18>
 800dc0e:	69a3      	ldr	r3, [r4, #24]
 800dc10:	b923      	cbnz	r3, 800dc1c <putchar+0x18>
 800dc12:	9001      	str	r0, [sp, #4]
 800dc14:	4620      	mov	r0, r4
 800dc16:	f000 fa5b 	bl	800e0d0 <__sinit>
 800dc1a:	9901      	ldr	r1, [sp, #4]
 800dc1c:	68a2      	ldr	r2, [r4, #8]
 800dc1e:	4620      	mov	r0, r4
 800dc20:	b002      	add	sp, #8
 800dc22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc26:	f000 bf27 	b.w	800ea78 <_putc_r>
 800dc2a:	bf00      	nop
 800dc2c:	20000030 	.word	0x20000030

0800dc30 <_puts_r>:
 800dc30:	b570      	push	{r4, r5, r6, lr}
 800dc32:	460e      	mov	r6, r1
 800dc34:	4605      	mov	r5, r0
 800dc36:	b118      	cbz	r0, 800dc40 <_puts_r+0x10>
 800dc38:	6983      	ldr	r3, [r0, #24]
 800dc3a:	b90b      	cbnz	r3, 800dc40 <_puts_r+0x10>
 800dc3c:	f000 fa48 	bl	800e0d0 <__sinit>
 800dc40:	69ab      	ldr	r3, [r5, #24]
 800dc42:	68ac      	ldr	r4, [r5, #8]
 800dc44:	b913      	cbnz	r3, 800dc4c <_puts_r+0x1c>
 800dc46:	4628      	mov	r0, r5
 800dc48:	f000 fa42 	bl	800e0d0 <__sinit>
 800dc4c:	4b2c      	ldr	r3, [pc, #176]	; (800dd00 <_puts_r+0xd0>)
 800dc4e:	429c      	cmp	r4, r3
 800dc50:	d120      	bne.n	800dc94 <_puts_r+0x64>
 800dc52:	686c      	ldr	r4, [r5, #4]
 800dc54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc56:	07db      	lsls	r3, r3, #31
 800dc58:	d405      	bmi.n	800dc66 <_puts_r+0x36>
 800dc5a:	89a3      	ldrh	r3, [r4, #12]
 800dc5c:	0598      	lsls	r0, r3, #22
 800dc5e:	d402      	bmi.n	800dc66 <_puts_r+0x36>
 800dc60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc62:	f000 fad3 	bl	800e20c <__retarget_lock_acquire_recursive>
 800dc66:	89a3      	ldrh	r3, [r4, #12]
 800dc68:	0719      	lsls	r1, r3, #28
 800dc6a:	d51d      	bpl.n	800dca8 <_puts_r+0x78>
 800dc6c:	6923      	ldr	r3, [r4, #16]
 800dc6e:	b1db      	cbz	r3, 800dca8 <_puts_r+0x78>
 800dc70:	3e01      	subs	r6, #1
 800dc72:	68a3      	ldr	r3, [r4, #8]
 800dc74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dc78:	3b01      	subs	r3, #1
 800dc7a:	60a3      	str	r3, [r4, #8]
 800dc7c:	bb39      	cbnz	r1, 800dcce <_puts_r+0x9e>
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	da38      	bge.n	800dcf4 <_puts_r+0xc4>
 800dc82:	4622      	mov	r2, r4
 800dc84:	210a      	movs	r1, #10
 800dc86:	4628      	mov	r0, r5
 800dc88:	f000 f848 	bl	800dd1c <__swbuf_r>
 800dc8c:	3001      	adds	r0, #1
 800dc8e:	d011      	beq.n	800dcb4 <_puts_r+0x84>
 800dc90:	250a      	movs	r5, #10
 800dc92:	e011      	b.n	800dcb8 <_puts_r+0x88>
 800dc94:	4b1b      	ldr	r3, [pc, #108]	; (800dd04 <_puts_r+0xd4>)
 800dc96:	429c      	cmp	r4, r3
 800dc98:	d101      	bne.n	800dc9e <_puts_r+0x6e>
 800dc9a:	68ac      	ldr	r4, [r5, #8]
 800dc9c:	e7da      	b.n	800dc54 <_puts_r+0x24>
 800dc9e:	4b1a      	ldr	r3, [pc, #104]	; (800dd08 <_puts_r+0xd8>)
 800dca0:	429c      	cmp	r4, r3
 800dca2:	bf08      	it	eq
 800dca4:	68ec      	ldreq	r4, [r5, #12]
 800dca6:	e7d5      	b.n	800dc54 <_puts_r+0x24>
 800dca8:	4621      	mov	r1, r4
 800dcaa:	4628      	mov	r0, r5
 800dcac:	f000 f888 	bl	800ddc0 <__swsetup_r>
 800dcb0:	2800      	cmp	r0, #0
 800dcb2:	d0dd      	beq.n	800dc70 <_puts_r+0x40>
 800dcb4:	f04f 35ff 	mov.w	r5, #4294967295
 800dcb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dcba:	07da      	lsls	r2, r3, #31
 800dcbc:	d405      	bmi.n	800dcca <_puts_r+0x9a>
 800dcbe:	89a3      	ldrh	r3, [r4, #12]
 800dcc0:	059b      	lsls	r3, r3, #22
 800dcc2:	d402      	bmi.n	800dcca <_puts_r+0x9a>
 800dcc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcc6:	f000 faa2 	bl	800e20e <__retarget_lock_release_recursive>
 800dcca:	4628      	mov	r0, r5
 800dccc:	bd70      	pop	{r4, r5, r6, pc}
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	da04      	bge.n	800dcdc <_puts_r+0xac>
 800dcd2:	69a2      	ldr	r2, [r4, #24]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	dc06      	bgt.n	800dce6 <_puts_r+0xb6>
 800dcd8:	290a      	cmp	r1, #10
 800dcda:	d004      	beq.n	800dce6 <_puts_r+0xb6>
 800dcdc:	6823      	ldr	r3, [r4, #0]
 800dcde:	1c5a      	adds	r2, r3, #1
 800dce0:	6022      	str	r2, [r4, #0]
 800dce2:	7019      	strb	r1, [r3, #0]
 800dce4:	e7c5      	b.n	800dc72 <_puts_r+0x42>
 800dce6:	4622      	mov	r2, r4
 800dce8:	4628      	mov	r0, r5
 800dcea:	f000 f817 	bl	800dd1c <__swbuf_r>
 800dcee:	3001      	adds	r0, #1
 800dcf0:	d1bf      	bne.n	800dc72 <_puts_r+0x42>
 800dcf2:	e7df      	b.n	800dcb4 <_puts_r+0x84>
 800dcf4:	6823      	ldr	r3, [r4, #0]
 800dcf6:	250a      	movs	r5, #10
 800dcf8:	1c5a      	adds	r2, r3, #1
 800dcfa:	6022      	str	r2, [r4, #0]
 800dcfc:	701d      	strb	r5, [r3, #0]
 800dcfe:	e7db      	b.n	800dcb8 <_puts_r+0x88>
 800dd00:	0800ffe8 	.word	0x0800ffe8
 800dd04:	08010008 	.word	0x08010008
 800dd08:	0800ffc8 	.word	0x0800ffc8

0800dd0c <puts>:
 800dd0c:	4b02      	ldr	r3, [pc, #8]	; (800dd18 <puts+0xc>)
 800dd0e:	4601      	mov	r1, r0
 800dd10:	6818      	ldr	r0, [r3, #0]
 800dd12:	f7ff bf8d 	b.w	800dc30 <_puts_r>
 800dd16:	bf00      	nop
 800dd18:	20000030 	.word	0x20000030

0800dd1c <__swbuf_r>:
 800dd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd1e:	460e      	mov	r6, r1
 800dd20:	4614      	mov	r4, r2
 800dd22:	4605      	mov	r5, r0
 800dd24:	b118      	cbz	r0, 800dd2e <__swbuf_r+0x12>
 800dd26:	6983      	ldr	r3, [r0, #24]
 800dd28:	b90b      	cbnz	r3, 800dd2e <__swbuf_r+0x12>
 800dd2a:	f000 f9d1 	bl	800e0d0 <__sinit>
 800dd2e:	4b21      	ldr	r3, [pc, #132]	; (800ddb4 <__swbuf_r+0x98>)
 800dd30:	429c      	cmp	r4, r3
 800dd32:	d12b      	bne.n	800dd8c <__swbuf_r+0x70>
 800dd34:	686c      	ldr	r4, [r5, #4]
 800dd36:	69a3      	ldr	r3, [r4, #24]
 800dd38:	60a3      	str	r3, [r4, #8]
 800dd3a:	89a3      	ldrh	r3, [r4, #12]
 800dd3c:	071a      	lsls	r2, r3, #28
 800dd3e:	d52f      	bpl.n	800dda0 <__swbuf_r+0x84>
 800dd40:	6923      	ldr	r3, [r4, #16]
 800dd42:	b36b      	cbz	r3, 800dda0 <__swbuf_r+0x84>
 800dd44:	6923      	ldr	r3, [r4, #16]
 800dd46:	6820      	ldr	r0, [r4, #0]
 800dd48:	1ac0      	subs	r0, r0, r3
 800dd4a:	6963      	ldr	r3, [r4, #20]
 800dd4c:	b2f6      	uxtb	r6, r6
 800dd4e:	4283      	cmp	r3, r0
 800dd50:	4637      	mov	r7, r6
 800dd52:	dc04      	bgt.n	800dd5e <__swbuf_r+0x42>
 800dd54:	4621      	mov	r1, r4
 800dd56:	4628      	mov	r0, r5
 800dd58:	f000 f926 	bl	800dfa8 <_fflush_r>
 800dd5c:	bb30      	cbnz	r0, 800ddac <__swbuf_r+0x90>
 800dd5e:	68a3      	ldr	r3, [r4, #8]
 800dd60:	3b01      	subs	r3, #1
 800dd62:	60a3      	str	r3, [r4, #8]
 800dd64:	6823      	ldr	r3, [r4, #0]
 800dd66:	1c5a      	adds	r2, r3, #1
 800dd68:	6022      	str	r2, [r4, #0]
 800dd6a:	701e      	strb	r6, [r3, #0]
 800dd6c:	6963      	ldr	r3, [r4, #20]
 800dd6e:	3001      	adds	r0, #1
 800dd70:	4283      	cmp	r3, r0
 800dd72:	d004      	beq.n	800dd7e <__swbuf_r+0x62>
 800dd74:	89a3      	ldrh	r3, [r4, #12]
 800dd76:	07db      	lsls	r3, r3, #31
 800dd78:	d506      	bpl.n	800dd88 <__swbuf_r+0x6c>
 800dd7a:	2e0a      	cmp	r6, #10
 800dd7c:	d104      	bne.n	800dd88 <__swbuf_r+0x6c>
 800dd7e:	4621      	mov	r1, r4
 800dd80:	4628      	mov	r0, r5
 800dd82:	f000 f911 	bl	800dfa8 <_fflush_r>
 800dd86:	b988      	cbnz	r0, 800ddac <__swbuf_r+0x90>
 800dd88:	4638      	mov	r0, r7
 800dd8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd8c:	4b0a      	ldr	r3, [pc, #40]	; (800ddb8 <__swbuf_r+0x9c>)
 800dd8e:	429c      	cmp	r4, r3
 800dd90:	d101      	bne.n	800dd96 <__swbuf_r+0x7a>
 800dd92:	68ac      	ldr	r4, [r5, #8]
 800dd94:	e7cf      	b.n	800dd36 <__swbuf_r+0x1a>
 800dd96:	4b09      	ldr	r3, [pc, #36]	; (800ddbc <__swbuf_r+0xa0>)
 800dd98:	429c      	cmp	r4, r3
 800dd9a:	bf08      	it	eq
 800dd9c:	68ec      	ldreq	r4, [r5, #12]
 800dd9e:	e7ca      	b.n	800dd36 <__swbuf_r+0x1a>
 800dda0:	4621      	mov	r1, r4
 800dda2:	4628      	mov	r0, r5
 800dda4:	f000 f80c 	bl	800ddc0 <__swsetup_r>
 800dda8:	2800      	cmp	r0, #0
 800ddaa:	d0cb      	beq.n	800dd44 <__swbuf_r+0x28>
 800ddac:	f04f 37ff 	mov.w	r7, #4294967295
 800ddb0:	e7ea      	b.n	800dd88 <__swbuf_r+0x6c>
 800ddb2:	bf00      	nop
 800ddb4:	0800ffe8 	.word	0x0800ffe8
 800ddb8:	08010008 	.word	0x08010008
 800ddbc:	0800ffc8 	.word	0x0800ffc8

0800ddc0 <__swsetup_r>:
 800ddc0:	4b32      	ldr	r3, [pc, #200]	; (800de8c <__swsetup_r+0xcc>)
 800ddc2:	b570      	push	{r4, r5, r6, lr}
 800ddc4:	681d      	ldr	r5, [r3, #0]
 800ddc6:	4606      	mov	r6, r0
 800ddc8:	460c      	mov	r4, r1
 800ddca:	b125      	cbz	r5, 800ddd6 <__swsetup_r+0x16>
 800ddcc:	69ab      	ldr	r3, [r5, #24]
 800ddce:	b913      	cbnz	r3, 800ddd6 <__swsetup_r+0x16>
 800ddd0:	4628      	mov	r0, r5
 800ddd2:	f000 f97d 	bl	800e0d0 <__sinit>
 800ddd6:	4b2e      	ldr	r3, [pc, #184]	; (800de90 <__swsetup_r+0xd0>)
 800ddd8:	429c      	cmp	r4, r3
 800ddda:	d10f      	bne.n	800ddfc <__swsetup_r+0x3c>
 800dddc:	686c      	ldr	r4, [r5, #4]
 800ddde:	89a3      	ldrh	r3, [r4, #12]
 800dde0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dde4:	0719      	lsls	r1, r3, #28
 800dde6:	d42c      	bmi.n	800de42 <__swsetup_r+0x82>
 800dde8:	06dd      	lsls	r5, r3, #27
 800ddea:	d411      	bmi.n	800de10 <__swsetup_r+0x50>
 800ddec:	2309      	movs	r3, #9
 800ddee:	6033      	str	r3, [r6, #0]
 800ddf0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ddf4:	81a3      	strh	r3, [r4, #12]
 800ddf6:	f04f 30ff 	mov.w	r0, #4294967295
 800ddfa:	e03e      	b.n	800de7a <__swsetup_r+0xba>
 800ddfc:	4b25      	ldr	r3, [pc, #148]	; (800de94 <__swsetup_r+0xd4>)
 800ddfe:	429c      	cmp	r4, r3
 800de00:	d101      	bne.n	800de06 <__swsetup_r+0x46>
 800de02:	68ac      	ldr	r4, [r5, #8]
 800de04:	e7eb      	b.n	800ddde <__swsetup_r+0x1e>
 800de06:	4b24      	ldr	r3, [pc, #144]	; (800de98 <__swsetup_r+0xd8>)
 800de08:	429c      	cmp	r4, r3
 800de0a:	bf08      	it	eq
 800de0c:	68ec      	ldreq	r4, [r5, #12]
 800de0e:	e7e6      	b.n	800ddde <__swsetup_r+0x1e>
 800de10:	0758      	lsls	r0, r3, #29
 800de12:	d512      	bpl.n	800de3a <__swsetup_r+0x7a>
 800de14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de16:	b141      	cbz	r1, 800de2a <__swsetup_r+0x6a>
 800de18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de1c:	4299      	cmp	r1, r3
 800de1e:	d002      	beq.n	800de26 <__swsetup_r+0x66>
 800de20:	4630      	mov	r0, r6
 800de22:	f000 fa5b 	bl	800e2dc <_free_r>
 800de26:	2300      	movs	r3, #0
 800de28:	6363      	str	r3, [r4, #52]	; 0x34
 800de2a:	89a3      	ldrh	r3, [r4, #12]
 800de2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800de30:	81a3      	strh	r3, [r4, #12]
 800de32:	2300      	movs	r3, #0
 800de34:	6063      	str	r3, [r4, #4]
 800de36:	6923      	ldr	r3, [r4, #16]
 800de38:	6023      	str	r3, [r4, #0]
 800de3a:	89a3      	ldrh	r3, [r4, #12]
 800de3c:	f043 0308 	orr.w	r3, r3, #8
 800de40:	81a3      	strh	r3, [r4, #12]
 800de42:	6923      	ldr	r3, [r4, #16]
 800de44:	b94b      	cbnz	r3, 800de5a <__swsetup_r+0x9a>
 800de46:	89a3      	ldrh	r3, [r4, #12]
 800de48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800de4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de50:	d003      	beq.n	800de5a <__swsetup_r+0x9a>
 800de52:	4621      	mov	r1, r4
 800de54:	4630      	mov	r0, r6
 800de56:	f000 fa01 	bl	800e25c <__smakebuf_r>
 800de5a:	89a0      	ldrh	r0, [r4, #12]
 800de5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de60:	f010 0301 	ands.w	r3, r0, #1
 800de64:	d00a      	beq.n	800de7c <__swsetup_r+0xbc>
 800de66:	2300      	movs	r3, #0
 800de68:	60a3      	str	r3, [r4, #8]
 800de6a:	6963      	ldr	r3, [r4, #20]
 800de6c:	425b      	negs	r3, r3
 800de6e:	61a3      	str	r3, [r4, #24]
 800de70:	6923      	ldr	r3, [r4, #16]
 800de72:	b943      	cbnz	r3, 800de86 <__swsetup_r+0xc6>
 800de74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800de78:	d1ba      	bne.n	800ddf0 <__swsetup_r+0x30>
 800de7a:	bd70      	pop	{r4, r5, r6, pc}
 800de7c:	0781      	lsls	r1, r0, #30
 800de7e:	bf58      	it	pl
 800de80:	6963      	ldrpl	r3, [r4, #20]
 800de82:	60a3      	str	r3, [r4, #8]
 800de84:	e7f4      	b.n	800de70 <__swsetup_r+0xb0>
 800de86:	2000      	movs	r0, #0
 800de88:	e7f7      	b.n	800de7a <__swsetup_r+0xba>
 800de8a:	bf00      	nop
 800de8c:	20000030 	.word	0x20000030
 800de90:	0800ffe8 	.word	0x0800ffe8
 800de94:	08010008 	.word	0x08010008
 800de98:	0800ffc8 	.word	0x0800ffc8

0800de9c <__sflush_r>:
 800de9c:	898a      	ldrh	r2, [r1, #12]
 800de9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dea2:	4605      	mov	r5, r0
 800dea4:	0710      	lsls	r0, r2, #28
 800dea6:	460c      	mov	r4, r1
 800dea8:	d458      	bmi.n	800df5c <__sflush_r+0xc0>
 800deaa:	684b      	ldr	r3, [r1, #4]
 800deac:	2b00      	cmp	r3, #0
 800deae:	dc05      	bgt.n	800debc <__sflush_r+0x20>
 800deb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	dc02      	bgt.n	800debc <__sflush_r+0x20>
 800deb6:	2000      	movs	r0, #0
 800deb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800debc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800debe:	2e00      	cmp	r6, #0
 800dec0:	d0f9      	beq.n	800deb6 <__sflush_r+0x1a>
 800dec2:	2300      	movs	r3, #0
 800dec4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dec8:	682f      	ldr	r7, [r5, #0]
 800deca:	602b      	str	r3, [r5, #0]
 800decc:	d032      	beq.n	800df34 <__sflush_r+0x98>
 800dece:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ded0:	89a3      	ldrh	r3, [r4, #12]
 800ded2:	075a      	lsls	r2, r3, #29
 800ded4:	d505      	bpl.n	800dee2 <__sflush_r+0x46>
 800ded6:	6863      	ldr	r3, [r4, #4]
 800ded8:	1ac0      	subs	r0, r0, r3
 800deda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dedc:	b10b      	cbz	r3, 800dee2 <__sflush_r+0x46>
 800dede:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dee0:	1ac0      	subs	r0, r0, r3
 800dee2:	2300      	movs	r3, #0
 800dee4:	4602      	mov	r2, r0
 800dee6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dee8:	6a21      	ldr	r1, [r4, #32]
 800deea:	4628      	mov	r0, r5
 800deec:	47b0      	blx	r6
 800deee:	1c43      	adds	r3, r0, #1
 800def0:	89a3      	ldrh	r3, [r4, #12]
 800def2:	d106      	bne.n	800df02 <__sflush_r+0x66>
 800def4:	6829      	ldr	r1, [r5, #0]
 800def6:	291d      	cmp	r1, #29
 800def8:	d82c      	bhi.n	800df54 <__sflush_r+0xb8>
 800defa:	4a2a      	ldr	r2, [pc, #168]	; (800dfa4 <__sflush_r+0x108>)
 800defc:	40ca      	lsrs	r2, r1
 800defe:	07d6      	lsls	r6, r2, #31
 800df00:	d528      	bpl.n	800df54 <__sflush_r+0xb8>
 800df02:	2200      	movs	r2, #0
 800df04:	6062      	str	r2, [r4, #4]
 800df06:	04d9      	lsls	r1, r3, #19
 800df08:	6922      	ldr	r2, [r4, #16]
 800df0a:	6022      	str	r2, [r4, #0]
 800df0c:	d504      	bpl.n	800df18 <__sflush_r+0x7c>
 800df0e:	1c42      	adds	r2, r0, #1
 800df10:	d101      	bne.n	800df16 <__sflush_r+0x7a>
 800df12:	682b      	ldr	r3, [r5, #0]
 800df14:	b903      	cbnz	r3, 800df18 <__sflush_r+0x7c>
 800df16:	6560      	str	r0, [r4, #84]	; 0x54
 800df18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df1a:	602f      	str	r7, [r5, #0]
 800df1c:	2900      	cmp	r1, #0
 800df1e:	d0ca      	beq.n	800deb6 <__sflush_r+0x1a>
 800df20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df24:	4299      	cmp	r1, r3
 800df26:	d002      	beq.n	800df2e <__sflush_r+0x92>
 800df28:	4628      	mov	r0, r5
 800df2a:	f000 f9d7 	bl	800e2dc <_free_r>
 800df2e:	2000      	movs	r0, #0
 800df30:	6360      	str	r0, [r4, #52]	; 0x34
 800df32:	e7c1      	b.n	800deb8 <__sflush_r+0x1c>
 800df34:	6a21      	ldr	r1, [r4, #32]
 800df36:	2301      	movs	r3, #1
 800df38:	4628      	mov	r0, r5
 800df3a:	47b0      	blx	r6
 800df3c:	1c41      	adds	r1, r0, #1
 800df3e:	d1c7      	bne.n	800ded0 <__sflush_r+0x34>
 800df40:	682b      	ldr	r3, [r5, #0]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d0c4      	beq.n	800ded0 <__sflush_r+0x34>
 800df46:	2b1d      	cmp	r3, #29
 800df48:	d001      	beq.n	800df4e <__sflush_r+0xb2>
 800df4a:	2b16      	cmp	r3, #22
 800df4c:	d101      	bne.n	800df52 <__sflush_r+0xb6>
 800df4e:	602f      	str	r7, [r5, #0]
 800df50:	e7b1      	b.n	800deb6 <__sflush_r+0x1a>
 800df52:	89a3      	ldrh	r3, [r4, #12]
 800df54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df58:	81a3      	strh	r3, [r4, #12]
 800df5a:	e7ad      	b.n	800deb8 <__sflush_r+0x1c>
 800df5c:	690f      	ldr	r7, [r1, #16]
 800df5e:	2f00      	cmp	r7, #0
 800df60:	d0a9      	beq.n	800deb6 <__sflush_r+0x1a>
 800df62:	0793      	lsls	r3, r2, #30
 800df64:	680e      	ldr	r6, [r1, #0]
 800df66:	bf08      	it	eq
 800df68:	694b      	ldreq	r3, [r1, #20]
 800df6a:	600f      	str	r7, [r1, #0]
 800df6c:	bf18      	it	ne
 800df6e:	2300      	movne	r3, #0
 800df70:	eba6 0807 	sub.w	r8, r6, r7
 800df74:	608b      	str	r3, [r1, #8]
 800df76:	f1b8 0f00 	cmp.w	r8, #0
 800df7a:	dd9c      	ble.n	800deb6 <__sflush_r+0x1a>
 800df7c:	6a21      	ldr	r1, [r4, #32]
 800df7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800df80:	4643      	mov	r3, r8
 800df82:	463a      	mov	r2, r7
 800df84:	4628      	mov	r0, r5
 800df86:	47b0      	blx	r6
 800df88:	2800      	cmp	r0, #0
 800df8a:	dc06      	bgt.n	800df9a <__sflush_r+0xfe>
 800df8c:	89a3      	ldrh	r3, [r4, #12]
 800df8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df92:	81a3      	strh	r3, [r4, #12]
 800df94:	f04f 30ff 	mov.w	r0, #4294967295
 800df98:	e78e      	b.n	800deb8 <__sflush_r+0x1c>
 800df9a:	4407      	add	r7, r0
 800df9c:	eba8 0800 	sub.w	r8, r8, r0
 800dfa0:	e7e9      	b.n	800df76 <__sflush_r+0xda>
 800dfa2:	bf00      	nop
 800dfa4:	20400001 	.word	0x20400001

0800dfa8 <_fflush_r>:
 800dfa8:	b538      	push	{r3, r4, r5, lr}
 800dfaa:	690b      	ldr	r3, [r1, #16]
 800dfac:	4605      	mov	r5, r0
 800dfae:	460c      	mov	r4, r1
 800dfb0:	b913      	cbnz	r3, 800dfb8 <_fflush_r+0x10>
 800dfb2:	2500      	movs	r5, #0
 800dfb4:	4628      	mov	r0, r5
 800dfb6:	bd38      	pop	{r3, r4, r5, pc}
 800dfb8:	b118      	cbz	r0, 800dfc2 <_fflush_r+0x1a>
 800dfba:	6983      	ldr	r3, [r0, #24]
 800dfbc:	b90b      	cbnz	r3, 800dfc2 <_fflush_r+0x1a>
 800dfbe:	f000 f887 	bl	800e0d0 <__sinit>
 800dfc2:	4b14      	ldr	r3, [pc, #80]	; (800e014 <_fflush_r+0x6c>)
 800dfc4:	429c      	cmp	r4, r3
 800dfc6:	d11b      	bne.n	800e000 <_fflush_r+0x58>
 800dfc8:	686c      	ldr	r4, [r5, #4]
 800dfca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d0ef      	beq.n	800dfb2 <_fflush_r+0xa>
 800dfd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dfd4:	07d0      	lsls	r0, r2, #31
 800dfd6:	d404      	bmi.n	800dfe2 <_fflush_r+0x3a>
 800dfd8:	0599      	lsls	r1, r3, #22
 800dfda:	d402      	bmi.n	800dfe2 <_fflush_r+0x3a>
 800dfdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfde:	f000 f915 	bl	800e20c <__retarget_lock_acquire_recursive>
 800dfe2:	4628      	mov	r0, r5
 800dfe4:	4621      	mov	r1, r4
 800dfe6:	f7ff ff59 	bl	800de9c <__sflush_r>
 800dfea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dfec:	07da      	lsls	r2, r3, #31
 800dfee:	4605      	mov	r5, r0
 800dff0:	d4e0      	bmi.n	800dfb4 <_fflush_r+0xc>
 800dff2:	89a3      	ldrh	r3, [r4, #12]
 800dff4:	059b      	lsls	r3, r3, #22
 800dff6:	d4dd      	bmi.n	800dfb4 <_fflush_r+0xc>
 800dff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dffa:	f000 f908 	bl	800e20e <__retarget_lock_release_recursive>
 800dffe:	e7d9      	b.n	800dfb4 <_fflush_r+0xc>
 800e000:	4b05      	ldr	r3, [pc, #20]	; (800e018 <_fflush_r+0x70>)
 800e002:	429c      	cmp	r4, r3
 800e004:	d101      	bne.n	800e00a <_fflush_r+0x62>
 800e006:	68ac      	ldr	r4, [r5, #8]
 800e008:	e7df      	b.n	800dfca <_fflush_r+0x22>
 800e00a:	4b04      	ldr	r3, [pc, #16]	; (800e01c <_fflush_r+0x74>)
 800e00c:	429c      	cmp	r4, r3
 800e00e:	bf08      	it	eq
 800e010:	68ec      	ldreq	r4, [r5, #12]
 800e012:	e7da      	b.n	800dfca <_fflush_r+0x22>
 800e014:	0800ffe8 	.word	0x0800ffe8
 800e018:	08010008 	.word	0x08010008
 800e01c:	0800ffc8 	.word	0x0800ffc8

0800e020 <std>:
 800e020:	2300      	movs	r3, #0
 800e022:	b510      	push	{r4, lr}
 800e024:	4604      	mov	r4, r0
 800e026:	e9c0 3300 	strd	r3, r3, [r0]
 800e02a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e02e:	6083      	str	r3, [r0, #8]
 800e030:	8181      	strh	r1, [r0, #12]
 800e032:	6643      	str	r3, [r0, #100]	; 0x64
 800e034:	81c2      	strh	r2, [r0, #14]
 800e036:	6183      	str	r3, [r0, #24]
 800e038:	4619      	mov	r1, r3
 800e03a:	2208      	movs	r2, #8
 800e03c:	305c      	adds	r0, #92	; 0x5c
 800e03e:	f7ff fdc1 	bl	800dbc4 <memset>
 800e042:	4b05      	ldr	r3, [pc, #20]	; (800e058 <std+0x38>)
 800e044:	6263      	str	r3, [r4, #36]	; 0x24
 800e046:	4b05      	ldr	r3, [pc, #20]	; (800e05c <std+0x3c>)
 800e048:	62a3      	str	r3, [r4, #40]	; 0x28
 800e04a:	4b05      	ldr	r3, [pc, #20]	; (800e060 <std+0x40>)
 800e04c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e04e:	4b05      	ldr	r3, [pc, #20]	; (800e064 <std+0x44>)
 800e050:	6224      	str	r4, [r4, #32]
 800e052:	6323      	str	r3, [r4, #48]	; 0x30
 800e054:	bd10      	pop	{r4, pc}
 800e056:	bf00      	nop
 800e058:	0800eb29 	.word	0x0800eb29
 800e05c:	0800eb4b 	.word	0x0800eb4b
 800e060:	0800eb83 	.word	0x0800eb83
 800e064:	0800eba7 	.word	0x0800eba7

0800e068 <_cleanup_r>:
 800e068:	4901      	ldr	r1, [pc, #4]	; (800e070 <_cleanup_r+0x8>)
 800e06a:	f000 b8af 	b.w	800e1cc <_fwalk_reent>
 800e06e:	bf00      	nop
 800e070:	0800dfa9 	.word	0x0800dfa9

0800e074 <__sfmoreglue>:
 800e074:	b570      	push	{r4, r5, r6, lr}
 800e076:	2268      	movs	r2, #104	; 0x68
 800e078:	1e4d      	subs	r5, r1, #1
 800e07a:	4355      	muls	r5, r2
 800e07c:	460e      	mov	r6, r1
 800e07e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e082:	f000 f997 	bl	800e3b4 <_malloc_r>
 800e086:	4604      	mov	r4, r0
 800e088:	b140      	cbz	r0, 800e09c <__sfmoreglue+0x28>
 800e08a:	2100      	movs	r1, #0
 800e08c:	e9c0 1600 	strd	r1, r6, [r0]
 800e090:	300c      	adds	r0, #12
 800e092:	60a0      	str	r0, [r4, #8]
 800e094:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e098:	f7ff fd94 	bl	800dbc4 <memset>
 800e09c:	4620      	mov	r0, r4
 800e09e:	bd70      	pop	{r4, r5, r6, pc}

0800e0a0 <__sfp_lock_acquire>:
 800e0a0:	4801      	ldr	r0, [pc, #4]	; (800e0a8 <__sfp_lock_acquire+0x8>)
 800e0a2:	f000 b8b3 	b.w	800e20c <__retarget_lock_acquire_recursive>
 800e0a6:	bf00      	nop
 800e0a8:	20002961 	.word	0x20002961

0800e0ac <__sfp_lock_release>:
 800e0ac:	4801      	ldr	r0, [pc, #4]	; (800e0b4 <__sfp_lock_release+0x8>)
 800e0ae:	f000 b8ae 	b.w	800e20e <__retarget_lock_release_recursive>
 800e0b2:	bf00      	nop
 800e0b4:	20002961 	.word	0x20002961

0800e0b8 <__sinit_lock_acquire>:
 800e0b8:	4801      	ldr	r0, [pc, #4]	; (800e0c0 <__sinit_lock_acquire+0x8>)
 800e0ba:	f000 b8a7 	b.w	800e20c <__retarget_lock_acquire_recursive>
 800e0be:	bf00      	nop
 800e0c0:	20002962 	.word	0x20002962

0800e0c4 <__sinit_lock_release>:
 800e0c4:	4801      	ldr	r0, [pc, #4]	; (800e0cc <__sinit_lock_release+0x8>)
 800e0c6:	f000 b8a2 	b.w	800e20e <__retarget_lock_release_recursive>
 800e0ca:	bf00      	nop
 800e0cc:	20002962 	.word	0x20002962

0800e0d0 <__sinit>:
 800e0d0:	b510      	push	{r4, lr}
 800e0d2:	4604      	mov	r4, r0
 800e0d4:	f7ff fff0 	bl	800e0b8 <__sinit_lock_acquire>
 800e0d8:	69a3      	ldr	r3, [r4, #24]
 800e0da:	b11b      	cbz	r3, 800e0e4 <__sinit+0x14>
 800e0dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0e0:	f7ff bff0 	b.w	800e0c4 <__sinit_lock_release>
 800e0e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e0e8:	6523      	str	r3, [r4, #80]	; 0x50
 800e0ea:	4b13      	ldr	r3, [pc, #76]	; (800e138 <__sinit+0x68>)
 800e0ec:	4a13      	ldr	r2, [pc, #76]	; (800e13c <__sinit+0x6c>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	62a2      	str	r2, [r4, #40]	; 0x28
 800e0f2:	42a3      	cmp	r3, r4
 800e0f4:	bf04      	itt	eq
 800e0f6:	2301      	moveq	r3, #1
 800e0f8:	61a3      	streq	r3, [r4, #24]
 800e0fa:	4620      	mov	r0, r4
 800e0fc:	f000 f820 	bl	800e140 <__sfp>
 800e100:	6060      	str	r0, [r4, #4]
 800e102:	4620      	mov	r0, r4
 800e104:	f000 f81c 	bl	800e140 <__sfp>
 800e108:	60a0      	str	r0, [r4, #8]
 800e10a:	4620      	mov	r0, r4
 800e10c:	f000 f818 	bl	800e140 <__sfp>
 800e110:	2200      	movs	r2, #0
 800e112:	60e0      	str	r0, [r4, #12]
 800e114:	2104      	movs	r1, #4
 800e116:	6860      	ldr	r0, [r4, #4]
 800e118:	f7ff ff82 	bl	800e020 <std>
 800e11c:	68a0      	ldr	r0, [r4, #8]
 800e11e:	2201      	movs	r2, #1
 800e120:	2109      	movs	r1, #9
 800e122:	f7ff ff7d 	bl	800e020 <std>
 800e126:	68e0      	ldr	r0, [r4, #12]
 800e128:	2202      	movs	r2, #2
 800e12a:	2112      	movs	r1, #18
 800e12c:	f7ff ff78 	bl	800e020 <std>
 800e130:	2301      	movs	r3, #1
 800e132:	61a3      	str	r3, [r4, #24]
 800e134:	e7d2      	b.n	800e0dc <__sinit+0xc>
 800e136:	bf00      	nop
 800e138:	0800ffc4 	.word	0x0800ffc4
 800e13c:	0800e069 	.word	0x0800e069

0800e140 <__sfp>:
 800e140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e142:	4607      	mov	r7, r0
 800e144:	f7ff ffac 	bl	800e0a0 <__sfp_lock_acquire>
 800e148:	4b1e      	ldr	r3, [pc, #120]	; (800e1c4 <__sfp+0x84>)
 800e14a:	681e      	ldr	r6, [r3, #0]
 800e14c:	69b3      	ldr	r3, [r6, #24]
 800e14e:	b913      	cbnz	r3, 800e156 <__sfp+0x16>
 800e150:	4630      	mov	r0, r6
 800e152:	f7ff ffbd 	bl	800e0d0 <__sinit>
 800e156:	3648      	adds	r6, #72	; 0x48
 800e158:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e15c:	3b01      	subs	r3, #1
 800e15e:	d503      	bpl.n	800e168 <__sfp+0x28>
 800e160:	6833      	ldr	r3, [r6, #0]
 800e162:	b30b      	cbz	r3, 800e1a8 <__sfp+0x68>
 800e164:	6836      	ldr	r6, [r6, #0]
 800e166:	e7f7      	b.n	800e158 <__sfp+0x18>
 800e168:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e16c:	b9d5      	cbnz	r5, 800e1a4 <__sfp+0x64>
 800e16e:	4b16      	ldr	r3, [pc, #88]	; (800e1c8 <__sfp+0x88>)
 800e170:	60e3      	str	r3, [r4, #12]
 800e172:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e176:	6665      	str	r5, [r4, #100]	; 0x64
 800e178:	f000 f847 	bl	800e20a <__retarget_lock_init_recursive>
 800e17c:	f7ff ff96 	bl	800e0ac <__sfp_lock_release>
 800e180:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e184:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e188:	6025      	str	r5, [r4, #0]
 800e18a:	61a5      	str	r5, [r4, #24]
 800e18c:	2208      	movs	r2, #8
 800e18e:	4629      	mov	r1, r5
 800e190:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e194:	f7ff fd16 	bl	800dbc4 <memset>
 800e198:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e19c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1a4:	3468      	adds	r4, #104	; 0x68
 800e1a6:	e7d9      	b.n	800e15c <__sfp+0x1c>
 800e1a8:	2104      	movs	r1, #4
 800e1aa:	4638      	mov	r0, r7
 800e1ac:	f7ff ff62 	bl	800e074 <__sfmoreglue>
 800e1b0:	4604      	mov	r4, r0
 800e1b2:	6030      	str	r0, [r6, #0]
 800e1b4:	2800      	cmp	r0, #0
 800e1b6:	d1d5      	bne.n	800e164 <__sfp+0x24>
 800e1b8:	f7ff ff78 	bl	800e0ac <__sfp_lock_release>
 800e1bc:	230c      	movs	r3, #12
 800e1be:	603b      	str	r3, [r7, #0]
 800e1c0:	e7ee      	b.n	800e1a0 <__sfp+0x60>
 800e1c2:	bf00      	nop
 800e1c4:	0800ffc4 	.word	0x0800ffc4
 800e1c8:	ffff0001 	.word	0xffff0001

0800e1cc <_fwalk_reent>:
 800e1cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1d0:	4606      	mov	r6, r0
 800e1d2:	4688      	mov	r8, r1
 800e1d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e1d8:	2700      	movs	r7, #0
 800e1da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e1de:	f1b9 0901 	subs.w	r9, r9, #1
 800e1e2:	d505      	bpl.n	800e1f0 <_fwalk_reent+0x24>
 800e1e4:	6824      	ldr	r4, [r4, #0]
 800e1e6:	2c00      	cmp	r4, #0
 800e1e8:	d1f7      	bne.n	800e1da <_fwalk_reent+0xe>
 800e1ea:	4638      	mov	r0, r7
 800e1ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1f0:	89ab      	ldrh	r3, [r5, #12]
 800e1f2:	2b01      	cmp	r3, #1
 800e1f4:	d907      	bls.n	800e206 <_fwalk_reent+0x3a>
 800e1f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e1fa:	3301      	adds	r3, #1
 800e1fc:	d003      	beq.n	800e206 <_fwalk_reent+0x3a>
 800e1fe:	4629      	mov	r1, r5
 800e200:	4630      	mov	r0, r6
 800e202:	47c0      	blx	r8
 800e204:	4307      	orrs	r7, r0
 800e206:	3568      	adds	r5, #104	; 0x68
 800e208:	e7e9      	b.n	800e1de <_fwalk_reent+0x12>

0800e20a <__retarget_lock_init_recursive>:
 800e20a:	4770      	bx	lr

0800e20c <__retarget_lock_acquire_recursive>:
 800e20c:	4770      	bx	lr

0800e20e <__retarget_lock_release_recursive>:
 800e20e:	4770      	bx	lr

0800e210 <__swhatbuf_r>:
 800e210:	b570      	push	{r4, r5, r6, lr}
 800e212:	460e      	mov	r6, r1
 800e214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e218:	2900      	cmp	r1, #0
 800e21a:	b096      	sub	sp, #88	; 0x58
 800e21c:	4614      	mov	r4, r2
 800e21e:	461d      	mov	r5, r3
 800e220:	da08      	bge.n	800e234 <__swhatbuf_r+0x24>
 800e222:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e226:	2200      	movs	r2, #0
 800e228:	602a      	str	r2, [r5, #0]
 800e22a:	061a      	lsls	r2, r3, #24
 800e22c:	d410      	bmi.n	800e250 <__swhatbuf_r+0x40>
 800e22e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e232:	e00e      	b.n	800e252 <__swhatbuf_r+0x42>
 800e234:	466a      	mov	r2, sp
 800e236:	f000 fcdd 	bl	800ebf4 <_fstat_r>
 800e23a:	2800      	cmp	r0, #0
 800e23c:	dbf1      	blt.n	800e222 <__swhatbuf_r+0x12>
 800e23e:	9a01      	ldr	r2, [sp, #4]
 800e240:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e244:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e248:	425a      	negs	r2, r3
 800e24a:	415a      	adcs	r2, r3
 800e24c:	602a      	str	r2, [r5, #0]
 800e24e:	e7ee      	b.n	800e22e <__swhatbuf_r+0x1e>
 800e250:	2340      	movs	r3, #64	; 0x40
 800e252:	2000      	movs	r0, #0
 800e254:	6023      	str	r3, [r4, #0]
 800e256:	b016      	add	sp, #88	; 0x58
 800e258:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e25c <__smakebuf_r>:
 800e25c:	898b      	ldrh	r3, [r1, #12]
 800e25e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e260:	079d      	lsls	r5, r3, #30
 800e262:	4606      	mov	r6, r0
 800e264:	460c      	mov	r4, r1
 800e266:	d507      	bpl.n	800e278 <__smakebuf_r+0x1c>
 800e268:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e26c:	6023      	str	r3, [r4, #0]
 800e26e:	6123      	str	r3, [r4, #16]
 800e270:	2301      	movs	r3, #1
 800e272:	6163      	str	r3, [r4, #20]
 800e274:	b002      	add	sp, #8
 800e276:	bd70      	pop	{r4, r5, r6, pc}
 800e278:	ab01      	add	r3, sp, #4
 800e27a:	466a      	mov	r2, sp
 800e27c:	f7ff ffc8 	bl	800e210 <__swhatbuf_r>
 800e280:	9900      	ldr	r1, [sp, #0]
 800e282:	4605      	mov	r5, r0
 800e284:	4630      	mov	r0, r6
 800e286:	f000 f895 	bl	800e3b4 <_malloc_r>
 800e28a:	b948      	cbnz	r0, 800e2a0 <__smakebuf_r+0x44>
 800e28c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e290:	059a      	lsls	r2, r3, #22
 800e292:	d4ef      	bmi.n	800e274 <__smakebuf_r+0x18>
 800e294:	f023 0303 	bic.w	r3, r3, #3
 800e298:	f043 0302 	orr.w	r3, r3, #2
 800e29c:	81a3      	strh	r3, [r4, #12]
 800e29e:	e7e3      	b.n	800e268 <__smakebuf_r+0xc>
 800e2a0:	4b0d      	ldr	r3, [pc, #52]	; (800e2d8 <__smakebuf_r+0x7c>)
 800e2a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800e2a4:	89a3      	ldrh	r3, [r4, #12]
 800e2a6:	6020      	str	r0, [r4, #0]
 800e2a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2ac:	81a3      	strh	r3, [r4, #12]
 800e2ae:	9b00      	ldr	r3, [sp, #0]
 800e2b0:	6163      	str	r3, [r4, #20]
 800e2b2:	9b01      	ldr	r3, [sp, #4]
 800e2b4:	6120      	str	r0, [r4, #16]
 800e2b6:	b15b      	cbz	r3, 800e2d0 <__smakebuf_r+0x74>
 800e2b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2bc:	4630      	mov	r0, r6
 800e2be:	f000 fcab 	bl	800ec18 <_isatty_r>
 800e2c2:	b128      	cbz	r0, 800e2d0 <__smakebuf_r+0x74>
 800e2c4:	89a3      	ldrh	r3, [r4, #12]
 800e2c6:	f023 0303 	bic.w	r3, r3, #3
 800e2ca:	f043 0301 	orr.w	r3, r3, #1
 800e2ce:	81a3      	strh	r3, [r4, #12]
 800e2d0:	89a0      	ldrh	r0, [r4, #12]
 800e2d2:	4305      	orrs	r5, r0
 800e2d4:	81a5      	strh	r5, [r4, #12]
 800e2d6:	e7cd      	b.n	800e274 <__smakebuf_r+0x18>
 800e2d8:	0800e069 	.word	0x0800e069

0800e2dc <_free_r>:
 800e2dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e2de:	2900      	cmp	r1, #0
 800e2e0:	d044      	beq.n	800e36c <_free_r+0x90>
 800e2e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2e6:	9001      	str	r0, [sp, #4]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	f1a1 0404 	sub.w	r4, r1, #4
 800e2ee:	bfb8      	it	lt
 800e2f0:	18e4      	addlt	r4, r4, r3
 800e2f2:	f000 fcb3 	bl	800ec5c <__malloc_lock>
 800e2f6:	4a1e      	ldr	r2, [pc, #120]	; (800e370 <_free_r+0x94>)
 800e2f8:	9801      	ldr	r0, [sp, #4]
 800e2fa:	6813      	ldr	r3, [r2, #0]
 800e2fc:	b933      	cbnz	r3, 800e30c <_free_r+0x30>
 800e2fe:	6063      	str	r3, [r4, #4]
 800e300:	6014      	str	r4, [r2, #0]
 800e302:	b003      	add	sp, #12
 800e304:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e308:	f000 bcae 	b.w	800ec68 <__malloc_unlock>
 800e30c:	42a3      	cmp	r3, r4
 800e30e:	d908      	bls.n	800e322 <_free_r+0x46>
 800e310:	6825      	ldr	r5, [r4, #0]
 800e312:	1961      	adds	r1, r4, r5
 800e314:	428b      	cmp	r3, r1
 800e316:	bf01      	itttt	eq
 800e318:	6819      	ldreq	r1, [r3, #0]
 800e31a:	685b      	ldreq	r3, [r3, #4]
 800e31c:	1949      	addeq	r1, r1, r5
 800e31e:	6021      	streq	r1, [r4, #0]
 800e320:	e7ed      	b.n	800e2fe <_free_r+0x22>
 800e322:	461a      	mov	r2, r3
 800e324:	685b      	ldr	r3, [r3, #4]
 800e326:	b10b      	cbz	r3, 800e32c <_free_r+0x50>
 800e328:	42a3      	cmp	r3, r4
 800e32a:	d9fa      	bls.n	800e322 <_free_r+0x46>
 800e32c:	6811      	ldr	r1, [r2, #0]
 800e32e:	1855      	adds	r5, r2, r1
 800e330:	42a5      	cmp	r5, r4
 800e332:	d10b      	bne.n	800e34c <_free_r+0x70>
 800e334:	6824      	ldr	r4, [r4, #0]
 800e336:	4421      	add	r1, r4
 800e338:	1854      	adds	r4, r2, r1
 800e33a:	42a3      	cmp	r3, r4
 800e33c:	6011      	str	r1, [r2, #0]
 800e33e:	d1e0      	bne.n	800e302 <_free_r+0x26>
 800e340:	681c      	ldr	r4, [r3, #0]
 800e342:	685b      	ldr	r3, [r3, #4]
 800e344:	6053      	str	r3, [r2, #4]
 800e346:	4421      	add	r1, r4
 800e348:	6011      	str	r1, [r2, #0]
 800e34a:	e7da      	b.n	800e302 <_free_r+0x26>
 800e34c:	d902      	bls.n	800e354 <_free_r+0x78>
 800e34e:	230c      	movs	r3, #12
 800e350:	6003      	str	r3, [r0, #0]
 800e352:	e7d6      	b.n	800e302 <_free_r+0x26>
 800e354:	6825      	ldr	r5, [r4, #0]
 800e356:	1961      	adds	r1, r4, r5
 800e358:	428b      	cmp	r3, r1
 800e35a:	bf04      	itt	eq
 800e35c:	6819      	ldreq	r1, [r3, #0]
 800e35e:	685b      	ldreq	r3, [r3, #4]
 800e360:	6063      	str	r3, [r4, #4]
 800e362:	bf04      	itt	eq
 800e364:	1949      	addeq	r1, r1, r5
 800e366:	6021      	streq	r1, [r4, #0]
 800e368:	6054      	str	r4, [r2, #4]
 800e36a:	e7ca      	b.n	800e302 <_free_r+0x26>
 800e36c:	b003      	add	sp, #12
 800e36e:	bd30      	pop	{r4, r5, pc}
 800e370:	20002964 	.word	0x20002964

0800e374 <sbrk_aligned>:
 800e374:	b570      	push	{r4, r5, r6, lr}
 800e376:	4e0e      	ldr	r6, [pc, #56]	; (800e3b0 <sbrk_aligned+0x3c>)
 800e378:	460c      	mov	r4, r1
 800e37a:	6831      	ldr	r1, [r6, #0]
 800e37c:	4605      	mov	r5, r0
 800e37e:	b911      	cbnz	r1, 800e386 <sbrk_aligned+0x12>
 800e380:	f000 fbc2 	bl	800eb08 <_sbrk_r>
 800e384:	6030      	str	r0, [r6, #0]
 800e386:	4621      	mov	r1, r4
 800e388:	4628      	mov	r0, r5
 800e38a:	f000 fbbd 	bl	800eb08 <_sbrk_r>
 800e38e:	1c43      	adds	r3, r0, #1
 800e390:	d00a      	beq.n	800e3a8 <sbrk_aligned+0x34>
 800e392:	1cc4      	adds	r4, r0, #3
 800e394:	f024 0403 	bic.w	r4, r4, #3
 800e398:	42a0      	cmp	r0, r4
 800e39a:	d007      	beq.n	800e3ac <sbrk_aligned+0x38>
 800e39c:	1a21      	subs	r1, r4, r0
 800e39e:	4628      	mov	r0, r5
 800e3a0:	f000 fbb2 	bl	800eb08 <_sbrk_r>
 800e3a4:	3001      	adds	r0, #1
 800e3a6:	d101      	bne.n	800e3ac <sbrk_aligned+0x38>
 800e3a8:	f04f 34ff 	mov.w	r4, #4294967295
 800e3ac:	4620      	mov	r0, r4
 800e3ae:	bd70      	pop	{r4, r5, r6, pc}
 800e3b0:	20002968 	.word	0x20002968

0800e3b4 <_malloc_r>:
 800e3b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3b8:	1ccd      	adds	r5, r1, #3
 800e3ba:	f025 0503 	bic.w	r5, r5, #3
 800e3be:	3508      	adds	r5, #8
 800e3c0:	2d0c      	cmp	r5, #12
 800e3c2:	bf38      	it	cc
 800e3c4:	250c      	movcc	r5, #12
 800e3c6:	2d00      	cmp	r5, #0
 800e3c8:	4607      	mov	r7, r0
 800e3ca:	db01      	blt.n	800e3d0 <_malloc_r+0x1c>
 800e3cc:	42a9      	cmp	r1, r5
 800e3ce:	d905      	bls.n	800e3dc <_malloc_r+0x28>
 800e3d0:	230c      	movs	r3, #12
 800e3d2:	603b      	str	r3, [r7, #0]
 800e3d4:	2600      	movs	r6, #0
 800e3d6:	4630      	mov	r0, r6
 800e3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3dc:	4e2e      	ldr	r6, [pc, #184]	; (800e498 <_malloc_r+0xe4>)
 800e3de:	f000 fc3d 	bl	800ec5c <__malloc_lock>
 800e3e2:	6833      	ldr	r3, [r6, #0]
 800e3e4:	461c      	mov	r4, r3
 800e3e6:	bb34      	cbnz	r4, 800e436 <_malloc_r+0x82>
 800e3e8:	4629      	mov	r1, r5
 800e3ea:	4638      	mov	r0, r7
 800e3ec:	f7ff ffc2 	bl	800e374 <sbrk_aligned>
 800e3f0:	1c43      	adds	r3, r0, #1
 800e3f2:	4604      	mov	r4, r0
 800e3f4:	d14d      	bne.n	800e492 <_malloc_r+0xde>
 800e3f6:	6834      	ldr	r4, [r6, #0]
 800e3f8:	4626      	mov	r6, r4
 800e3fa:	2e00      	cmp	r6, #0
 800e3fc:	d140      	bne.n	800e480 <_malloc_r+0xcc>
 800e3fe:	6823      	ldr	r3, [r4, #0]
 800e400:	4631      	mov	r1, r6
 800e402:	4638      	mov	r0, r7
 800e404:	eb04 0803 	add.w	r8, r4, r3
 800e408:	f000 fb7e 	bl	800eb08 <_sbrk_r>
 800e40c:	4580      	cmp	r8, r0
 800e40e:	d13a      	bne.n	800e486 <_malloc_r+0xd2>
 800e410:	6821      	ldr	r1, [r4, #0]
 800e412:	3503      	adds	r5, #3
 800e414:	1a6d      	subs	r5, r5, r1
 800e416:	f025 0503 	bic.w	r5, r5, #3
 800e41a:	3508      	adds	r5, #8
 800e41c:	2d0c      	cmp	r5, #12
 800e41e:	bf38      	it	cc
 800e420:	250c      	movcc	r5, #12
 800e422:	4629      	mov	r1, r5
 800e424:	4638      	mov	r0, r7
 800e426:	f7ff ffa5 	bl	800e374 <sbrk_aligned>
 800e42a:	3001      	adds	r0, #1
 800e42c:	d02b      	beq.n	800e486 <_malloc_r+0xd2>
 800e42e:	6823      	ldr	r3, [r4, #0]
 800e430:	442b      	add	r3, r5
 800e432:	6023      	str	r3, [r4, #0]
 800e434:	e00e      	b.n	800e454 <_malloc_r+0xa0>
 800e436:	6822      	ldr	r2, [r4, #0]
 800e438:	1b52      	subs	r2, r2, r5
 800e43a:	d41e      	bmi.n	800e47a <_malloc_r+0xc6>
 800e43c:	2a0b      	cmp	r2, #11
 800e43e:	d916      	bls.n	800e46e <_malloc_r+0xba>
 800e440:	1961      	adds	r1, r4, r5
 800e442:	42a3      	cmp	r3, r4
 800e444:	6025      	str	r5, [r4, #0]
 800e446:	bf18      	it	ne
 800e448:	6059      	strne	r1, [r3, #4]
 800e44a:	6863      	ldr	r3, [r4, #4]
 800e44c:	bf08      	it	eq
 800e44e:	6031      	streq	r1, [r6, #0]
 800e450:	5162      	str	r2, [r4, r5]
 800e452:	604b      	str	r3, [r1, #4]
 800e454:	4638      	mov	r0, r7
 800e456:	f104 060b 	add.w	r6, r4, #11
 800e45a:	f000 fc05 	bl	800ec68 <__malloc_unlock>
 800e45e:	f026 0607 	bic.w	r6, r6, #7
 800e462:	1d23      	adds	r3, r4, #4
 800e464:	1af2      	subs	r2, r6, r3
 800e466:	d0b6      	beq.n	800e3d6 <_malloc_r+0x22>
 800e468:	1b9b      	subs	r3, r3, r6
 800e46a:	50a3      	str	r3, [r4, r2]
 800e46c:	e7b3      	b.n	800e3d6 <_malloc_r+0x22>
 800e46e:	6862      	ldr	r2, [r4, #4]
 800e470:	42a3      	cmp	r3, r4
 800e472:	bf0c      	ite	eq
 800e474:	6032      	streq	r2, [r6, #0]
 800e476:	605a      	strne	r2, [r3, #4]
 800e478:	e7ec      	b.n	800e454 <_malloc_r+0xa0>
 800e47a:	4623      	mov	r3, r4
 800e47c:	6864      	ldr	r4, [r4, #4]
 800e47e:	e7b2      	b.n	800e3e6 <_malloc_r+0x32>
 800e480:	4634      	mov	r4, r6
 800e482:	6876      	ldr	r6, [r6, #4]
 800e484:	e7b9      	b.n	800e3fa <_malloc_r+0x46>
 800e486:	230c      	movs	r3, #12
 800e488:	603b      	str	r3, [r7, #0]
 800e48a:	4638      	mov	r0, r7
 800e48c:	f000 fbec 	bl	800ec68 <__malloc_unlock>
 800e490:	e7a1      	b.n	800e3d6 <_malloc_r+0x22>
 800e492:	6025      	str	r5, [r4, #0]
 800e494:	e7de      	b.n	800e454 <_malloc_r+0xa0>
 800e496:	bf00      	nop
 800e498:	20002964 	.word	0x20002964

0800e49c <__sfputc_r>:
 800e49c:	6893      	ldr	r3, [r2, #8]
 800e49e:	3b01      	subs	r3, #1
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	b410      	push	{r4}
 800e4a4:	6093      	str	r3, [r2, #8]
 800e4a6:	da08      	bge.n	800e4ba <__sfputc_r+0x1e>
 800e4a8:	6994      	ldr	r4, [r2, #24]
 800e4aa:	42a3      	cmp	r3, r4
 800e4ac:	db01      	blt.n	800e4b2 <__sfputc_r+0x16>
 800e4ae:	290a      	cmp	r1, #10
 800e4b0:	d103      	bne.n	800e4ba <__sfputc_r+0x1e>
 800e4b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4b6:	f7ff bc31 	b.w	800dd1c <__swbuf_r>
 800e4ba:	6813      	ldr	r3, [r2, #0]
 800e4bc:	1c58      	adds	r0, r3, #1
 800e4be:	6010      	str	r0, [r2, #0]
 800e4c0:	7019      	strb	r1, [r3, #0]
 800e4c2:	4608      	mov	r0, r1
 800e4c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4c8:	4770      	bx	lr

0800e4ca <__sfputs_r>:
 800e4ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4cc:	4606      	mov	r6, r0
 800e4ce:	460f      	mov	r7, r1
 800e4d0:	4614      	mov	r4, r2
 800e4d2:	18d5      	adds	r5, r2, r3
 800e4d4:	42ac      	cmp	r4, r5
 800e4d6:	d101      	bne.n	800e4dc <__sfputs_r+0x12>
 800e4d8:	2000      	movs	r0, #0
 800e4da:	e007      	b.n	800e4ec <__sfputs_r+0x22>
 800e4dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4e0:	463a      	mov	r2, r7
 800e4e2:	4630      	mov	r0, r6
 800e4e4:	f7ff ffda 	bl	800e49c <__sfputc_r>
 800e4e8:	1c43      	adds	r3, r0, #1
 800e4ea:	d1f3      	bne.n	800e4d4 <__sfputs_r+0xa>
 800e4ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e4f0 <_vfiprintf_r>:
 800e4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4f4:	460d      	mov	r5, r1
 800e4f6:	b09d      	sub	sp, #116	; 0x74
 800e4f8:	4614      	mov	r4, r2
 800e4fa:	4698      	mov	r8, r3
 800e4fc:	4606      	mov	r6, r0
 800e4fe:	b118      	cbz	r0, 800e508 <_vfiprintf_r+0x18>
 800e500:	6983      	ldr	r3, [r0, #24]
 800e502:	b90b      	cbnz	r3, 800e508 <_vfiprintf_r+0x18>
 800e504:	f7ff fde4 	bl	800e0d0 <__sinit>
 800e508:	4b89      	ldr	r3, [pc, #548]	; (800e730 <_vfiprintf_r+0x240>)
 800e50a:	429d      	cmp	r5, r3
 800e50c:	d11b      	bne.n	800e546 <_vfiprintf_r+0x56>
 800e50e:	6875      	ldr	r5, [r6, #4]
 800e510:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e512:	07d9      	lsls	r1, r3, #31
 800e514:	d405      	bmi.n	800e522 <_vfiprintf_r+0x32>
 800e516:	89ab      	ldrh	r3, [r5, #12]
 800e518:	059a      	lsls	r2, r3, #22
 800e51a:	d402      	bmi.n	800e522 <_vfiprintf_r+0x32>
 800e51c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e51e:	f7ff fe75 	bl	800e20c <__retarget_lock_acquire_recursive>
 800e522:	89ab      	ldrh	r3, [r5, #12]
 800e524:	071b      	lsls	r3, r3, #28
 800e526:	d501      	bpl.n	800e52c <_vfiprintf_r+0x3c>
 800e528:	692b      	ldr	r3, [r5, #16]
 800e52a:	b9eb      	cbnz	r3, 800e568 <_vfiprintf_r+0x78>
 800e52c:	4629      	mov	r1, r5
 800e52e:	4630      	mov	r0, r6
 800e530:	f7ff fc46 	bl	800ddc0 <__swsetup_r>
 800e534:	b1c0      	cbz	r0, 800e568 <_vfiprintf_r+0x78>
 800e536:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e538:	07dc      	lsls	r4, r3, #31
 800e53a:	d50e      	bpl.n	800e55a <_vfiprintf_r+0x6a>
 800e53c:	f04f 30ff 	mov.w	r0, #4294967295
 800e540:	b01d      	add	sp, #116	; 0x74
 800e542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e546:	4b7b      	ldr	r3, [pc, #492]	; (800e734 <_vfiprintf_r+0x244>)
 800e548:	429d      	cmp	r5, r3
 800e54a:	d101      	bne.n	800e550 <_vfiprintf_r+0x60>
 800e54c:	68b5      	ldr	r5, [r6, #8]
 800e54e:	e7df      	b.n	800e510 <_vfiprintf_r+0x20>
 800e550:	4b79      	ldr	r3, [pc, #484]	; (800e738 <_vfiprintf_r+0x248>)
 800e552:	429d      	cmp	r5, r3
 800e554:	bf08      	it	eq
 800e556:	68f5      	ldreq	r5, [r6, #12]
 800e558:	e7da      	b.n	800e510 <_vfiprintf_r+0x20>
 800e55a:	89ab      	ldrh	r3, [r5, #12]
 800e55c:	0598      	lsls	r0, r3, #22
 800e55e:	d4ed      	bmi.n	800e53c <_vfiprintf_r+0x4c>
 800e560:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e562:	f7ff fe54 	bl	800e20e <__retarget_lock_release_recursive>
 800e566:	e7e9      	b.n	800e53c <_vfiprintf_r+0x4c>
 800e568:	2300      	movs	r3, #0
 800e56a:	9309      	str	r3, [sp, #36]	; 0x24
 800e56c:	2320      	movs	r3, #32
 800e56e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e572:	f8cd 800c 	str.w	r8, [sp, #12]
 800e576:	2330      	movs	r3, #48	; 0x30
 800e578:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e73c <_vfiprintf_r+0x24c>
 800e57c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e580:	f04f 0901 	mov.w	r9, #1
 800e584:	4623      	mov	r3, r4
 800e586:	469a      	mov	sl, r3
 800e588:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e58c:	b10a      	cbz	r2, 800e592 <_vfiprintf_r+0xa2>
 800e58e:	2a25      	cmp	r2, #37	; 0x25
 800e590:	d1f9      	bne.n	800e586 <_vfiprintf_r+0x96>
 800e592:	ebba 0b04 	subs.w	fp, sl, r4
 800e596:	d00b      	beq.n	800e5b0 <_vfiprintf_r+0xc0>
 800e598:	465b      	mov	r3, fp
 800e59a:	4622      	mov	r2, r4
 800e59c:	4629      	mov	r1, r5
 800e59e:	4630      	mov	r0, r6
 800e5a0:	f7ff ff93 	bl	800e4ca <__sfputs_r>
 800e5a4:	3001      	adds	r0, #1
 800e5a6:	f000 80aa 	beq.w	800e6fe <_vfiprintf_r+0x20e>
 800e5aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5ac:	445a      	add	r2, fp
 800e5ae:	9209      	str	r2, [sp, #36]	; 0x24
 800e5b0:	f89a 3000 	ldrb.w	r3, [sl]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	f000 80a2 	beq.w	800e6fe <_vfiprintf_r+0x20e>
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e5c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5c4:	f10a 0a01 	add.w	sl, sl, #1
 800e5c8:	9304      	str	r3, [sp, #16]
 800e5ca:	9307      	str	r3, [sp, #28]
 800e5cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e5d0:	931a      	str	r3, [sp, #104]	; 0x68
 800e5d2:	4654      	mov	r4, sl
 800e5d4:	2205      	movs	r2, #5
 800e5d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5da:	4858      	ldr	r0, [pc, #352]	; (800e73c <_vfiprintf_r+0x24c>)
 800e5dc:	f7f1 fdd8 	bl	8000190 <memchr>
 800e5e0:	9a04      	ldr	r2, [sp, #16]
 800e5e2:	b9d8      	cbnz	r0, 800e61c <_vfiprintf_r+0x12c>
 800e5e4:	06d1      	lsls	r1, r2, #27
 800e5e6:	bf44      	itt	mi
 800e5e8:	2320      	movmi	r3, #32
 800e5ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5ee:	0713      	lsls	r3, r2, #28
 800e5f0:	bf44      	itt	mi
 800e5f2:	232b      	movmi	r3, #43	; 0x2b
 800e5f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5f8:	f89a 3000 	ldrb.w	r3, [sl]
 800e5fc:	2b2a      	cmp	r3, #42	; 0x2a
 800e5fe:	d015      	beq.n	800e62c <_vfiprintf_r+0x13c>
 800e600:	9a07      	ldr	r2, [sp, #28]
 800e602:	4654      	mov	r4, sl
 800e604:	2000      	movs	r0, #0
 800e606:	f04f 0c0a 	mov.w	ip, #10
 800e60a:	4621      	mov	r1, r4
 800e60c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e610:	3b30      	subs	r3, #48	; 0x30
 800e612:	2b09      	cmp	r3, #9
 800e614:	d94e      	bls.n	800e6b4 <_vfiprintf_r+0x1c4>
 800e616:	b1b0      	cbz	r0, 800e646 <_vfiprintf_r+0x156>
 800e618:	9207      	str	r2, [sp, #28]
 800e61a:	e014      	b.n	800e646 <_vfiprintf_r+0x156>
 800e61c:	eba0 0308 	sub.w	r3, r0, r8
 800e620:	fa09 f303 	lsl.w	r3, r9, r3
 800e624:	4313      	orrs	r3, r2
 800e626:	9304      	str	r3, [sp, #16]
 800e628:	46a2      	mov	sl, r4
 800e62a:	e7d2      	b.n	800e5d2 <_vfiprintf_r+0xe2>
 800e62c:	9b03      	ldr	r3, [sp, #12]
 800e62e:	1d19      	adds	r1, r3, #4
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	9103      	str	r1, [sp, #12]
 800e634:	2b00      	cmp	r3, #0
 800e636:	bfbb      	ittet	lt
 800e638:	425b      	neglt	r3, r3
 800e63a:	f042 0202 	orrlt.w	r2, r2, #2
 800e63e:	9307      	strge	r3, [sp, #28]
 800e640:	9307      	strlt	r3, [sp, #28]
 800e642:	bfb8      	it	lt
 800e644:	9204      	strlt	r2, [sp, #16]
 800e646:	7823      	ldrb	r3, [r4, #0]
 800e648:	2b2e      	cmp	r3, #46	; 0x2e
 800e64a:	d10c      	bne.n	800e666 <_vfiprintf_r+0x176>
 800e64c:	7863      	ldrb	r3, [r4, #1]
 800e64e:	2b2a      	cmp	r3, #42	; 0x2a
 800e650:	d135      	bne.n	800e6be <_vfiprintf_r+0x1ce>
 800e652:	9b03      	ldr	r3, [sp, #12]
 800e654:	1d1a      	adds	r2, r3, #4
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	9203      	str	r2, [sp, #12]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	bfb8      	it	lt
 800e65e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e662:	3402      	adds	r4, #2
 800e664:	9305      	str	r3, [sp, #20]
 800e666:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e74c <_vfiprintf_r+0x25c>
 800e66a:	7821      	ldrb	r1, [r4, #0]
 800e66c:	2203      	movs	r2, #3
 800e66e:	4650      	mov	r0, sl
 800e670:	f7f1 fd8e 	bl	8000190 <memchr>
 800e674:	b140      	cbz	r0, 800e688 <_vfiprintf_r+0x198>
 800e676:	2340      	movs	r3, #64	; 0x40
 800e678:	eba0 000a 	sub.w	r0, r0, sl
 800e67c:	fa03 f000 	lsl.w	r0, r3, r0
 800e680:	9b04      	ldr	r3, [sp, #16]
 800e682:	4303      	orrs	r3, r0
 800e684:	3401      	adds	r4, #1
 800e686:	9304      	str	r3, [sp, #16]
 800e688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e68c:	482c      	ldr	r0, [pc, #176]	; (800e740 <_vfiprintf_r+0x250>)
 800e68e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e692:	2206      	movs	r2, #6
 800e694:	f7f1 fd7c 	bl	8000190 <memchr>
 800e698:	2800      	cmp	r0, #0
 800e69a:	d03f      	beq.n	800e71c <_vfiprintf_r+0x22c>
 800e69c:	4b29      	ldr	r3, [pc, #164]	; (800e744 <_vfiprintf_r+0x254>)
 800e69e:	bb1b      	cbnz	r3, 800e6e8 <_vfiprintf_r+0x1f8>
 800e6a0:	9b03      	ldr	r3, [sp, #12]
 800e6a2:	3307      	adds	r3, #7
 800e6a4:	f023 0307 	bic.w	r3, r3, #7
 800e6a8:	3308      	adds	r3, #8
 800e6aa:	9303      	str	r3, [sp, #12]
 800e6ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6ae:	443b      	add	r3, r7
 800e6b0:	9309      	str	r3, [sp, #36]	; 0x24
 800e6b2:	e767      	b.n	800e584 <_vfiprintf_r+0x94>
 800e6b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e6b8:	460c      	mov	r4, r1
 800e6ba:	2001      	movs	r0, #1
 800e6bc:	e7a5      	b.n	800e60a <_vfiprintf_r+0x11a>
 800e6be:	2300      	movs	r3, #0
 800e6c0:	3401      	adds	r4, #1
 800e6c2:	9305      	str	r3, [sp, #20]
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	f04f 0c0a 	mov.w	ip, #10
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6d0:	3a30      	subs	r2, #48	; 0x30
 800e6d2:	2a09      	cmp	r2, #9
 800e6d4:	d903      	bls.n	800e6de <_vfiprintf_r+0x1ee>
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d0c5      	beq.n	800e666 <_vfiprintf_r+0x176>
 800e6da:	9105      	str	r1, [sp, #20]
 800e6dc:	e7c3      	b.n	800e666 <_vfiprintf_r+0x176>
 800e6de:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6e2:	4604      	mov	r4, r0
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	e7f0      	b.n	800e6ca <_vfiprintf_r+0x1da>
 800e6e8:	ab03      	add	r3, sp, #12
 800e6ea:	9300      	str	r3, [sp, #0]
 800e6ec:	462a      	mov	r2, r5
 800e6ee:	4b16      	ldr	r3, [pc, #88]	; (800e748 <_vfiprintf_r+0x258>)
 800e6f0:	a904      	add	r1, sp, #16
 800e6f2:	4630      	mov	r0, r6
 800e6f4:	f3af 8000 	nop.w
 800e6f8:	4607      	mov	r7, r0
 800e6fa:	1c78      	adds	r0, r7, #1
 800e6fc:	d1d6      	bne.n	800e6ac <_vfiprintf_r+0x1bc>
 800e6fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e700:	07d9      	lsls	r1, r3, #31
 800e702:	d405      	bmi.n	800e710 <_vfiprintf_r+0x220>
 800e704:	89ab      	ldrh	r3, [r5, #12]
 800e706:	059a      	lsls	r2, r3, #22
 800e708:	d402      	bmi.n	800e710 <_vfiprintf_r+0x220>
 800e70a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e70c:	f7ff fd7f 	bl	800e20e <__retarget_lock_release_recursive>
 800e710:	89ab      	ldrh	r3, [r5, #12]
 800e712:	065b      	lsls	r3, r3, #25
 800e714:	f53f af12 	bmi.w	800e53c <_vfiprintf_r+0x4c>
 800e718:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e71a:	e711      	b.n	800e540 <_vfiprintf_r+0x50>
 800e71c:	ab03      	add	r3, sp, #12
 800e71e:	9300      	str	r3, [sp, #0]
 800e720:	462a      	mov	r2, r5
 800e722:	4b09      	ldr	r3, [pc, #36]	; (800e748 <_vfiprintf_r+0x258>)
 800e724:	a904      	add	r1, sp, #16
 800e726:	4630      	mov	r0, r6
 800e728:	f000 f880 	bl	800e82c <_printf_i>
 800e72c:	e7e4      	b.n	800e6f8 <_vfiprintf_r+0x208>
 800e72e:	bf00      	nop
 800e730:	0800ffe8 	.word	0x0800ffe8
 800e734:	08010008 	.word	0x08010008
 800e738:	0800ffc8 	.word	0x0800ffc8
 800e73c:	08010028 	.word	0x08010028
 800e740:	08010032 	.word	0x08010032
 800e744:	00000000 	.word	0x00000000
 800e748:	0800e4cb 	.word	0x0800e4cb
 800e74c:	0801002e 	.word	0x0801002e

0800e750 <_printf_common>:
 800e750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e754:	4616      	mov	r6, r2
 800e756:	4699      	mov	r9, r3
 800e758:	688a      	ldr	r2, [r1, #8]
 800e75a:	690b      	ldr	r3, [r1, #16]
 800e75c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e760:	4293      	cmp	r3, r2
 800e762:	bfb8      	it	lt
 800e764:	4613      	movlt	r3, r2
 800e766:	6033      	str	r3, [r6, #0]
 800e768:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e76c:	4607      	mov	r7, r0
 800e76e:	460c      	mov	r4, r1
 800e770:	b10a      	cbz	r2, 800e776 <_printf_common+0x26>
 800e772:	3301      	adds	r3, #1
 800e774:	6033      	str	r3, [r6, #0]
 800e776:	6823      	ldr	r3, [r4, #0]
 800e778:	0699      	lsls	r1, r3, #26
 800e77a:	bf42      	ittt	mi
 800e77c:	6833      	ldrmi	r3, [r6, #0]
 800e77e:	3302      	addmi	r3, #2
 800e780:	6033      	strmi	r3, [r6, #0]
 800e782:	6825      	ldr	r5, [r4, #0]
 800e784:	f015 0506 	ands.w	r5, r5, #6
 800e788:	d106      	bne.n	800e798 <_printf_common+0x48>
 800e78a:	f104 0a19 	add.w	sl, r4, #25
 800e78e:	68e3      	ldr	r3, [r4, #12]
 800e790:	6832      	ldr	r2, [r6, #0]
 800e792:	1a9b      	subs	r3, r3, r2
 800e794:	42ab      	cmp	r3, r5
 800e796:	dc26      	bgt.n	800e7e6 <_printf_common+0x96>
 800e798:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e79c:	1e13      	subs	r3, r2, #0
 800e79e:	6822      	ldr	r2, [r4, #0]
 800e7a0:	bf18      	it	ne
 800e7a2:	2301      	movne	r3, #1
 800e7a4:	0692      	lsls	r2, r2, #26
 800e7a6:	d42b      	bmi.n	800e800 <_printf_common+0xb0>
 800e7a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e7ac:	4649      	mov	r1, r9
 800e7ae:	4638      	mov	r0, r7
 800e7b0:	47c0      	blx	r8
 800e7b2:	3001      	adds	r0, #1
 800e7b4:	d01e      	beq.n	800e7f4 <_printf_common+0xa4>
 800e7b6:	6823      	ldr	r3, [r4, #0]
 800e7b8:	68e5      	ldr	r5, [r4, #12]
 800e7ba:	6832      	ldr	r2, [r6, #0]
 800e7bc:	f003 0306 	and.w	r3, r3, #6
 800e7c0:	2b04      	cmp	r3, #4
 800e7c2:	bf08      	it	eq
 800e7c4:	1aad      	subeq	r5, r5, r2
 800e7c6:	68a3      	ldr	r3, [r4, #8]
 800e7c8:	6922      	ldr	r2, [r4, #16]
 800e7ca:	bf0c      	ite	eq
 800e7cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e7d0:	2500      	movne	r5, #0
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	bfc4      	itt	gt
 800e7d6:	1a9b      	subgt	r3, r3, r2
 800e7d8:	18ed      	addgt	r5, r5, r3
 800e7da:	2600      	movs	r6, #0
 800e7dc:	341a      	adds	r4, #26
 800e7de:	42b5      	cmp	r5, r6
 800e7e0:	d11a      	bne.n	800e818 <_printf_common+0xc8>
 800e7e2:	2000      	movs	r0, #0
 800e7e4:	e008      	b.n	800e7f8 <_printf_common+0xa8>
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	4652      	mov	r2, sl
 800e7ea:	4649      	mov	r1, r9
 800e7ec:	4638      	mov	r0, r7
 800e7ee:	47c0      	blx	r8
 800e7f0:	3001      	adds	r0, #1
 800e7f2:	d103      	bne.n	800e7fc <_printf_common+0xac>
 800e7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7fc:	3501      	adds	r5, #1
 800e7fe:	e7c6      	b.n	800e78e <_printf_common+0x3e>
 800e800:	18e1      	adds	r1, r4, r3
 800e802:	1c5a      	adds	r2, r3, #1
 800e804:	2030      	movs	r0, #48	; 0x30
 800e806:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e80a:	4422      	add	r2, r4
 800e80c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e810:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e814:	3302      	adds	r3, #2
 800e816:	e7c7      	b.n	800e7a8 <_printf_common+0x58>
 800e818:	2301      	movs	r3, #1
 800e81a:	4622      	mov	r2, r4
 800e81c:	4649      	mov	r1, r9
 800e81e:	4638      	mov	r0, r7
 800e820:	47c0      	blx	r8
 800e822:	3001      	adds	r0, #1
 800e824:	d0e6      	beq.n	800e7f4 <_printf_common+0xa4>
 800e826:	3601      	adds	r6, #1
 800e828:	e7d9      	b.n	800e7de <_printf_common+0x8e>
	...

0800e82c <_printf_i>:
 800e82c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e830:	7e0f      	ldrb	r7, [r1, #24]
 800e832:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e834:	2f78      	cmp	r7, #120	; 0x78
 800e836:	4691      	mov	r9, r2
 800e838:	4680      	mov	r8, r0
 800e83a:	460c      	mov	r4, r1
 800e83c:	469a      	mov	sl, r3
 800e83e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e842:	d807      	bhi.n	800e854 <_printf_i+0x28>
 800e844:	2f62      	cmp	r7, #98	; 0x62
 800e846:	d80a      	bhi.n	800e85e <_printf_i+0x32>
 800e848:	2f00      	cmp	r7, #0
 800e84a:	f000 80d8 	beq.w	800e9fe <_printf_i+0x1d2>
 800e84e:	2f58      	cmp	r7, #88	; 0x58
 800e850:	f000 80a3 	beq.w	800e99a <_printf_i+0x16e>
 800e854:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e858:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e85c:	e03a      	b.n	800e8d4 <_printf_i+0xa8>
 800e85e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e862:	2b15      	cmp	r3, #21
 800e864:	d8f6      	bhi.n	800e854 <_printf_i+0x28>
 800e866:	a101      	add	r1, pc, #4	; (adr r1, 800e86c <_printf_i+0x40>)
 800e868:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e86c:	0800e8c5 	.word	0x0800e8c5
 800e870:	0800e8d9 	.word	0x0800e8d9
 800e874:	0800e855 	.word	0x0800e855
 800e878:	0800e855 	.word	0x0800e855
 800e87c:	0800e855 	.word	0x0800e855
 800e880:	0800e855 	.word	0x0800e855
 800e884:	0800e8d9 	.word	0x0800e8d9
 800e888:	0800e855 	.word	0x0800e855
 800e88c:	0800e855 	.word	0x0800e855
 800e890:	0800e855 	.word	0x0800e855
 800e894:	0800e855 	.word	0x0800e855
 800e898:	0800e9e5 	.word	0x0800e9e5
 800e89c:	0800e909 	.word	0x0800e909
 800e8a0:	0800e9c7 	.word	0x0800e9c7
 800e8a4:	0800e855 	.word	0x0800e855
 800e8a8:	0800e855 	.word	0x0800e855
 800e8ac:	0800ea07 	.word	0x0800ea07
 800e8b0:	0800e855 	.word	0x0800e855
 800e8b4:	0800e909 	.word	0x0800e909
 800e8b8:	0800e855 	.word	0x0800e855
 800e8bc:	0800e855 	.word	0x0800e855
 800e8c0:	0800e9cf 	.word	0x0800e9cf
 800e8c4:	682b      	ldr	r3, [r5, #0]
 800e8c6:	1d1a      	adds	r2, r3, #4
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	602a      	str	r2, [r5, #0]
 800e8cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e8d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	e0a3      	b.n	800ea20 <_printf_i+0x1f4>
 800e8d8:	6820      	ldr	r0, [r4, #0]
 800e8da:	6829      	ldr	r1, [r5, #0]
 800e8dc:	0606      	lsls	r6, r0, #24
 800e8de:	f101 0304 	add.w	r3, r1, #4
 800e8e2:	d50a      	bpl.n	800e8fa <_printf_i+0xce>
 800e8e4:	680e      	ldr	r6, [r1, #0]
 800e8e6:	602b      	str	r3, [r5, #0]
 800e8e8:	2e00      	cmp	r6, #0
 800e8ea:	da03      	bge.n	800e8f4 <_printf_i+0xc8>
 800e8ec:	232d      	movs	r3, #45	; 0x2d
 800e8ee:	4276      	negs	r6, r6
 800e8f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8f4:	485e      	ldr	r0, [pc, #376]	; (800ea70 <_printf_i+0x244>)
 800e8f6:	230a      	movs	r3, #10
 800e8f8:	e019      	b.n	800e92e <_printf_i+0x102>
 800e8fa:	680e      	ldr	r6, [r1, #0]
 800e8fc:	602b      	str	r3, [r5, #0]
 800e8fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e902:	bf18      	it	ne
 800e904:	b236      	sxthne	r6, r6
 800e906:	e7ef      	b.n	800e8e8 <_printf_i+0xbc>
 800e908:	682b      	ldr	r3, [r5, #0]
 800e90a:	6820      	ldr	r0, [r4, #0]
 800e90c:	1d19      	adds	r1, r3, #4
 800e90e:	6029      	str	r1, [r5, #0]
 800e910:	0601      	lsls	r1, r0, #24
 800e912:	d501      	bpl.n	800e918 <_printf_i+0xec>
 800e914:	681e      	ldr	r6, [r3, #0]
 800e916:	e002      	b.n	800e91e <_printf_i+0xf2>
 800e918:	0646      	lsls	r6, r0, #25
 800e91a:	d5fb      	bpl.n	800e914 <_printf_i+0xe8>
 800e91c:	881e      	ldrh	r6, [r3, #0]
 800e91e:	4854      	ldr	r0, [pc, #336]	; (800ea70 <_printf_i+0x244>)
 800e920:	2f6f      	cmp	r7, #111	; 0x6f
 800e922:	bf0c      	ite	eq
 800e924:	2308      	moveq	r3, #8
 800e926:	230a      	movne	r3, #10
 800e928:	2100      	movs	r1, #0
 800e92a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e92e:	6865      	ldr	r5, [r4, #4]
 800e930:	60a5      	str	r5, [r4, #8]
 800e932:	2d00      	cmp	r5, #0
 800e934:	bfa2      	ittt	ge
 800e936:	6821      	ldrge	r1, [r4, #0]
 800e938:	f021 0104 	bicge.w	r1, r1, #4
 800e93c:	6021      	strge	r1, [r4, #0]
 800e93e:	b90e      	cbnz	r6, 800e944 <_printf_i+0x118>
 800e940:	2d00      	cmp	r5, #0
 800e942:	d04d      	beq.n	800e9e0 <_printf_i+0x1b4>
 800e944:	4615      	mov	r5, r2
 800e946:	fbb6 f1f3 	udiv	r1, r6, r3
 800e94a:	fb03 6711 	mls	r7, r3, r1, r6
 800e94e:	5dc7      	ldrb	r7, [r0, r7]
 800e950:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e954:	4637      	mov	r7, r6
 800e956:	42bb      	cmp	r3, r7
 800e958:	460e      	mov	r6, r1
 800e95a:	d9f4      	bls.n	800e946 <_printf_i+0x11a>
 800e95c:	2b08      	cmp	r3, #8
 800e95e:	d10b      	bne.n	800e978 <_printf_i+0x14c>
 800e960:	6823      	ldr	r3, [r4, #0]
 800e962:	07de      	lsls	r6, r3, #31
 800e964:	d508      	bpl.n	800e978 <_printf_i+0x14c>
 800e966:	6923      	ldr	r3, [r4, #16]
 800e968:	6861      	ldr	r1, [r4, #4]
 800e96a:	4299      	cmp	r1, r3
 800e96c:	bfde      	ittt	le
 800e96e:	2330      	movle	r3, #48	; 0x30
 800e970:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e974:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e978:	1b52      	subs	r2, r2, r5
 800e97a:	6122      	str	r2, [r4, #16]
 800e97c:	f8cd a000 	str.w	sl, [sp]
 800e980:	464b      	mov	r3, r9
 800e982:	aa03      	add	r2, sp, #12
 800e984:	4621      	mov	r1, r4
 800e986:	4640      	mov	r0, r8
 800e988:	f7ff fee2 	bl	800e750 <_printf_common>
 800e98c:	3001      	adds	r0, #1
 800e98e:	d14c      	bne.n	800ea2a <_printf_i+0x1fe>
 800e990:	f04f 30ff 	mov.w	r0, #4294967295
 800e994:	b004      	add	sp, #16
 800e996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e99a:	4835      	ldr	r0, [pc, #212]	; (800ea70 <_printf_i+0x244>)
 800e99c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e9a0:	6829      	ldr	r1, [r5, #0]
 800e9a2:	6823      	ldr	r3, [r4, #0]
 800e9a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800e9a8:	6029      	str	r1, [r5, #0]
 800e9aa:	061d      	lsls	r5, r3, #24
 800e9ac:	d514      	bpl.n	800e9d8 <_printf_i+0x1ac>
 800e9ae:	07df      	lsls	r7, r3, #31
 800e9b0:	bf44      	itt	mi
 800e9b2:	f043 0320 	orrmi.w	r3, r3, #32
 800e9b6:	6023      	strmi	r3, [r4, #0]
 800e9b8:	b91e      	cbnz	r6, 800e9c2 <_printf_i+0x196>
 800e9ba:	6823      	ldr	r3, [r4, #0]
 800e9bc:	f023 0320 	bic.w	r3, r3, #32
 800e9c0:	6023      	str	r3, [r4, #0]
 800e9c2:	2310      	movs	r3, #16
 800e9c4:	e7b0      	b.n	800e928 <_printf_i+0xfc>
 800e9c6:	6823      	ldr	r3, [r4, #0]
 800e9c8:	f043 0320 	orr.w	r3, r3, #32
 800e9cc:	6023      	str	r3, [r4, #0]
 800e9ce:	2378      	movs	r3, #120	; 0x78
 800e9d0:	4828      	ldr	r0, [pc, #160]	; (800ea74 <_printf_i+0x248>)
 800e9d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e9d6:	e7e3      	b.n	800e9a0 <_printf_i+0x174>
 800e9d8:	0659      	lsls	r1, r3, #25
 800e9da:	bf48      	it	mi
 800e9dc:	b2b6      	uxthmi	r6, r6
 800e9de:	e7e6      	b.n	800e9ae <_printf_i+0x182>
 800e9e0:	4615      	mov	r5, r2
 800e9e2:	e7bb      	b.n	800e95c <_printf_i+0x130>
 800e9e4:	682b      	ldr	r3, [r5, #0]
 800e9e6:	6826      	ldr	r6, [r4, #0]
 800e9e8:	6961      	ldr	r1, [r4, #20]
 800e9ea:	1d18      	adds	r0, r3, #4
 800e9ec:	6028      	str	r0, [r5, #0]
 800e9ee:	0635      	lsls	r5, r6, #24
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	d501      	bpl.n	800e9f8 <_printf_i+0x1cc>
 800e9f4:	6019      	str	r1, [r3, #0]
 800e9f6:	e002      	b.n	800e9fe <_printf_i+0x1d2>
 800e9f8:	0670      	lsls	r0, r6, #25
 800e9fa:	d5fb      	bpl.n	800e9f4 <_printf_i+0x1c8>
 800e9fc:	8019      	strh	r1, [r3, #0]
 800e9fe:	2300      	movs	r3, #0
 800ea00:	6123      	str	r3, [r4, #16]
 800ea02:	4615      	mov	r5, r2
 800ea04:	e7ba      	b.n	800e97c <_printf_i+0x150>
 800ea06:	682b      	ldr	r3, [r5, #0]
 800ea08:	1d1a      	adds	r2, r3, #4
 800ea0a:	602a      	str	r2, [r5, #0]
 800ea0c:	681d      	ldr	r5, [r3, #0]
 800ea0e:	6862      	ldr	r2, [r4, #4]
 800ea10:	2100      	movs	r1, #0
 800ea12:	4628      	mov	r0, r5
 800ea14:	f7f1 fbbc 	bl	8000190 <memchr>
 800ea18:	b108      	cbz	r0, 800ea1e <_printf_i+0x1f2>
 800ea1a:	1b40      	subs	r0, r0, r5
 800ea1c:	6060      	str	r0, [r4, #4]
 800ea1e:	6863      	ldr	r3, [r4, #4]
 800ea20:	6123      	str	r3, [r4, #16]
 800ea22:	2300      	movs	r3, #0
 800ea24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea28:	e7a8      	b.n	800e97c <_printf_i+0x150>
 800ea2a:	6923      	ldr	r3, [r4, #16]
 800ea2c:	462a      	mov	r2, r5
 800ea2e:	4649      	mov	r1, r9
 800ea30:	4640      	mov	r0, r8
 800ea32:	47d0      	blx	sl
 800ea34:	3001      	adds	r0, #1
 800ea36:	d0ab      	beq.n	800e990 <_printf_i+0x164>
 800ea38:	6823      	ldr	r3, [r4, #0]
 800ea3a:	079b      	lsls	r3, r3, #30
 800ea3c:	d413      	bmi.n	800ea66 <_printf_i+0x23a>
 800ea3e:	68e0      	ldr	r0, [r4, #12]
 800ea40:	9b03      	ldr	r3, [sp, #12]
 800ea42:	4298      	cmp	r0, r3
 800ea44:	bfb8      	it	lt
 800ea46:	4618      	movlt	r0, r3
 800ea48:	e7a4      	b.n	800e994 <_printf_i+0x168>
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	4632      	mov	r2, r6
 800ea4e:	4649      	mov	r1, r9
 800ea50:	4640      	mov	r0, r8
 800ea52:	47d0      	blx	sl
 800ea54:	3001      	adds	r0, #1
 800ea56:	d09b      	beq.n	800e990 <_printf_i+0x164>
 800ea58:	3501      	adds	r5, #1
 800ea5a:	68e3      	ldr	r3, [r4, #12]
 800ea5c:	9903      	ldr	r1, [sp, #12]
 800ea5e:	1a5b      	subs	r3, r3, r1
 800ea60:	42ab      	cmp	r3, r5
 800ea62:	dcf2      	bgt.n	800ea4a <_printf_i+0x21e>
 800ea64:	e7eb      	b.n	800ea3e <_printf_i+0x212>
 800ea66:	2500      	movs	r5, #0
 800ea68:	f104 0619 	add.w	r6, r4, #25
 800ea6c:	e7f5      	b.n	800ea5a <_printf_i+0x22e>
 800ea6e:	bf00      	nop
 800ea70:	08010039 	.word	0x08010039
 800ea74:	0801004a 	.word	0x0801004a

0800ea78 <_putc_r>:
 800ea78:	b570      	push	{r4, r5, r6, lr}
 800ea7a:	460d      	mov	r5, r1
 800ea7c:	4614      	mov	r4, r2
 800ea7e:	4606      	mov	r6, r0
 800ea80:	b118      	cbz	r0, 800ea8a <_putc_r+0x12>
 800ea82:	6983      	ldr	r3, [r0, #24]
 800ea84:	b90b      	cbnz	r3, 800ea8a <_putc_r+0x12>
 800ea86:	f7ff fb23 	bl	800e0d0 <__sinit>
 800ea8a:	4b1c      	ldr	r3, [pc, #112]	; (800eafc <_putc_r+0x84>)
 800ea8c:	429c      	cmp	r4, r3
 800ea8e:	d124      	bne.n	800eada <_putc_r+0x62>
 800ea90:	6874      	ldr	r4, [r6, #4]
 800ea92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea94:	07d8      	lsls	r0, r3, #31
 800ea96:	d405      	bmi.n	800eaa4 <_putc_r+0x2c>
 800ea98:	89a3      	ldrh	r3, [r4, #12]
 800ea9a:	0599      	lsls	r1, r3, #22
 800ea9c:	d402      	bmi.n	800eaa4 <_putc_r+0x2c>
 800ea9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eaa0:	f7ff fbb4 	bl	800e20c <__retarget_lock_acquire_recursive>
 800eaa4:	68a3      	ldr	r3, [r4, #8]
 800eaa6:	3b01      	subs	r3, #1
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	60a3      	str	r3, [r4, #8]
 800eaac:	da05      	bge.n	800eaba <_putc_r+0x42>
 800eaae:	69a2      	ldr	r2, [r4, #24]
 800eab0:	4293      	cmp	r3, r2
 800eab2:	db1c      	blt.n	800eaee <_putc_r+0x76>
 800eab4:	b2eb      	uxtb	r3, r5
 800eab6:	2b0a      	cmp	r3, #10
 800eab8:	d019      	beq.n	800eaee <_putc_r+0x76>
 800eaba:	6823      	ldr	r3, [r4, #0]
 800eabc:	1c5a      	adds	r2, r3, #1
 800eabe:	6022      	str	r2, [r4, #0]
 800eac0:	701d      	strb	r5, [r3, #0]
 800eac2:	b2ed      	uxtb	r5, r5
 800eac4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eac6:	07da      	lsls	r2, r3, #31
 800eac8:	d405      	bmi.n	800ead6 <_putc_r+0x5e>
 800eaca:	89a3      	ldrh	r3, [r4, #12]
 800eacc:	059b      	lsls	r3, r3, #22
 800eace:	d402      	bmi.n	800ead6 <_putc_r+0x5e>
 800ead0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ead2:	f7ff fb9c 	bl	800e20e <__retarget_lock_release_recursive>
 800ead6:	4628      	mov	r0, r5
 800ead8:	bd70      	pop	{r4, r5, r6, pc}
 800eada:	4b09      	ldr	r3, [pc, #36]	; (800eb00 <_putc_r+0x88>)
 800eadc:	429c      	cmp	r4, r3
 800eade:	d101      	bne.n	800eae4 <_putc_r+0x6c>
 800eae0:	68b4      	ldr	r4, [r6, #8]
 800eae2:	e7d6      	b.n	800ea92 <_putc_r+0x1a>
 800eae4:	4b07      	ldr	r3, [pc, #28]	; (800eb04 <_putc_r+0x8c>)
 800eae6:	429c      	cmp	r4, r3
 800eae8:	bf08      	it	eq
 800eaea:	68f4      	ldreq	r4, [r6, #12]
 800eaec:	e7d1      	b.n	800ea92 <_putc_r+0x1a>
 800eaee:	4629      	mov	r1, r5
 800eaf0:	4622      	mov	r2, r4
 800eaf2:	4630      	mov	r0, r6
 800eaf4:	f7ff f912 	bl	800dd1c <__swbuf_r>
 800eaf8:	4605      	mov	r5, r0
 800eafa:	e7e3      	b.n	800eac4 <_putc_r+0x4c>
 800eafc:	0800ffe8 	.word	0x0800ffe8
 800eb00:	08010008 	.word	0x08010008
 800eb04:	0800ffc8 	.word	0x0800ffc8

0800eb08 <_sbrk_r>:
 800eb08:	b538      	push	{r3, r4, r5, lr}
 800eb0a:	4d06      	ldr	r5, [pc, #24]	; (800eb24 <_sbrk_r+0x1c>)
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	4604      	mov	r4, r0
 800eb10:	4608      	mov	r0, r1
 800eb12:	602b      	str	r3, [r5, #0]
 800eb14:	f7f4 fb68 	bl	80031e8 <_sbrk>
 800eb18:	1c43      	adds	r3, r0, #1
 800eb1a:	d102      	bne.n	800eb22 <_sbrk_r+0x1a>
 800eb1c:	682b      	ldr	r3, [r5, #0]
 800eb1e:	b103      	cbz	r3, 800eb22 <_sbrk_r+0x1a>
 800eb20:	6023      	str	r3, [r4, #0]
 800eb22:	bd38      	pop	{r3, r4, r5, pc}
 800eb24:	2000296c 	.word	0x2000296c

0800eb28 <__sread>:
 800eb28:	b510      	push	{r4, lr}
 800eb2a:	460c      	mov	r4, r1
 800eb2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb30:	f000 f8a0 	bl	800ec74 <_read_r>
 800eb34:	2800      	cmp	r0, #0
 800eb36:	bfab      	itete	ge
 800eb38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eb3a:	89a3      	ldrhlt	r3, [r4, #12]
 800eb3c:	181b      	addge	r3, r3, r0
 800eb3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eb42:	bfac      	ite	ge
 800eb44:	6563      	strge	r3, [r4, #84]	; 0x54
 800eb46:	81a3      	strhlt	r3, [r4, #12]
 800eb48:	bd10      	pop	{r4, pc}

0800eb4a <__swrite>:
 800eb4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb4e:	461f      	mov	r7, r3
 800eb50:	898b      	ldrh	r3, [r1, #12]
 800eb52:	05db      	lsls	r3, r3, #23
 800eb54:	4605      	mov	r5, r0
 800eb56:	460c      	mov	r4, r1
 800eb58:	4616      	mov	r6, r2
 800eb5a:	d505      	bpl.n	800eb68 <__swrite+0x1e>
 800eb5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb60:	2302      	movs	r3, #2
 800eb62:	2200      	movs	r2, #0
 800eb64:	f000 f868 	bl	800ec38 <_lseek_r>
 800eb68:	89a3      	ldrh	r3, [r4, #12]
 800eb6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eb72:	81a3      	strh	r3, [r4, #12]
 800eb74:	4632      	mov	r2, r6
 800eb76:	463b      	mov	r3, r7
 800eb78:	4628      	mov	r0, r5
 800eb7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb7e:	f000 b817 	b.w	800ebb0 <_write_r>

0800eb82 <__sseek>:
 800eb82:	b510      	push	{r4, lr}
 800eb84:	460c      	mov	r4, r1
 800eb86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb8a:	f000 f855 	bl	800ec38 <_lseek_r>
 800eb8e:	1c43      	adds	r3, r0, #1
 800eb90:	89a3      	ldrh	r3, [r4, #12]
 800eb92:	bf15      	itete	ne
 800eb94:	6560      	strne	r0, [r4, #84]	; 0x54
 800eb96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eb9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eb9e:	81a3      	strheq	r3, [r4, #12]
 800eba0:	bf18      	it	ne
 800eba2:	81a3      	strhne	r3, [r4, #12]
 800eba4:	bd10      	pop	{r4, pc}

0800eba6 <__sclose>:
 800eba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebaa:	f000 b813 	b.w	800ebd4 <_close_r>
	...

0800ebb0 <_write_r>:
 800ebb0:	b538      	push	{r3, r4, r5, lr}
 800ebb2:	4d07      	ldr	r5, [pc, #28]	; (800ebd0 <_write_r+0x20>)
 800ebb4:	4604      	mov	r4, r0
 800ebb6:	4608      	mov	r0, r1
 800ebb8:	4611      	mov	r1, r2
 800ebba:	2200      	movs	r2, #0
 800ebbc:	602a      	str	r2, [r5, #0]
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	f7fc ff0c 	bl	800b9dc <_write>
 800ebc4:	1c43      	adds	r3, r0, #1
 800ebc6:	d102      	bne.n	800ebce <_write_r+0x1e>
 800ebc8:	682b      	ldr	r3, [r5, #0]
 800ebca:	b103      	cbz	r3, 800ebce <_write_r+0x1e>
 800ebcc:	6023      	str	r3, [r4, #0]
 800ebce:	bd38      	pop	{r3, r4, r5, pc}
 800ebd0:	2000296c 	.word	0x2000296c

0800ebd4 <_close_r>:
 800ebd4:	b538      	push	{r3, r4, r5, lr}
 800ebd6:	4d06      	ldr	r5, [pc, #24]	; (800ebf0 <_close_r+0x1c>)
 800ebd8:	2300      	movs	r3, #0
 800ebda:	4604      	mov	r4, r0
 800ebdc:	4608      	mov	r0, r1
 800ebde:	602b      	str	r3, [r5, #0]
 800ebe0:	f7f4 facd 	bl	800317e <_close>
 800ebe4:	1c43      	adds	r3, r0, #1
 800ebe6:	d102      	bne.n	800ebee <_close_r+0x1a>
 800ebe8:	682b      	ldr	r3, [r5, #0]
 800ebea:	b103      	cbz	r3, 800ebee <_close_r+0x1a>
 800ebec:	6023      	str	r3, [r4, #0]
 800ebee:	bd38      	pop	{r3, r4, r5, pc}
 800ebf0:	2000296c 	.word	0x2000296c

0800ebf4 <_fstat_r>:
 800ebf4:	b538      	push	{r3, r4, r5, lr}
 800ebf6:	4d07      	ldr	r5, [pc, #28]	; (800ec14 <_fstat_r+0x20>)
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	4604      	mov	r4, r0
 800ebfc:	4608      	mov	r0, r1
 800ebfe:	4611      	mov	r1, r2
 800ec00:	602b      	str	r3, [r5, #0]
 800ec02:	f7f4 fac8 	bl	8003196 <_fstat>
 800ec06:	1c43      	adds	r3, r0, #1
 800ec08:	d102      	bne.n	800ec10 <_fstat_r+0x1c>
 800ec0a:	682b      	ldr	r3, [r5, #0]
 800ec0c:	b103      	cbz	r3, 800ec10 <_fstat_r+0x1c>
 800ec0e:	6023      	str	r3, [r4, #0]
 800ec10:	bd38      	pop	{r3, r4, r5, pc}
 800ec12:	bf00      	nop
 800ec14:	2000296c 	.word	0x2000296c

0800ec18 <_isatty_r>:
 800ec18:	b538      	push	{r3, r4, r5, lr}
 800ec1a:	4d06      	ldr	r5, [pc, #24]	; (800ec34 <_isatty_r+0x1c>)
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	4604      	mov	r4, r0
 800ec20:	4608      	mov	r0, r1
 800ec22:	602b      	str	r3, [r5, #0]
 800ec24:	f7f4 fac7 	bl	80031b6 <_isatty>
 800ec28:	1c43      	adds	r3, r0, #1
 800ec2a:	d102      	bne.n	800ec32 <_isatty_r+0x1a>
 800ec2c:	682b      	ldr	r3, [r5, #0]
 800ec2e:	b103      	cbz	r3, 800ec32 <_isatty_r+0x1a>
 800ec30:	6023      	str	r3, [r4, #0]
 800ec32:	bd38      	pop	{r3, r4, r5, pc}
 800ec34:	2000296c 	.word	0x2000296c

0800ec38 <_lseek_r>:
 800ec38:	b538      	push	{r3, r4, r5, lr}
 800ec3a:	4d07      	ldr	r5, [pc, #28]	; (800ec58 <_lseek_r+0x20>)
 800ec3c:	4604      	mov	r4, r0
 800ec3e:	4608      	mov	r0, r1
 800ec40:	4611      	mov	r1, r2
 800ec42:	2200      	movs	r2, #0
 800ec44:	602a      	str	r2, [r5, #0]
 800ec46:	461a      	mov	r2, r3
 800ec48:	f7f4 fac0 	bl	80031cc <_lseek>
 800ec4c:	1c43      	adds	r3, r0, #1
 800ec4e:	d102      	bne.n	800ec56 <_lseek_r+0x1e>
 800ec50:	682b      	ldr	r3, [r5, #0]
 800ec52:	b103      	cbz	r3, 800ec56 <_lseek_r+0x1e>
 800ec54:	6023      	str	r3, [r4, #0]
 800ec56:	bd38      	pop	{r3, r4, r5, pc}
 800ec58:	2000296c 	.word	0x2000296c

0800ec5c <__malloc_lock>:
 800ec5c:	4801      	ldr	r0, [pc, #4]	; (800ec64 <__malloc_lock+0x8>)
 800ec5e:	f7ff bad5 	b.w	800e20c <__retarget_lock_acquire_recursive>
 800ec62:	bf00      	nop
 800ec64:	20002960 	.word	0x20002960

0800ec68 <__malloc_unlock>:
 800ec68:	4801      	ldr	r0, [pc, #4]	; (800ec70 <__malloc_unlock+0x8>)
 800ec6a:	f7ff bad0 	b.w	800e20e <__retarget_lock_release_recursive>
 800ec6e:	bf00      	nop
 800ec70:	20002960 	.word	0x20002960

0800ec74 <_read_r>:
 800ec74:	b538      	push	{r3, r4, r5, lr}
 800ec76:	4d07      	ldr	r5, [pc, #28]	; (800ec94 <_read_r+0x20>)
 800ec78:	4604      	mov	r4, r0
 800ec7a:	4608      	mov	r0, r1
 800ec7c:	4611      	mov	r1, r2
 800ec7e:	2200      	movs	r2, #0
 800ec80:	602a      	str	r2, [r5, #0]
 800ec82:	461a      	mov	r2, r3
 800ec84:	f7f4 fa5e 	bl	8003144 <_read>
 800ec88:	1c43      	adds	r3, r0, #1
 800ec8a:	d102      	bne.n	800ec92 <_read_r+0x1e>
 800ec8c:	682b      	ldr	r3, [r5, #0]
 800ec8e:	b103      	cbz	r3, 800ec92 <_read_r+0x1e>
 800ec90:	6023      	str	r3, [r4, #0]
 800ec92:	bd38      	pop	{r3, r4, r5, pc}
 800ec94:	2000296c 	.word	0x2000296c

0800ec98 <_init>:
 800ec98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec9a:	bf00      	nop
 800ec9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec9e:	bc08      	pop	{r3}
 800eca0:	469e      	mov	lr, r3
 800eca2:	4770      	bx	lr

0800eca4 <_fini>:
 800eca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eca6:	bf00      	nop
 800eca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecaa:	bc08      	pop	{r3}
 800ecac:	469e      	mov	lr, r3
 800ecae:	4770      	bx	lr
